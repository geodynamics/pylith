# -*- Pyrex -*-
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "pylith/meshio/MeshIO.hh"
#include "TestMeshIO.hh"
#include "data/MeshData.hh"
#include "data/MeshData2Din3D.hh"
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
    ctypedef unsigned long size_t
    void* malloc(size_t size)
    void free(void* mem)


#embed{ void ALEMesh_destructor(void* pObj)
  ALE::Obj<ALE::Mesh>* pMesh = (ALE::Obj<ALE::Mesh>*) pObj;
  delete pMesh;
#}embed

# ----------------------------------------------------------------------
cdef class TestMeshIO:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* TestMeshIO_constructor()
    return (void*)(new pylith::meshio::TestMeshIO);
    #}embed

    self.thisptr = TestMeshIO_constructor()
    self.handle = self._createHandle()
    self.name = "pylith_meshio_TestMeshIO"
    return


  def createMesh(self):
    """
    Create mesh from data.
    """
    # create shim for method 'createMesh'
    #embed{ void TestMeshIO_createMesh(void* pObj, void** meshObj)
    pylith::meshio::MeshData2Din3D data;
    ALE::Obj<ALE::Mesh>* mesh =
      ((pylith::meshio::TestMeshIO*) pObj)->createMesh(data);
    *meshObj = (void*) mesh;
    #}embed

    cdef void* meshObj
    meshObj = NULL
    TestMeshIO_createMesh(self.thisptr, &meshObj)
    return PyCObject_FromVoidPtr(meshObj, ALEMesh_destructor)


  def checkVals(self, mesh):
    """
    Check mesh to make sure it matches original mesh.
    """
    # create shim for method 'checkVals'
    #embed{ void TestMeshIO_checkVals(void* pObj, void* meshObj)
    ALE::Obj<ALE::Mesh>* mesh = (ALE::Obj<ALE::Mesh>*) meshObj;
    pylith::meshio::MeshData2Din3D data;
    ((pylith::meshio::TestMeshIO*) pObj)->checkVals(*mesh, data);
    #}embed
    TestMeshIO_checkVals(self.thisptr, PyCObject_AsVoidPtr(mesh))
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    # create shim for destructor
    #embed{ void TestMeshIO_destructor(void* pObj)
    pylith::meshio::TestMeshIO* tester = (pylith::meshio::TestMeshIO*) pObj;
    delete tester;
    #}embed
    return PyCObject_FromVoidPtr(self.thisptr, TestMeshIO_destructor)


# End of file 
