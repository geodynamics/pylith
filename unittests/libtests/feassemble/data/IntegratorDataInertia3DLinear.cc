// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application integratorinertia3dlinear.

#include "IntegratorDataInertia3DLinear.hh"

const int pylith::feassemble::IntegratorDataInertia3DLinear::_numVertices = 4;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_spaceDim = 3;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_numCells = 1;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_cellDim = 3;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_numBasis = 4;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_numQuadPts = 1;

const int pylith::feassemble::IntegratorDataInertia3DLinear::_fiberDim = 3;

const double pylith::feassemble::IntegratorDataInertia3DLinear::_vertices[] = {
 -5.00000000e-01, -1.00000000e+00, -5.00000000e-01,
  2.00000000e+00, -5.00000000e-01, -4.00000000e-01,
  1.00000000e+00, -1.00000000e-01, -3.00000000e-01,
 -2.00000000e-01,  5.00000000e-01,  2.00000000e+00,
};

const int pylith::feassemble::IntegratorDataInertia3DLinear::_cells[] = {
       0,       1,       2,       3,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_quadPts[] = {
  2.50000000e-01,  2.50000000e-01,  2.50000000e-01,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_quadWts[] = {
  1.66666667e-01,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_basis[] = {
  2.50000000e-01,  2.50000000e-01,  2.50000000e-01,
  2.50000000e-01,};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_basisDeriv[] = {
 -1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_fieldIn[] = {
  1.20000000e+00,  1.00000000e-01, -3.00000000e-01,
  2.00000000e-01, -8.00000000e-01,  1.20000000e+00,
  1.30000000e+00, -2.00000000e-01,  1.70000000e+00,
  1.10000000e+00,  1.40000000e+00,  9.00000000e-01,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_valsAction[] = {
  1.27775000e-01,  1.68125000e-02,  1.17687500e-01,
  1.27775000e-01,  1.68125000e-02,  1.17687500e-01,
  1.27775000e-01,  1.68125000e-02,  1.17687500e-01,
  1.27775000e-01,  1.68125000e-02,  1.17687500e-01,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_valsMatrix[] = {
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  3.36250000e-02,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  3.36250000e-02,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
  0.00000000e+00,  0.00000000e+00,  3.36250000e-02,
};

const double pylith::feassemble::IntegratorDataInertia3DLinear::_valsLumped[] = {
  1.34500000e-01,  1.34500000e-01,  1.34500000e-01,
  1.34500000e-01,  1.34500000e-01,  1.34500000e-01,
  1.34500000e-01,  1.34500000e-01,  1.34500000e-01,
  1.34500000e-01,  1.34500000e-01,  1.34500000e-01,
};

pylith::feassemble::IntegratorDataInertia3DLinear::IntegratorDataInertia3DLinear(void)
{ // constructor
  numVertices = _numVertices;
  spaceDim = _spaceDim;
  numCells = _numCells;
  cellDim = _cellDim;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  fiberDim = _fiberDim;
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDeriv = const_cast<double*>(_basisDeriv);
  fieldIn = const_cast<double*>(_fieldIn);
  valsAction = const_cast<double*>(_valsAction);
  valsMatrix = const_cast<double*>(_valsMatrix);
  valsLumped = const_cast<double*>(_valsLumped);
} // constructor

pylith::feassemble::IntegratorDataInertia3DLinear::~IntegratorDataInertia3DLinear(void)
{}


// End of file
