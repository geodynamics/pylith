// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application elasticityimplicit.

#include "ElasticityImplicitData3DLinear.hh"

const int pylith::feassemble::ElasticityImplicitData3DLinear::_spaceDim = 3;

const int pylith::feassemble::ElasticityImplicitData3DLinear::_cellDim = 3;

const int pylith::feassemble::ElasticityImplicitData3DLinear::_numVertices = 4;

const int pylith::feassemble::ElasticityImplicitData3DLinear::_numCells = 1;

const int pylith::feassemble::ElasticityImplicitData3DLinear::_numBasis = 4;

const int pylith::feassemble::ElasticityImplicitData3DLinear::_numQuadPts = 1;

const char* pylith::feassemble::ElasticityImplicitData3DLinear::_matType = "ElasticIsotropic3D";

const char* pylith::feassemble::ElasticityImplicitData3DLinear::_matDBFilename = "data/elasticisotropic3d.spatialdb";

const int pylith::feassemble::ElasticityImplicitData3DLinear::_matId = 0;

const char* pylith::feassemble::ElasticityImplicitData3DLinear::_matLabel = "elastic isotropic 3-D";

const double pylith::feassemble::ElasticityImplicitData3DLinear::_dt =   1.00000000e-02;

const double pylith::feassemble::ElasticityImplicitData3DLinear::_vertices[] = {
 -5.00000000e-01, -1.00000000e+00, -5.00000000e-01,
  2.00000000e+00, -5.00000000e-01, -4.00000000e-01,
  1.00000000e+00, -1.00000000e-01, -3.00000000e-01,
 -2.00000000e-01,  5.00000000e-01,  2.00000000e+00,
};

const int pylith::feassemble::ElasticityImplicitData3DLinear::_cells[] = {
0,1,2,3,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_verticesRef[] = {
 -1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00, -1.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_quadPts[] = {
  2.50000000e-01,  2.50000000e-01,  2.50000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_quadWts[] = {
  1.66666667e-01,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_basis[] = {
  2.50000000e-01,  2.50000000e-01,  2.50000000e-01,
  2.50000000e-01,};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_basisDerivRef[] = {
 -1.00000000e+00, -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_fieldTpdt[] = {
  3.00000000e-01,  2.00000000e-01, -5.00000000e-01,
 -3.00000000e-01, -4.00000000e-01, -6.00000000e-01,
  2.00000000e-01,  6.00000000e-01,  3.00000000e-01,
 -6.00000000e-01, -1.00000000e-01, -3.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_fieldT[] = {
  8.00000000e-01,  1.00000000e-01, -6.00000000e-01,
 -1.00000000e-01, -2.00000000e-01, -5.00000000e-01,
  1.00000000e-01,  7.00000000e-01,  2.00000000e-01,
 -5.00000000e-01, -0.00000000e+00, -2.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_fieldTmdt[] = {
  1.00000000e-01,  1.00000000e-01, -3.00000000e-01,
 -2.00000000e-01, -1.00000000e-01, -5.00000000e-01,
  2.00000000e-01,  4.00000000e-01,  1.00000000e-01,
 -4.00000000e-01, -1.00000000e-01, -1.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_valsResidual[] = {
 -7.70693928e+08,  3.56969021e+10,  2.39826518e+09,
  9.38355019e+09,  5.66238848e+10,  2.52838755e+10,
 -1.24875155e+10, -9.54987299e+10, -3.89812887e+10,
  3.87465923e+09,  3.17794300e+09,  1.12991481e+10,
};

const double pylith::feassemble::ElasticityImplicitData3DLinear::_valsJacobian[] = {
  7.12856258e+09,  4.35594796e+09, -2.39776952e+08,
 -1.37871747e+09,  1.62314126e+09, -2.45631970e+09,
 -6.44021066e+09, -6.42843866e+09,  4.69330855e+09,
  6.90365551e+08,  4.49349442e+08, -1.99721190e+09,
  4.35594796e+09,  2.26675960e+10, -6.07806691e+08,
 -4.12685874e+09,  3.62653346e+10, -7.02881041e+09,
 -4.28438662e+08, -6.26112144e+10,  1.27342007e+10,
  1.99349442e+08,  3.67828377e+09, -5.09758364e+09,
 -2.39776952e+08, -6.07806691e+08,  4.32032218e+09,
 -9.56319703e+08, -4.02881041e+09,  6.03531599e+09,
  2.19330855e+09,  7.23420074e+09, -1.17763321e+10,
 -9.97211896e+08, -2.59758364e+09,  1.42069393e+09,
 -1.37871747e+09, -4.12685874e+09, -9.56319703e+08,
  3.12511617e+10, -1.67181691e+10,  8.97072491e+09,
 -3.32634758e+10,  2.19307621e+10, -1.25604089e+10,
  3.39103160e+09, -1.08573420e+09,  4.54600372e+09,
  1.62314126e+09,  3.62653346e+10, -4.02881041e+09,
 -1.67181691e+10,  6.92530204e+10, -1.69753717e+10,
  1.56807621e+10, -1.13835037e+11,  3.01143123e+10,
 -5.85734201e+08,  8.31668216e+09, -9.11013011e+09,
 -2.45631970e+09, -7.02881041e+09,  6.03531599e+09,
  8.97072491e+09, -1.69753717e+10,  3.17077138e+10,
 -8.81040892e+09,  2.93643123e+10, -5.25594796e+10,
  2.29600372e+09, -5.36013011e+09,  1.48164498e+10,
 -6.44021066e+09, -4.28438662e+08,  2.19330855e+09,
 -3.32634758e+10,  1.56807621e+10, -8.81040892e+09,
  4.56229864e+10, -1.58968401e+10,  9.20074349e+09,
 -5.91929988e+09,  6.44516729e+08, -2.58364312e+09,
 -6.42843866e+09, -6.26112144e+10,  7.23420074e+09,
  2.19307621e+10, -1.13835037e+11,  2.93643123e+10,
 -1.58968401e+10,  1.90753098e+11, -5.20260223e+10,
  3.94516729e+08, -1.43068463e+10,  1.54275093e+10,
  4.69330855e+09,  1.27342007e+10, -1.17763321e+10,
 -1.25604089e+10,  3.01143123e+10, -5.25594796e+10,
  9.20074349e+09, -5.20260223e+10,  9.11232962e+10,
 -1.33364312e+09,  9.17750929e+09, -2.67874845e+10,
  6.90365551e+08,  1.99349442e+08, -9.97211896e+08,
  3.39103160e+09, -5.85734201e+08,  2.29600372e+09,
 -5.91929988e+09,  3.94516729e+08, -1.33364312e+09,
  1.83790273e+09, -8.13197026e+06,  3.48513011e+07,
  4.49349442e+08,  3.67828377e+09, -2.59758364e+09,
 -1.08573420e+09,  8.31668216e+09, -5.36013011e+09,
  6.44516729e+08, -1.43068463e+10,  9.17750929e+09,
 -8.13197026e+06,  2.31188042e+09, -1.21979554e+09,
 -1.99721190e+09, -5.09758364e+09,  1.42069393e+09,
  4.54600372e+09, -9.11013011e+09,  1.48164498e+10,
 -2.58364312e+09,  1.54275093e+10, -2.67874845e+10,
  3.48513011e+07, -1.21979554e+09,  1.05503408e+10,
};

pylith::feassemble::ElasticityImplicitData3DLinear::ElasticityImplicitData3DLinear(void)
{ // constructor
  spaceDim = _spaceDim;
  cellDim = _cellDim;
  numVertices = _numVertices;
  numCells = _numCells;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  matType = const_cast<char*>(_matType);
  matDBFilename = const_cast<char*>(_matDBFilename);
  matId = _matId;
  matLabel = const_cast<char*>(_matLabel);
  dt = _dt;
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  verticesRef = const_cast<double*>(_verticesRef);
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDerivRef = const_cast<double*>(_basisDerivRef);
  fieldTpdt = const_cast<double*>(_fieldTpdt);
  fieldT = const_cast<double*>(_fieldT);
  fieldTmdt = const_cast<double*>(_fieldTmdt);
  valsResidual = const_cast<double*>(_valsResidual);
  valsJacobian = const_cast<double*>(_valsJacobian);
} // constructor

pylith::feassemble::ElasticityImplicitData3DLinear::~ElasticityImplicitData3DLinear(void)
{}


// End of file
