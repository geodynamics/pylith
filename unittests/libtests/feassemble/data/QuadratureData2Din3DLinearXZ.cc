// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application quadratureapp.

#include "QuadratureData2Din3DLinearXZ.hh"

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_numVertices = 3;

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_spaceDim = 3;

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_numCells = 1;

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_cellDim = 2;

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_numBasis = 3;

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_numQuadPts = 1;

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_vertices[] = {
  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
};

const int pylith::feassemble::QuadratureData2Din3DLinearXZ::_cells[] = {
       0,       1,       2,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_verticesRef[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_quadPtsRef[] = {
  3.33333333e-01,  3.33333333e-01,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_quadWts[] = {
  5.00000000e-01,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_quadPts[] = {
 -3.33333333e-01,  0.00000000e+00,  3.33333333e-01,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_basis[] = {
  3.33333333e-01,  3.33333333e-01,
  3.33333333e-01,};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_basisDeriv[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_jacobian[] = {
 -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_jacobianDet[] = {
  1.00000000e+00,
};

const double pylith::feassemble::QuadratureData2Din3DLinearXZ::_jacobianInv[] = {
 -1.00000000e+00,  0.00000000e+00, -0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
};

pylith::feassemble::QuadratureData2Din3DLinearXZ::QuadratureData2Din3DLinearXZ(void)
{ // constructor
  numVertices = _numVertices;
  spaceDim = _spaceDim;
  numCells = _numCells;
  cellDim = _cellDim;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  verticesRef = const_cast<double*>(_verticesRef);
  quadPtsRef = const_cast<double*>(_quadPtsRef);
  quadWts = const_cast<double*>(_quadWts);
  quadPts = const_cast<double*>(_quadPts);
  basis = const_cast<double*>(_basis);
  basisDeriv = const_cast<double*>(_basisDeriv);
  jacobian = const_cast<double*>(_jacobian);
  jacobianDet = const_cast<double*>(_jacobianDet);
  jacobianInv = const_cast<double*>(_jacobianInv);
} // constructor

pylith::feassemble::QuadratureData2Din3DLinearXZ::~QuadratureData2Din3DLinearXZ(void)
{}


// End of file
