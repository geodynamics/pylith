// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application elasticityimplicit.

#include "ElasticityImplicitData2DQuadratic.hh"

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_spaceDim = 2;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_cellDim = 2;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numVertices = 6;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numCells = 1;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numBasis = 6;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numQuadPts = 3;

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matType = "ElasticPlaneStrain";

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matDBFilename = "data/elasticplanestrain.spatialdb";

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_matId = 0;

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matLabel = "elastic strain 2-D";

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_dt =   1.00000000e-02;

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_vertices[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  2.00000000e-01,
 -1.50000000e+00,  5.00000000e-01,
  0.00000000e+00, -6.00000000e-01,
  2.50000000e-01,  3.50000000e-01,
 -1.25000000e+00, -2.50000000e-01,
};

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_cells[] = {
0,1,2,3,4,5,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_verticesRef[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  1.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00, -1.00000000e+00,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_quadPts[] = {
  6.66666667e-01,  1.66666667e-01,
  1.66666667e-01,  6.66666667e-01,
  1.66666667e-01,  1.66666667e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_quadWts[] = {
  1.66666667e-01,  1.66666667e-01,  1.66666667e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_basis[] = {
 -1.11111111e-01,  2.22222222e-01,
 -1.11111111e-01,  4.44444444e-01,
  4.44444444e-01,  1.11111111e-01,
 -1.11111111e-01, -1.11111111e-01,
  2.22222222e-01,  1.11111111e-01,
  4.44444444e-01,  4.44444444e-01,
  2.22222222e-01, -1.11111111e-01,
 -1.11111111e-01,  4.44444444e-01,
  1.11111111e-01,  4.44444444e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_basisDerivRef[] = {
  3.33333333e-01,  3.33333333e-01,
  1.66666667e+00,  0.00000000e+00,
  0.00000000e+00, -3.33333333e-01,
 -2.00000000e+00, -2.66666667e+00,
  6.66666667e-01,  2.66666667e+00,
 -6.66666667e-01,  0.00000000e+00,
  3.33333333e-01,  3.33333333e-01,
 -3.33333333e-01,  0.00000000e+00,
  0.00000000e+00,  1.66666667e+00,
  0.00000000e+00, -6.66666667e-01,
  2.66666667e+00,  6.66666667e-01,
 -2.66666667e+00, -2.00000000e+00,
 -1.66666667e+00, -1.66666667e+00,
 -3.33333333e-01,  0.00000000e+00,
  0.00000000e+00, -3.33333333e-01,
  2.00000000e+00, -6.66666667e-01,
  6.66666667e-01,  6.66666667e-01,
 -6.66666667e-01,  2.00000000e+00,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldTpdt[] = {
 -4.00000000e-01, -6.00000000e-01,
  7.00000000e-01,  8.00000000e-01,
  0.00000000e+00,  2.00000000e-01,
 -5.00000000e-01, -4.00000000e-01,
  3.00000000e-01,  9.00000000e-01,
 -3.00000000e-01, -9.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldT[] = {
 -3.00000000e-01, -4.00000000e-01,
  5.00000000e-01,  6.00000000e-01,
  0.00000000e+00,  1.00000000e-01,
 -2.00000000e-01, -3.00000000e-01,
  2.00000000e-01,  3.00000000e-01,
 -1.00000000e-01, -2.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldTmdt[] = {
 -2.00000000e-01, -3.00000000e-01,
  3.00000000e-01,  4.00000000e-01,
  0.00000000e+00,  1.00000000e-01,
 -3.00000000e-01, -2.00000000e-01,
  1.00000000e-01,  4.00000000e-01,
 -2.00000000e-01, -6.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_valsResidual[] = {
 -4.04084094e+09, -4.29933897e+10,
 -4.13127930e+10,  2.79255564e+10,
  8.98193790e+08, -1.29686671e+11,
  2.07693369e+10,  1.58734365e+11,
 -2.29487522e+10, -2.12565853e+11,
  4.66348554e+10,  1.98585991e+11,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_valsJacobian[] = {
  1.92724753e+10,  1.13862332e+10,
  4.42819754e+09,  2.19495425e+09,
  2.80230421e+09,  3.73249461e+08,
 -1.92262756e+10, -8.64560662e+09,
 -4.36542846e+09, -2.08992316e+09,
 -2.91127292e+09, -3.21890717e+09,
  1.13862332e+10,  7.19847471e+10,
  4.69495425e+09, -1.54251684e+09,
 -2.12675054e+09,  2.75320212e+10,
 -1.86456066e+10, -8.12569923e+08,
 -2.08992316e+09, -6.25120411e+09,
  6.78109283e+09, -9.09104775e+10,
  4.42819754e+09,  4.69495425e+09,
  5.38342257e+10, -1.02511036e+10,
  1.09718676e+10, -6.50919571e+09,
 -1.30974352e+09, -2.10712128e+10,
 -5.55692740e+10,  2.85686411e+10,
 -1.23552734e+10,  4.56791677e+09,
  2.19495425e+09, -1.54251684e+09,
 -1.02511036e+10,  1.72387553e+10,
 -4.00919571e+09,  5.80929253e+09,
 -1.10712128e+10,  2.74018801e+10,
  1.85686411e+10, -4.36343981e+10,
  4.56791677e+09, -5.27301294e+09,
  2.80230421e+09, -2.12675054e+09,
  1.09718676e+10, -4.00919571e+09,
  2.66480946e+10, -1.60701978e+10,
 -2.19813953e+09, -5.62260428e+07,
 -2.26517201e+10,  1.04034074e+10,
 -1.55724068e+10,  1.18589627e+10,
  3.73249461e+08,  2.75320212e+10,
 -6.50919571e+09,  5.80929253e+09,
 -1.60701978e+10,  8.90068119e+10,
 -5.62260428e+07, -1.36007171e+10,
  2.04034074e+10,  1.08657906e+10,
  1.85896275e+09, -1.19613199e+11,
 -1.92262756e+10, -1.86456066e+10,
 -1.30974352e+09, -1.10712128e+10,
 -2.19813953e+09, -5.62260428e+07,
  7.51332944e+10, -1.31964480e+10,
 -9.80844073e+09,  1.73687559e+10,
 -4.25906950e+10,  2.56007375e+10,
 -8.64560662e+09, -8.12569923e+08,
 -2.10712128e+10,  2.74018801e+10,
 -5.62260428e+07, -1.36007171e+10,
 -1.31964480e+10,  1.19528505e+11,
  1.73687559e+10, -1.34841265e+11,
  2.56007375e+10,  2.32416756e+09,
 -4.36542846e+09, -2.08992316e+09,
 -5.55692740e+10,  1.85686411e+10,
 -2.26517201e+10,  2.04034074e+10,
 -9.80844073e+09,  1.73687559e+10,
  1.00479896e+11, -2.19113697e+10,
 -8.08503301e+09, -3.23395114e+10,
 -2.08992316e+09, -6.25120411e+09,
  2.85686411e+10, -4.36343981e+10,
  1.04034074e+10,  1.08657906e+10,
  1.73687559e+10, -1.34841265e+11,
 -2.19113697e+10,  1.82672151e+11,
 -3.23395114e+10, -8.81107383e+09,
 -2.91127292e+09,  6.78109283e+09,
 -1.23552734e+10,  4.56791677e+09,
 -1.55724068e+10,  1.85896275e+09,
 -4.25906950e+10,  2.56007375e+10,
 -8.08503301e+09, -3.23395114e+10,
  8.15146812e+10, -6.46919843e+09,
 -3.21890717e+09, -9.09104775e+10,
  4.56791677e+09, -5.27301294e+09,
  1.18589627e+10, -1.19613199e+11,
  2.56007375e+10,  2.32416756e+09,
 -3.23395114e+10, -8.81107383e+09,
 -6.46919843e+09,  2.22283596e+11,
};

pylith::feassemble::ElasticityImplicitData2DQuadratic::ElasticityImplicitData2DQuadratic(void)
{ // constructor
  spaceDim = _spaceDim;
  cellDim = _cellDim;
  numVertices = _numVertices;
  numCells = _numCells;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  matType = const_cast<char*>(_matType);
  matDBFilename = const_cast<char*>(_matDBFilename);
  matId = _matId;
  matLabel = const_cast<char*>(_matLabel);
  dt = _dt;
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  verticesRef = const_cast<double*>(_verticesRef);
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDerivRef = const_cast<double*>(_basisDerivRef);
  fieldTpdt = const_cast<double*>(_fieldTpdt);
  fieldT = const_cast<double*>(_fieldT);
  fieldTmdt = const_cast<double*>(_fieldTmdt);
  valsResidual = const_cast<double*>(_valsResidual);
  valsJacobian = const_cast<double*>(_valsJacobian);
} // constructor

pylith::feassemble::ElasticityImplicitData2DQuadratic::~ElasticityImplicitData2DQuadratic(void)
{}


// End of file
