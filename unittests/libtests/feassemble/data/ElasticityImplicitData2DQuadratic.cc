// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application elasticityimplicit.

#include "ElasticityImplicitData2DQuadratic.hh"

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_spaceDim = 2;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_cellDim = 2;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numVertices = 6;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numCells = 1;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numBasis = 6;

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_numQuadPts = 3;

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matType = "ElasticPlaneStrain";

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matDBFilename = "data/elasticplanestrain.spatialdb";

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_matId = 0;

const char* pylith::feassemble::ElasticityImplicitData2DQuadratic::_matLabel = "elastic strain 2-D";

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_dt =   1.00000000e-02;

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_vertices[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  2.00000000e-01,
 -1.50000000e+00,  5.00000000e-01,
 -2.50000000e-01,  3.50000000e-01,
 -1.25000000e+00, -2.50000000e-01,
  0.00000000e+00, -4.00000000e-01,
};

const int pylith::feassemble::ElasticityImplicitData2DQuadratic::_cells[] = {
0,1,2,3,4,5,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_verticesRef[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  1.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00, -1.00000000e+00,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_quadPts[] = {
  0.00000000e+00, -7.50000000e-01,
 -7.50000000e-01,  0.00000000e+00,
 -7.50000000e-01, -7.50000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_quadWts[] = {
  6.66666667e-01,  6.66666667e-01,  6.66666667e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_basis[] = {
 -9.37500000e-02,  0.00000000e+00,
 -9.37500000e-02,  2.50000000e-01,
  1.87500000e-01,  7.50000000e-01,
 -9.37500000e-02, -9.37500000e-02,
  0.00000000e+00,  2.50000000e-01,
  7.50000000e-01,  1.87500000e-01,
  3.75000000e-01, -9.37500000e-02,
 -9.37500000e-02,  6.25000000e-02,
  3.75000000e-01,  3.75000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_basisDerivRef[] = {
 -2.50000000e-01, -2.50000000e-01,
  5.00000000e-01,  0.00000000e+00,
  0.00000000e+00, -2.50000000e-01,
  2.50000000e-01,  1.00000000e+00,
 -2.50000000e-01,  5.00000000e-01,
 -2.50000000e-01, -1.00000000e+00,
 -2.50000000e-01, -2.50000000e-01,
 -2.50000000e-01,  0.00000000e+00,
  0.00000000e+00,  5.00000000e-01,
  1.00000000e+00,  2.50000000e-01,
 -1.00000000e+00, -2.50000000e-01,
  5.00000000e-01, -2.50000000e-01,
 -1.00000000e+00, -1.00000000e+00,
 -2.50000000e-01,  0.00000000e+00,
  0.00000000e+00, -2.50000000e-01,
  2.50000000e-01,  2.50000000e-01,
 -2.50000000e-01,  1.25000000e+00,
  1.25000000e+00, -2.50000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldTpdt[] = {
 -4.00000000e-01, -6.00000000e-01,
  7.00000000e-01,  8.00000000e-01,
  0.00000000e+00,  2.00000000e-01,
 -5.00000000e-01, -4.00000000e-01,
  3.00000000e-01,  9.00000000e-01,
 -3.00000000e-01, -9.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldT[] = {
 -3.00000000e-01, -4.00000000e-01,
  5.00000000e-01,  6.00000000e-01,
  0.00000000e+00,  1.00000000e-01,
 -2.00000000e-01, -3.00000000e-01,
  2.00000000e-01,  3.00000000e-01,
 -1.00000000e-01, -2.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_fieldTmdt[] = {
 -2.00000000e-01, -3.00000000e-01,
  3.00000000e-01,  4.00000000e-01,
  0.00000000e+00, -1.00000000e-01,
 -3.00000000e-01, -2.00000000e-01,
  1.00000000e-01,  4.00000000e-01,
 -2.00000000e-01, -6.00000000e-01,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_valsResidual[] = {
 -5.09484809e+10,  1.18145443e+11,
 -3.15539280e+10, -1.82132161e+10,
 -9.14592014e+09,  5.34705729e+10,
  8.27192491e+10, -7.35780599e+10,
 -1.26531033e+10, -2.09373503e+11,
  2.15821832e+10,  1.29548763e+11,
};

const double pylith::feassemble::ElasticityImplicitData2DQuadratic::_valsJacobian[] = {
  4.15638021e+10,  9.27734375e+09,
  2.73546007e+09,  4.13736979e+09,
  4.19184028e+09, -2.59114583e+09,
 -2.07819010e+10, -4.63867188e+09,
 -2.11365017e+10,  3.05501302e+10,
 -6.57269965e+09, -3.67350260e+10,
  9.27734375e+09,  1.17761719e+11,
  3.90299479e+09,  4.38476562e+09,
 -2.35677083e+09,  1.52421875e+10,
 -4.63867188e+09, -5.88808594e+10,
  2.82063802e+10, -9.35410156e+10,
 -3.43912760e+10,  1.50332031e+10,
  2.73546007e+09,  3.90299479e+09,
  1.45941840e+10,  3.09244792e+09,
  4.56163194e+09, -2.35677083e+09,
 -1.64203559e+10,  3.16731771e+09,
  7.29709201e+09,  1.54622396e+09,
 -1.27680122e+10, -9.35221354e+09,
  4.13736979e+09,  4.38476562e+09,
  3.09244792e+09,  6.34765625e+09,
 -2.59114583e+09, -1.21093750e+09,
  3.63606771e+09, -7.51953125e+08,
  1.54622396e+09,  3.17382812e+09,
 -9.82096354e+09, -1.19433594e+10,
  4.19184028e+09, -2.35677083e+09,
  4.56163194e+09, -2.59114583e+09,
  1.75069444e+10, -9.89583333e+09,
 -1.78767361e+10,  1.01302083e+10,
 -1.71371528e+10,  9.66145833e+09,
  8.75347222e+09, -4.94791667e+09,
 -2.59114583e+09,  1.52421875e+10,
 -2.35677083e+09, -1.21093750e+09,
 -9.89583333e+09,  2.80625000e+10,
  9.66145833e+09, -1.16093750e+10,
  1.01302083e+10, -4.45156250e+10,
 -4.94791667e+09,  1.40312500e+10,
 -2.07819010e+10, -4.63867188e+09,
 -1.64203559e+10,  3.63606771e+09,
 -1.78767361e+10,  9.66145833e+09,
  6.89335937e+10, -5.56640625e+09,
  3.54600694e+08, -3.44856771e+10,
 -1.42092014e+10,  3.13932292e+10,
 -4.63867188e+09, -5.88808594e+10,
  3.16731771e+09, -7.51953125e+08,
  1.01302083e+10, -1.16093750e+10,
 -5.56640625e+09,  1.10496094e+11,
 -3.35481771e+10,  3.46601562e+10,
  3.04557292e+10, -7.39140625e+10,
 -2.11365017e+10,  2.82063802e+10,
  7.29709201e+09,  1.54622396e+09,
 -1.71371528e+10,  1.01302083e+10,
  3.54600694e+08, -3.35481771e+10,
  1.40440538e+11, -4.51497396e+10,
 -1.09818576e+11,  3.88151042e+10,
  3.05501302e+10, -9.35410156e+10,
  1.54622396e+09,  3.17382812e+09,
  9.66145833e+09, -4.45156250e+10,
 -3.44856771e+10,  3.46601562e+10,
 -4.51497396e+10,  1.56933594e+11,
  3.78776042e+10, -5.67109375e+10,
 -6.57269965e+09, -3.43912760e+10,
 -1.27680122e+10, -9.82096354e+09,
  8.75347222e+09, -4.94791667e+09,
 -1.42092014e+10,  3.04557292e+10,
 -1.09818576e+11,  3.78776042e+10,
  1.34615017e+11, -1.91731771e+10,
 -3.67350260e+10,  1.50332031e+10,
 -9.35221354e+09, -1.19433594e+10,
 -4.94791667e+09,  1.40312500e+10,
  3.13932292e+10, -7.39140625e+10,
  3.88151042e+10, -5.67109375e+10,
 -1.91731771e+10,  1.13503906e+11,
};

pylith::feassemble::ElasticityImplicitData2DQuadratic::ElasticityImplicitData2DQuadratic(void)
{ // constructor
  spaceDim = _spaceDim;
  cellDim = _cellDim;
  numVertices = _numVertices;
  numCells = _numCells;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  matType = const_cast<char*>(_matType);
  matDBFilename = const_cast<char*>(_matDBFilename);
  matId = _matId;
  matLabel = const_cast<char*>(_matLabel);
  dt = _dt;
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  verticesRef = const_cast<double*>(_verticesRef);
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDerivRef = const_cast<double*>(_basisDerivRef);
  fieldTpdt = const_cast<double*>(_fieldTpdt);
  fieldT = const_cast<double*>(_fieldT);
  fieldTmdt = const_cast<double*>(_fieldTmdt);
  valsResidual = const_cast<double*>(_valsResidual);
  valsJacobian = const_cast<double*>(_valsJacobian);
} // constructor

pylith::feassemble::ElasticityImplicitData2DQuadratic::~ElasticityImplicitData2DQuadratic(void)
{}


// End of file
