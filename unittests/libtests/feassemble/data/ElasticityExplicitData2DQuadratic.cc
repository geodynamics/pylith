// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

// DO NOT EDIT THIS FILE
// This file was generated from python application elasticityexplicit.

#include "ElasticityExplicitData2DQuadratic.hh"

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_spaceDim = 2;

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_cellDim = 2;

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_numVertices = 6;

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_numCells = 1;

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_numBasis = 6;

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_numQuadPts = 3;

const char* pylith::feassemble::ElasticityExplicitData2DQuadratic::_matType = "ElasticPlaneStrain";

const char* pylith::feassemble::ElasticityExplicitData2DQuadratic::_matDBFilename = "data/elasticplanestrain.spatialdb";

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_matId = 0;

const char* pylith::feassemble::ElasticityExplicitData2DQuadratic::_matLabel = "elastic strain 2-D";

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_dt =   1.00000000e-02;

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_gravityVec[] = {
  0.00000000e+00, -1.00000000e+08,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_vertices[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00,  2.00000000e-01,
 -1.50000000e+00,  5.00000000e-01,
 -2.50000000e-01,  3.50000000e-01,
 -1.25000000e+00, -2.50000000e-01,
  0.00000000e+00, -4.00000000e-01,
};

const int pylith::feassemble::ElasticityExplicitData2DQuadratic::_cells[] = {
0,1,2,3,4,5,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_verticesRef[] = {
 -1.00000000e+00, -1.00000000e+00,
  1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  1.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00, -1.00000000e+00,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_quadPts[] = {
  0.00000000e+00, -1.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_quadWts[] = {
  6.66666667e-01,  6.66666667e-01,  6.66666667e-01,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_basis[] = {
 -0.00000000e+00,  0.00000000e+00,
 -0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,
 -0.00000000e+00, -0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  1.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.00000000e+00,
 -0.00000000e+00, -0.00000000e+00,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_basisDerivRef[] = {
 -5.00000000e-01, -5.00000000e-01,
  5.00000000e-01,  0.00000000e+00,
  0.00000000e+00, -5.00000000e-01,
  0.00000000e+00,  1.00000000e+00,
 -0.00000000e+00,  1.00000000e+00,
  0.00000000e+00, -1.00000000e+00,
 -5.00000000e-01, -5.00000000e-01,
 -5.00000000e-01,  0.00000000e+00,
  0.00000000e+00,  5.00000000e-01,
  1.00000000e+00,  0.00000000e+00,
 -1.00000000e+00,  0.00000000e+00,
  1.00000000e+00, -0.00000000e+00,
  5.00000000e-01,  5.00000000e-01,
  5.00000000e-01,  0.00000000e+00,
  0.00000000e+00,  5.00000000e-01,
  1.00000000e+00,  1.00000000e+00,
 -1.00000000e+00, -1.00000000e+00,
 -1.00000000e+00, -1.00000000e+00,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_fieldTIncr[] = {
 -4.00000000e-01, -6.00000000e-01,
  7.00000000e-01,  8.00000000e-01,
  0.00000000e+00,  2.00000000e-01,
 -5.00000000e-01, -4.00000000e-01,
  3.00000000e-01,  9.00000000e-01,
 -3.00000000e-01, -9.00000000e-01,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_fieldT[] = {
 -3.00000000e-01, -4.00000000e-01,
  5.00000000e-01,  6.00000000e-01,
  0.00000000e+00,  1.00000000e-01,
 -2.00000000e-01, -3.00000000e-01,
  2.00000000e-01,  3.00000000e-01,
 -1.00000000e-01, -2.00000000e-01,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_fieldTmdt[] = {
 -2.00000000e-01, -3.00000000e-01,
  3.00000000e-01,  4.00000000e-01,
  0.00000000e+00, -1.00000000e-01,
 -3.00000000e-01, -2.00000000e-01,
  1.00000000e-01,  4.00000000e-01,
 -2.00000000e-01, -6.00000000e-01,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_valsResidual[] = {
  4.52025463e+08,  4.02314236e+10,
 -2.15321181e+10, -8.73697917e+09,
  1.41134259e+09,  3.00951389e+10,
  4.36649259e+10,  3.88748889e+10,
 -4.28887778e+10, -9.45806667e+10,
  1.88971019e+10, -5.88080556e+09,
};

const double pylith::feassemble::ElasticityExplicitData2DQuadratic::_valsJacobian[] = {
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  1.50000000e+07,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.50000000e+07,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  1.50000000e+07,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.50000000e+07,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  1.50000000e+07,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  0.00000000e+00,
  0.00000000e+00,  1.50000000e+07,
};

pylith::feassemble::ElasticityExplicitData2DQuadratic::ElasticityExplicitData2DQuadratic(void)
{ // constructor
  spaceDim = _spaceDim;
  cellDim = _cellDim;
  numVertices = _numVertices;
  numCells = _numCells;
  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  matType = const_cast<char*>(_matType);
  matDBFilename = const_cast<char*>(_matDBFilename);
  matId = _matId;
  matLabel = const_cast<char*>(_matLabel);
  dt = _dt;
  gravityVec = const_cast<double*>(_gravityVec);
  vertices = const_cast<double*>(_vertices);
  cells = const_cast<int*>(_cells);
  verticesRef = const_cast<double*>(_verticesRef);
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDerivRef = const_cast<double*>(_basisDerivRef);
  fieldTIncr = const_cast<double*>(_fieldTIncr);
  fieldT = const_cast<double*>(_fieldT);
  fieldTmdt = const_cast<double*>(_fieldTmdt);
  valsResidual = const_cast<double*>(_valsResidual);
  valsJacobian = const_cast<double*>(_valsJacobian);
} // constructor

pylith::feassemble::ElasticityExplicitData2DQuadratic::~ElasticityExplicitData2DQuadratic(void)
{}


// End of file
