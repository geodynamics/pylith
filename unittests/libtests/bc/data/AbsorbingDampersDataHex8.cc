// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#include "AbsorbingDampersDataHex8.hh"

const char* pylith::bc::AbsorbingDampersDataHex8::_meshFilename = 
  "data/hex8.mesh";

const int pylith::bc::AbsorbingDampersDataHex8::_numBasis = 4;
const int pylith::bc::AbsorbingDampersDataHex8::_numQuadPts = 4;
const double pylith::bc::AbsorbingDampersDataHex8::_quadPts[] = {
  -0.57735027, -0.57735027,
   0.57735027, -0.57735027,
   0.57735027,  0.57735027,
  -0.57735027,  0.57735027,
};
const double pylith::bc::AbsorbingDampersDataHex8::_quadWts[] = {
  1.0, 1.0, 1.0, 1.0,
};
const double pylith::bc::AbsorbingDampersDataHex8::_basis[] = {
  0.62200847,  0.16666667,  0.0446582,   0.16666667,
  0.16666667,  0.62200847,  0.16666667,  0.0446582,
  0.0446582,   0.16666667,  0.62200847,  0.16666667,
  0.16666667,  0.0446582,   0.16666667,  0.62200847,
};
const double pylith::bc::AbsorbingDampersDataHex8::_basisDerivRef[] = {
  -0.39433757, -0.39433757,
   0.39433757, -0.10566243,
   0.10566243,  0.10566243,
  -0.10566243,  0.39433757,
  -0.39433757, -0.10566243,
   0.39433757, -0.39433757,
   0.10566243,  0.39433757,
  -0.10566243,  0.10566243,
  -0.10566243, -0.10566243,
   0.10566243, -0.39433757,
   0.39433757,  0.39433757,
  -0.39433757,  0.10566243,
  -0.10566243, -0.39433757,
   0.10566243, -0.10566243,
   0.39433757,  0.10566243,
  -0.39433757,  0.39433757,
};

const char* pylith::bc::AbsorbingDampersDataHex8::_spatialDBFilename = 
  "data/elasticisotropic3d.spatialdb";
const int pylith::bc::AbsorbingDampersDataHex8::_id = 2;
const char* pylith::bc::AbsorbingDampersDataHex8::_label = "bc2";

const double pylith::bc::AbsorbingDampersDataHex8::_dt =   0.25;
const double pylith::bc::AbsorbingDampersDataHex8::_fieldTmdt[] = {
  1.0,  2.4,  3.0,
  1.1,  2.2,  3.2,
  1.2,  2.0,  3.4,
  1.3,  1.8,  3.6,
  1.4,  1.6,  3.8,
  1.5,  1.4,  4.0,
  1.6,  1.2,  4.2,
  1.7,  1.0,  4.4,
  1.8,  0.8,  4.6,
  1.9,  0.6,  4.8,
  2.0,  0.4,  5.0,
  2.1,  0.2,  5.2,
};
const double pylith::bc::AbsorbingDampersDataHex8::_fieldT[] = {
  1.1,  2.3,  3.2,
  1.3,  2.1,  3.6,
  1.5,  1.9,  4.0,
  1.7,  1.7,  4.4,
  1.9,  1.5,  4.8,
  2.1,  1.3,  5.2,
  2.3,  1.1,  5.6,
  2.5,  0.9,  6.0,
  2.7,  0.7,  6.4,
  2.9,  0.5,  6.8,
  3.1,  0.3,  7.2,
  3.3,  0.1,  7.6,
};
const double pylith::bc::AbsorbingDampersDataHex8::_fieldTIncr[] = {
  1.2,  1.1,  3.4,
  1.5,  1.0,  4.0,
  1.8,  0.9,  4.6,
  2.1,  0.8,  5.2,
  2.4,  0.7,  5.8,
  2.7,  0.6,  6.4,
  3.0,  0.5,  7.0,
  3.3,  0.4,  7.6,
  3.6,  0.3,  8.2,
  3.9,  0.2,  8.8,
  4.2,  0.1,  9.4,
  4.5,  0.0, 10.0,
};

const int pylith::bc::AbsorbingDampersDataHex8::_spaceDim = 3;
const int pylith::bc::AbsorbingDampersDataHex8::_cellDim = 2;
const int pylith::bc::AbsorbingDampersDataHex8::_numVertices = 6;
const int pylith::bc::AbsorbingDampersDataHex8::_numCells = 2;
const int pylith::bc::AbsorbingDampersDataHex8::_numCorners = 4;
const int pylith::bc::AbsorbingDampersDataHex8::_cells[] = {
  4, 10,  8,  2,
  6, 12, 10,  4,
};


const double pylith::bc::AbsorbingDampersDataHex8::_dampingConsts[] = {
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
  7.5e+06,  1.25e+07,  7.5e+06,
};
const double pylith::bc::AbsorbingDampersDataHex8::_valsResidual[] = {
   -2.75000007e+06,    1.25000003e+06,   -5.50000014e+06,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
   -7.50000018e+06,    2.50000005e+06,   -1.50000004e+07,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
   -4.75000010e+06,    1.25000003e+06,   -9.50000021e+06,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
   -4.25000008e+06,    1.25000002e+06,   -8.50000015e+06,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
   -1.05000002e+07,    2.50000005e+06,   -2.10000004e+07,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
   -6.25000011e+06,    1.25000003e+06,   -1.25000002e+07,
    0.00000000e+00,    0.00000000e+00,    0.00000000e+00,
};
const double pylith::bc::AbsorbingDampersDataHex8::_valsJacobian[] = {
  3.33333333e+06, 0.0, 0.0, // 0x
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 6
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 0y
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 6
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 0z
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 6
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 1x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 1y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 1z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 2x
  0.0, 0.0, 0.0,
  6.66666667e+06, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 4
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 6
  0.0, 0.0, 0.0,
  3.33333333e+06, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 2y
  0.0, 0.0, 0.0,
  0.0, 1.11111111e+07, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 6
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 2z
  0.0, 0.0, 0.0,
  0.0, 0.0, 6.66666667e+06, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 6
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 3x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 3y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 3z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 4x
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  3.33333333e+06, 0.0, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 4y
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 4z
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 5x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 5y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 5z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 6x
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  3.33333333e+06, 0.0, 0.0, // 6
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 6y
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 6
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 6z
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 6
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 7x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 7y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 7z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 8x
  0.0, 0.0, 0.0,
  3.33333333e+06, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 4
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 6
  0.0, 0.0, 0.0,
  6.66666667e+06, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 8y
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 6
  0.0, 0.0, 0.0,
  0.0, 1.11111111e+07, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 8z
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 6
  0.0, 0.0, 0.0,
  0.0, 0.0, 6.66666667e+06, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 9x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 9y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 9z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 10x
  0.0, 0.0, 0.0,
  8.33333333e+05, 0.0, 0.0, // 2
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  1.66666667e+06, 0.0, 0.0, // 8
  0.0, 0.0, 0.0,
  3.33333333e+06, 0.0, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 10y
  0.0, 0.0, 0.0,
  0.0, 1.38888889e+06, 0.0, // 2
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 2.77777778e+06, 0.0, // 8
  0.0, 0.0, 0.0,
  0.0, 5.55555556e+06, 0.0, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 10z
  0.0, 0.0, 0.0,
  0.0, 0.0, 8.33333333e+05, // 2
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 4
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 1.66666667e+06, // 8
  0.0, 0.0, 0.0,
  0.0, 0.0, 3.33333333e+06, // 10
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 11x
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 11y
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0, // 11z
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
  0.0, 0.0, 0.0,
};

pylith::bc::AbsorbingDampersDataHex8::AbsorbingDampersDataHex8(void)
{ // constructor
  meshFilename = const_cast<char*>(_meshFilename);

  numBasis = _numBasis;
  numQuadPts = _numQuadPts;
  quadPts = const_cast<double*>(_quadPts);
  quadWts = const_cast<double*>(_quadWts);
  basis = const_cast<double*>(_basis);
  basisDerivRef = const_cast<double*>(_basisDerivRef);

  spatialDBFilename = const_cast<char*>(_spatialDBFilename);
  id = _id;
  label = const_cast<char*>(_label);

  dt = _dt;
  fieldTIncr = const_cast<double*>(_fieldTIncr);
  fieldT = const_cast<double*>(_fieldT);
  fieldTmdt = const_cast<double*>(_fieldTmdt);

  spaceDim = _spaceDim;
  cellDim = _cellDim;
  numVertices = _numVertices;
  numCells = _numCells;
  numCorners = _numCorners;
  cells = const_cast<int*>(_cells);

  dampingConsts = const_cast<double*>(_dampingConsts);
  valsResidual = const_cast<double*>(_valsResidual);
  valsJacobian = const_cast<double*>(_valsJacobian);
} // constructor

pylith::bc::AbsorbingDampersDataHex8::~AbsorbingDampersDataHex8(void)
{}


// End of file
