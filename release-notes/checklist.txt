======================================================================
RELEASE CHECKLIST
======================================================================

TESTING

  * Run valgrind on unit tests (make leakcheck)
  * Build using tarball
  * Build documentation using tarball
  * Run all examples.
    ./pylith_runner --path=examples

SOURCE CODE

  * Reserve DOI on Zenodo and update version and DOI in code.
  * Update citation information (year) in preface.md and PyLithApp.py.
  * Add changes to CHANGES.
    * List contributors https://github.com/geodynamics/pylith/graphs/contributors?from=2024-01-01&to=2024-06-05&type=c
  * Add release notes in release-notes.

DISTRIBUTIONS

  * Create PETSc and PyLith source tarballs.

    - PETSc tarball
      1. Clone/update a clean petsc repo (e.g., petsc-dist)
      2. pylith_installer packager/make_petscdist.sh PETSC_DIST_REPO knepley/pylith
      3. mv $HOME/petsc-pylith.tar.gz petsc-pylith-X.X.X.tgz

    - PyLith tarball
      1. make dist

         NOTE: This must be done on the same machine as the
               spatialdata distribution to insure SWIG constructs the
               same fingerprints for pointers.
    - Check build.

  * Generate binaries using pylith_installer packager/build.py.
    Check on various platforms.
    Check trapping of errors.
    Check macOSX minos `for i in lib*.dylib; do otool -l $i | grep -E -A4 '(LC_VERSION_MIN_MACOSX|LC_BUILD_VERSION)' | grep -B1 sdk; done`

TAG

  * Tag source code.

  git tag -a vX.X.X -m "MY MESSAGE"
  git push upstream vX.X.X

  To delete a tag:
    REMOTE: git push --delete origin vX.X.X
    LOCAL: git tag -d vX.X.X

  Updating a tag label
    git tag new old
    git tag -d old
    git push origin :refs/tags/old
    git push --tags


RELEASE

  * Create release from tag on GitHub.

  * Upload source tarballs to GitHub. 

  * Upload binaries to GitHub.
