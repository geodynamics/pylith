[pylithapp.metadata]
description = Compression of a homogeneous, isotropic slab between two rigid, friction plates loaded by a compressive vertical force, resulting in a non-monotonic pore pressure build up.
authors = [Robert Walker]
keywords = [full-scale test, 2D, poroelasticity, Mandel]
version = 1.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Quasistatic problem,
    ILU preconditioner,
    pylith.materials.Poroelasticity,
    pylith.meshio.MeshIOCubit,
    pylith.problems.TimeDependent,
    pylith.problems.SolnDispPresTracStrain,
    pylith.bc.DirichletTimeDependent,
    pylith.bc.NeumannTimeDependent,
    pylith.meshio.DataWriterHDF5,
    spatialdata.spatialdb.UniformDB,
    pylith.bc.ZeroDB
    ]

[pylithapp.launcher] # WARNING: THIS IS NOT PORTABLE
command = mpiexec -np ${nodes}

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
#timedependent = 1
#solution = 1
#petsc = 1
#meshio = 1
#isotropiclinearelasticity = 1
#dirichlettimedependent = 1
#faultcohesivekin = 1

[pylithapp.journal.debug]
#timedependent = 1
#solution = 1
#isotropiclinearelasticity = 1
#dirichlettimedependent = 1
#constraintspatialdb = 1
#faultcohesivekin = 1
#integratorinterface = 1
#kinsrcstep = 1
#outputphysics = 1
#outputsolndomain = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOCubit

[pylithapp.mesh_generator.reader]
coordsys.space_dim = 2

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
defaults.quadrature_order = 2

# Use nonlinear solver to ensure residual and Jacobian are consistent.
solver = nonlinear
solution = pylith.problems.SolnDispPresTracStrainVelPdotTdot

[pylithapp.timedependent]
start_time = 0.0*s
initial_dt = 0.0028666667*s
end_time = 0.0057333334*s

normalizer = spatialdata.units.NondimElasticQuasistatic
normalizer.length_scale = 0.25*m
normalizer.relaxation_time = 0.01*s
normalizer.shear_modulus = 1.0*m**-1*kg*s**-2

[pylithapp.problem.solution.subfields]
displacement.basis_order = 2
pressure.basis_order = 1
trace_strain.basis_order = 1
velocity.basis_order = 2
pressure_t.basis_order = 1
trace_strain_t.basis_order = 1

[pylithapp.problem]
solution_observers = [domain]

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
# Create an array of one material
materials = [poroelastic]
materials.poroelastic = pylith.materials.Poroelasticity

[pylithapp.problem.materials]
poroelastic.bulk_rheology = pylith.materials.IsotropicLinearPoroelasticity
poroelastic.use_state_variables = True

[pylithapp.problem.materials.poroelastic]
description = Poroelastic material
label_value = 1

# We will use uniform material properties, so we use the UniformDB spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Poroelastic properties
db_auxiliary_field.values = [solid_density, fluid_density, fluid_viscosity, porosity, shear_modulus, drained_bulk_modulus, biot_coefficient, fluid_bulk_modulus, solid_bulk_modulus, isotropic_permeability]
db_auxiliary_field.data   = [ 2500*kg/m**3,  1000*kg/m**3,        1.0*Pa*s,      0.1,        3.0*Pa,               4.0*Pa,              0.6,             8.0*Pa,            10.0*Pa,               1.5*m**2]

observers.observer.data_fields = [displacement,pressure,trace_strain, velocity, pressure_t, trace_strain_t]

auxiliary_subfields.body_force.basis_order = 0
auxiliary_subfields.solid_density.basis_order = 0
auxiliary_subfields.fluid_density.basis_order = 0
auxiliary_subfields.fluid_viscosity.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.porosity.basis_order = 0
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1

[pylithapp.problem.materials.poroelastic.bulk_rheology]

auxiliary_subfields.drained_bulk_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.biot_coefficient.basis_order = 0
auxiliary_subfields.biot_modulus.basis_order = 0
auxiliary_subfields.isotropic_permeability.basis_order = 0

# # ----------------------------------------------------------------------
# # initial conditions
# # ----------------------------------------------------------------------
# [pylithapp.problem]
# ic = [domain]

# ic.domain.db = spatialdata.spatialdb.SimpleGridDB
# ic.domain.db.description = Initial conditions for domain
# ic.domain.db.filename = mandel_compaction_ic.spatialdb
# ic.domain.db.query_type = linear

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [x_neg,x_pos,y_neg,y_pos]

bc.x_pos = pylith.bc.DirichletTimeDependent
bc.x_neg = pylith.bc.DirichletTimeDependent
bc.y_neg = pylith.bc.DirichletTimeDependent
bc.y_pos = pylith.bc.NeumannTimeDependent

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_pos]
constrained_dof = [0]
label = x_pos
field = pressure
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on +x boundary

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.x_neg]
constrained_dof = [0]
label = x_neg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -x boundary

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_pos]
# Neumann Case
label = y_pos
field = displacement
scale_name = pressure
use_initial = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Neumann BC +y edge
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [0.0*Pa, -1.0*Pa]

# ------------------------------------------------------------------------------
[pylithapp.problem.bc.y_neg]
constrained_dof = [1]
label = y_neg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -y boundary

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.problem.petsc_defaults]
solver = True
testing = True
monitors = False

[pylithapp.petsc]
ksp_max_it = 200
ksp_gmres_restart = 200

ksp_rtol = 1.0e-8
ksp_atol = 1.0e-12

snes_rtol = 1.0e-10
snes_atol = 1.0e-10


# End of file
