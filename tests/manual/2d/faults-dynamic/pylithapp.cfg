[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [test, 2D, bar]
features = [
    Dynamic simulation,
    Implicit-explicit formulation,
    Quadrilateral cells,
    Runge-Kutta time stepping,
    pylith.meshio.MeshIOAscii,
    pylith.problems.TimeDependent,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicLinearElasticity,
    spatialdata.spatialdb.UniformDB,
    pylith.meshio.DataWriterHDF5,
    spatialdata.units.NondimElasticDynamic
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on some journals to show progress.
[pylithapp.journal]
#device = color-console

[pylithapp.journal.info]
timedependent = 1
solution = 1
meshiocubit = 1

[pylithapp.journal.debug]
timedependent = 0

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
# Set the reader to match the type of mesh file.
reader = pylith.meshio.MeshIOAscii
reader.filename = quad_twocells.mesh
reorder_mesh = False

# Set the Cartesian coordinate system.
reader.coordsys.space_dim = 2


# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Use the nonlinear solver to verify residual and Jacobian are consistent.
solver = linear
formulation = dynamic

# Nondimensionalize problem using wave propagation parameters.
normalizer = spatialdata.units.NondimElasticDynamic
normalizer.mass_density = 2500.0*kg/m**3
normalizer.shear_wave_speed = 1.0*km/s
normalizer.wave_period = 2.0*s

defaults.quadrature_order = 1


# Set the discretization for each of the solution subfields.
#
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispVel

solution.subfields.displacement.basis_order = 1
solution.subfields.velocity.basis_order = 1

solution_observers = [domain]

start_time = -0.2*s
end_time = 4.0*s
initial_dt = 0.2*s

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
# Create an array of one material
materials = [elastic]

# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).

[pylithapp.problem.materials.elastic]
# id must match the values in the mesh material-ids.
label = Elastic material
id = 2

# We will use uniform material properties, so we use the UniformDB
# spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Elastic properties
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500*kg/m**3, 1.0*km/s, 1.732*km/s]

# Set the discretization of the material auxiliary fields (properties).
# We have uniform material properties, so we can use a basis order of 0.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
ts_type = rk
ts_rk_type = 3bs
ts_adapt_dt_max = 0.1

ksp_rtol = 1.0e-8
ksp_atol = 1.0e-8
ksp_max_it = 30
ksp_gmres_restart = 50
ksp_error_if_not_converged = true

snes_rtol = 1.0e-10
snes_atol = 1.0e-6
snes_error_if_not_converged = true

# Monitors for debugging
ts_monitor = true

# End of file
