// Finite-element mesh with two hex8 cells.
//
//
//  1 ----- 3 ----- 5
//  |       |       |
//  |       |       |
//  |       |       |
//  0 ----- 2 ----- 4
//
// The layer behind (in the z-direction) is numbered similarly, with vertex
// numbers beginning with 6.
//
// Each edge has a length of 2.0.
//
mesh = {

  // Dimension associated with topology of mesh.
  dimension = 3

  // We are using zero-based indexing (default, C style) rather than 
  // one-based (Fortran style) indexing.
  use-index-zero = true

  // Vertices in the mesh.
  vertices = {

    // Dimension of coordinate system for vertices.
    dimension = 3

    // Number of vertices in mesh.
    count = 12

    // Coordinates are listed as:
    // Vertex number (starting from zero), x-coord, y-coord, z-coord
    // Use coordinate units that are consistent with the other units used.
    coordinates = {
             0     -2.0 -1.0 -1.0
             1     -2.0  1.0 -1.0
             2      0.0 -1.0 -1.0
             3      0.0  1.0 -1.0
             4      2.0 -1.0 -1.0
             5      2.0  1.0 -1.0
             6     -2.0 -1.0  1.0
             7     -2.0  1.0  1.0
             8      0.0 -1.0  1.0
             9      0.0  1.0  1.0
            10      2.0 -1.0  1.0
            11      2.0  1.0  1.0
    }
  }

  // Finite-element cells in the mesh.
  cells = {

    // There are 2 cells.
    count = 2

    // These are trilinear hexahedral cells, so there are 8 corners per cell.
    num-corners = 8

    // List the vertices composing each cell, moving counter-clockwise 
    // around the cell.
    // List the information as:
    // Cell number (starting from zero), vertex 0, vertex 1, vertex 2, vertex 3
    simplices = {
             0       0  2  3  1  6  8  9  7
             1       2  4  5  3  8 10 11  9
    }

    // List the material ID's associated with each cell.
    // Different ID's may be used to specify a different material type, or
    // to use a different spatial database for each material ID.
    // In this example, cells 0 and 1 both are associated with material ID 0.
    material-ids = {
             0   0
             1   0
    }
  }

  // Here we list different groups (cells or vertices) that we want to 
  // associate with a particular name.

  // This group of vertices may be used to define a fault.
  // There are 4 vertices corresponding to indices 2, 8, 9 and 3.
  group = {
    name = fault
    type = vertices
    count = 4
    indices = {
      2
      3
      8
      9
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 4 vertices corresponding to indices 0, 1, 6, and 7.
  group = {
    name = x_neg
    type = vertices
    count = 4
    indices = {
      0
      1
      6
      7
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 4 vertices corresponding to indices 4, 5, 10, and 11.
  group = {
    name = x_pos
    type = vertices
    count = 4
    indices = {
      4
      5
     10
     11
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 6 vertices corresponding to indices 0, 2, 4, 6, 8, and 10.
  group = {
    name = y_neg
    type = vertices
    count = 6
    indices = {
      0
      2
      4
      6
      8
     10
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 6 vertices corresponding to indices 1, 3, 5, 7, 9, and 11.
  group = {
    name = y_pos
    type = vertices
    count = 6
    indices = {
      1
      3
      5
      7
      9
     11
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 6 vertices, corresponding to indices 6, 7, 8, 9, 10, and 11.
  group = {
    name = z_neg
    type = vertices
    count = 6
    indices = {
      6
      7
      8
      9
     10
     11
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 6 vertices, corresponding to indices 0, 1, 2, 3, 4, and 5.
  group = {
    name = z_pos
    type = vertices
    count = 6
    indices = {
      0
      1
      2
      3
      4
      5
    }
  }
}
