
# To run this problem, type
# "pylith planestrain_twocells_2d.cfg axialdisp_twocells_2d.cfg".
# The settings in pylithapp.cfg will be read by default. See the README for
# how to run other problems in this directory.
#
#
#  -> ----------------------- <-
#     |                     |
#  -> |                     | <-
#     |                     |
#  -> |                     | <-
#     |                     |
#  -> ----------------------- <-
#     ^          ^          ^
#
# Axial tension is applied by pulling on the left and right boundaries
# in the horizontal direction.
# Bottom boundary is pinned in the vertical direction.

[pylithapp]

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
# Specify the problem settings.
[pylithapp.timedependent]
# Set bc to an array with 3 boundary conditions: 'x_neg', 'x_pos', 'y_neg'.
bc = [x_neg,x_pos,y_neg]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------

# BC for the left (-x) side of the domain.
[pylithapp.timedependent.bc.x_neg]

# Fix the 0 (x) degree of freedom.
bc_dof = [0]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'x_neg'.
label = x_neg

# Change the spatial database for the Dirichlet BC initial values from
# ZeroDispDB (which has a uniform zero spatial distribution) to UniformDB.
db_initial = spatialdata.spatialdb.UniformDB

# Assign the label 'Dirichlet BC -x edge' to the database.
db_initial.label = Dirichlet BC -x edge

# Assign the displacement BC values
db_initial.values = [displacement-x]
db_initial.data = [1.00*cm]

# Boundary conditions to be applied to the positive x-side of the mesh.
[pylithapp.timedependent.bc.x_pos]

# Fix the 0 (x) degree of freedom.
bc_dof = [0]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'x_pos'.
label = x_pos

# Change the spatial database for the Dirichlet BC initial values from
# ZeroDispDB (which has a uniform spatial distribution) to UniformDB
db_initial = spatialdata.spatialdb.UniformDB

# Assign the label 'Dirichlet BC +x edge' to the database.
db_initial.label = Dirichlet BC +x edge

# Assign the displacement BC values
db_initial.values = [displacement-x]
db_initial.data = [-1.00*cm]

# Boundary conditions to be applied to the bottom boundary of the mesh.
[pylithapp.timedependent.bc.y_neg]

# We are fixing the 1 (y) degree of freedom.
bc_dof = [1]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'y_neg'.
label = y_neg

# Assign the label 'Dirichlet BC -y corners' to the database.
db_initial.label = Dirichlet BC -y edge

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK output of solution over domain.
[pylithapp.problem.formulation.output.output.writer]
filename = output/axialdisp_twocells_2d.vtk
time_format = %04.0f
time_constant = 1.0*year

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.material.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/axialdisp_twocells_2d-statevars.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year
