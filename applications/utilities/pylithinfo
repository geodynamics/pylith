#!/usr/bin/env nemesis
#
# ======================================================================
#
# Brad T. Aagaard, U.S. Geological Survey
# Charles A. Williams, GNS Science
# Matthew G. Knepley, University of Chicago
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010 University of California, Davis
#
# See COPYING for license information.
#
# ======================================================================
#

# This script dumps all PyLith parameters (defaults plus those
# specified by the user to a text file. The default name of the output
# file is 'pylith_parameters.txt'. Verbose output includes a
# description of the parameter along with where it's current value was
# set.
#
# Usage: pylithinfo.py [--verbose] [--fileout=FILE] [PyLith args]

__requires__ = "PyLith"


# ======================================================================
class ParametersApp(object):
  """
  Application for printing current PyLith parameters to a text file.
  """

  # PUBLIC METHODS /////////////////////////////////////////////////////

  def __init__(self, name="pylithinfo"):
    """
    Constructor.
    """
    self.verbose = False
    self.filename = "pylith_parameters.txt"
    self.pylith_args = ""
    self._tab = "   "
    self._printPropertyFn = self._printPropertyBasic
    self._printFacilityFn = self._printFacilityBasic
    return


  def main(self, *args, **kwds):
    """
    Main entry point for application.
    """
    from pylith.apps.PyLithApp import InfoApp
    targetapp = InfoApp(self.pylith_args)
    targetapp.run(*args, **kwds)

    if self.verbose:
      self._printPropertyFn = self._printPropertyVerbose
      self._printFacilityFn = self._printFacilityVerbose
    else:
      self._printPropertyFn = self._printPropertyBasic
      self._printFacilityFn = self._printFacilityBasic

    depth = 0
    fout = open(self.filename, "w")
    fout.write("Application: %s %s\n" % (targetapp.name, targetapp))
    self._printParams(fout, targetapp, depth+1)
    fout.close()
    return


  # PRIVATE METHODS ////////////////////////////////////////////////////

  def _printParams(self, fout, obj, depth):
    """
    Print objects parameters to fout.
    """
    propertyNames = obj.inventory.propertyNames()
    facilityNames = obj.inventory.facilityNames()

    propertiesOmit = ["help", 
                      "help-components",
                      "help-persistence",
                      "help-properties",
                      "typos",
                      ]
    facilitiesOmit = ["weaver",
                      ]

    propertyNames.sort()
    facilityNames.sort()

    for name in propertyNames:
      if name in facilityNames or name in propertiesOmit:
        continue
      trait = obj.inventory.getTrait(name)
      descriptor = obj.inventory.getTraitDescriptor(name)
      self._printPropertyFn(fout, name, trait, descriptor, depth)
    for name in facilityNames:
      if name in facilitiesOmit:
        continue
      trait = obj.inventory.getTrait(name)
      descriptor = obj.inventory.getTraitDescriptor(name)
      self._printFacilityFn(fout, name, trait, descriptor, depth)
    return


  def _printPropertyBasic(self, fout, name, trait, descriptor, depth):
    """
    Print property name, type, and value.
    """
    indent = self._tab*depth
    fout.write("%s%s (%s) = %s\n" % \
                 (indent, name, trait.type, descriptor.value))
    return


  def _printFacilityBasic(self, fout, name, trait, descriptor, depth):
    """
    Print facility name, type, and value.
    """
    indent = self._tab*depth
    fout.write("%s%s = %s (%s)\n" % \
                 (indent, name, descriptor.value.name, descriptor.value))
    self._printParams(fout, descriptor.value, depth+1)
    return


  def _printPropertyVerbose(self, fout, name, trait, descriptor, depth):
    """
    Print property, name, type, value, description, and location set.
    """
    indent = self._tab*depth
    fout.write("\n%s%s (%s) = %s\n" % \
                 (indent, name, trait.type, descriptor.value))    

    indent += self._tab
    try:
      description = trait.meta['tip']
    except KeyError:
      description = "No description available."
    fout.write("%sDescription: %s\n" % (indent, description))
    fout.write("%sSet from: %s\n" % (indent, descriptor.locator))
    return


  def _printFacilityVerbose(self, fout, name, trait, descriptor, depth):
    """
    Print facility name, type, value, description, and location set.
    """
    indent = self._tab*depth
    fout.write("\n%s%s = %s (%s)\n" % \
                 (indent, name, descriptor.value.name, descriptor.value))

    indent += self._tab
    try:
      description = trait.meta['tip']
    except KeyError:
      description = "No description available."
    fout.write("%sDescription: %s\n" % (indent, description))
    fout.write("%sSet from: %s\n" % (indent, descriptor.locator))
    fout.write("%sConfigurable as: %s\n" % \
                 (indent, ", ".join(descriptor.value.aliases)))
    
    self._printParams(fout, descriptor.value, depth+1)
    return


# ----------------------------------------------------------------------
if __name__ == "__main__":

  usage = "%prog [options] [PyLith args]"
  from optparse import OptionParser
  parser = OptionParser(usage=usage)
  parser.add_option("-v", "--verbose", dest="verbose",
                    action="store_true", default=False,
                    help="Print verbose output.")
  parser.add_option("-o", "--fileout", dest="filename",
                    type="string", metavar="FILE",
                    help="Write to FILE. [pylith_parameters.txt]",
                    default="pylith_parameters.txt")
  (options, args) = parser.parse_args()

  app = ParametersApp()
  app.verbose = options.verbose
  app.filename = options.filename
  app.pylith_args = args
  app.main()


# End of file 
