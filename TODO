======================================================================
CURRENT ISSUES
======================================================================

  0. Add unit test to for zero fault slip and slipIncr (should be zero).

  1. Add unit test for tri3 and tet4 for cells with only edges or
  single vertex on fault.

  2. Need check to make sure quadrature scheme is compatible with
  cells in mesh.

  3. Need better error trapping when using LineParser. State of
  ifstream is insufficient. Need state of istringstream buffer, but it
  is often !good() at eof(). Test of !good() and !eof()?

  4. Need to add explanation of output and output parameters to
  manual.

  5. Add dependency diagram to manual.

  6. Better default PETSc settings. (pc_type=asm?)

======================================================================
KNOWN DEFICIENCIES
======================================================================

  Can't use block Jacobi preconditioner when Dirichlet BC overlap with
  fault BC's, because we end up with a DOF associated with a Lagrange
  multiplier that is "free". Not sure if this is okay, when the fault
  is at an angle to the boundary.

    Might be able to fix this problem by examining constraints
    relative to orientation and if orientation coincides with
    preexisting constraint, then constrain Lagrange multiplier DOF.

----------------------------------------------------------------------
List of missing features (EqSim/PyLith 0.8) and new features.

    Missing features
      EqSim
        Absorbing boundaries
        Dynamic fault interface conditions
        Fault constitutive models
        Output of surface/fault information
      PyLith 0.8
        Traction boundary conditions
        Viscoelastic material models (several)
        Output of stress/strain information

    New features
      EqSim
        Multiple cell types
        1-D and 2-D simulations
        Importing of meshes from CUBIT
	Exporting to VTK files
        Availability as open-source with documentation
      PyLith 0.8
        Dislocation-based fault implementation
        Importing of meshes from CUBIT and LaGriT
        User-friendly specification of boundary conditions and parameters

======================================================================
MAIN PRIORITIES (Brad)
======================================================================

0. Create 6x6x4 meshes for examples.
  CUBIT
    Add GUI instructions in journal files.

1. Create meshes for benchmarks

  strike-slip
    tet (LaGriT)
    hex (CUBIT)
  reverse
    tet (LaGriT)
    hex (CUBIT)

2. Reimplement SolutionIO.

   Follow implementation of MeshIO. SolutionIO implements extracting
   data from Sieve and calls virtual functions to write data.

   a. Reimplement SolutionIOVTK
   b. Implement SolutionIOHDF5

3. Additional unit tests

   a. ElasticityExplicit and ElasticityImplicit
      i. multiple materials
      ii. partially constrained DOF

======================================================================
SECONDARY PRIORITIES
======================================================================

Want to take advantage of symmetry and block structure of Jacobian
matrix when possible.

Additional unit tests
  a. FaultCohesive
    i. Add checking of faultMesh [not currently used]

Add check to make sure every material supplied by user exists in the
mesh.
  
check test routines that create mesh to make sure they clear factory
(*mesh)->getFactory()->clear(); necessary?

1. Allow use of all elasticity constants (9 for 2-D, 36 for 3-D).
   a. Materials C++ code
   b. Integrator C++ code
   b. Material C++ unit tests

2. Implement absorbing boundary conditions

3. Implement MeshIOHDF5 & HDF5 (helper class)
   a. C++ objects
   b. unit tests at C++ level
   c. Python object (MeshIOHDF5)
   d. bindings
   e. unit tests at Python level

======================================================================
PLANNED RELEASES
======================================================================

----------------------------------------------------------------------
PyLith 1.1
----------------------------------------------------------------------
HDF5 output
  volume (solution field)
  ground surface (or other surfaces) (solution field)
  points (solution field)
  cells (state variables)
Absorbing boundary conditions
Traction boundary conditions
Generalized Maxwell viscoelastic model
Velocity boundary conditions
Gravity (spatial db)

----------------------------------------------------------------------
PyLith 1.2
----------------------------------------------------------------------
Fault friction interface conditions
Fault constitutive models
  Linear slip-weakening
  Rate- and state-friction
  Uniform friction
  Slip- and rate-weakening friction model

----------------------------------------------------------------------
PyLith 1.3
----------------------------------------------------------------------
Green's functions

----------------------------------------------------------------------
PyLith 1.4
----------------------------------------------------------------------
Coupling
Adaptive time stepping

----------------------------------------------------------------------
PyLith 1.5
----------------------------------------------------------------------
Nonlinear solvers
Large deformation
Power-law viscoelastic material

----------------------------------------------------------------------
PyLith 1.6
----------------------------------------------------------------------
Adaptive mesh refinement

======================================================================
THINGS WE NEED SIEVE TO DO (Matt)
======================================================================

1. Boundary mesh

2. Construct mesh with higher order cells from mesh with lower order cells.

  Many mesh generators do not know how to construct higher order
  elements, so we will need a general utility for doing this.

  Inputs:
    * PETSc Mesh
    * some sort of map (Python object) defining how to construct
      higher order reference cell from lower order reference cell.
  Output:
    * PETSc Mesh

3. Global refinement of mesh.

  Inputs:
    * PETSc Mesh (original)
    * refinement factor (limited to factor of 2- 2 or 4)
  Outputs:
    * PETSc Mesh (refined)

======================================================================
QUESTIONS FOR LEIF
======================================================================

