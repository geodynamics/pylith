======================================================================
CURRENT ISSUES
======================================================================

  1. Memory and runtime analyzing.

  2. Add check to make sure every material in mesh has a material model.

    Add check for overlapping of material ids for bulk and cohesive
    cells.

  3. Need better error trapping when using LineParser. State of
  ifstream is insufficient. Need state of istringstream buffer, but it
  is often !good() at eof(). Test of !good() and !eof()?

  4. Need to add explanation of output and output parameters to
  manual.

  5. Add dependency diagram to manual.

  6. Switch to better default PETSc settings in examples. (pc_type=asm?)

  7. Experiment with different preconditioners and tabulate results

======================================================================
KNOWN DEFICIENCIES
======================================================================

  Can't use block Jacobi preconditioner when Dirichlet BC overlap with
  fault BC's, because we end up with a DOF associated with a Lagrange
  multiplier that is "free". Not sure if this is okay, when the fault
  is at an angle to the boundary.

    Might be able to fix this problem by examining constraints
    relative to orientation and if orientation coincides with
    preexisting constraint, then constrain Lagrange multiplier DOF.

======================================================================
MAIN PRIORITIES (Brad)
======================================================================

0. Create 6x6x4 meshes for examples.
  CUBIT
    Add GUI instructions in journal files.

1. Create meshes for benchmarks

  reverse
    tet (LaGriT)
    hex (CUBIT)

2. Reimplement SolutionIO.

   Follow implementation of MeshIO. SolutionIO implements extracting
   data from Sieve and calls virtual functions to write data.

   a. Reimplement SolutionIOVTK
   b. Implement SolutionIOHDF5

3. Additional unit tests

   a. ElasticityExplicit and ElasticityImplicit
      i. multiple materials
      ii. partially constrained DOF

======================================================================
SECONDARY PRIORITIES
======================================================================

Want to take advantage of symmetry and block structure of Jacobian
matrix when possible.

Additional unit tests
  a. FaultCohesive
    i. Add checking of faultMesh [not currently used]

check test routines that create mesh to make sure they clear factory
(*mesh)->getFactory()->clear(); necessary?

1. Allow use of all elasticity constants (9 for 2-D, 36 for 3-D).
   a. Materials C++ code
   b. Integrator C++ code
   b. Material C++ unit tests

2. Implement absorbing boundary conditions

3. Implement MeshIOHDF5 & HDF5 (helper class)
   a. C++ objects
   b. unit tests at C++ level
   c. Python object (MeshIOHDF5)
   d. bindings
   e. unit tests at Python level

======================================================================
PLANNED RELEASES
======================================================================

Other (unknown release):
  higher order cells from linear cells
  initial stress field (from spatial db)

----------------------------------------------------------------------
PyLith 1.1
----------------------------------------------------------------------
HDF5 output
  volume (solution field)
  ground surface (or other surfaces) (solution field)
  points (solution field)
  cells (state variables)
Absorbing boundary conditions
Traction boundary conditions
Generalized Maxwell viscoelastic model
Velocity boundary conditions
Gravity (spatial db)

----------------------------------------------------------------------
PyLith 1.2
----------------------------------------------------------------------
Fault friction interface conditions
Fault constitutive models
  Linear slip-weakening
  Rate- and state-friction
  Uniform friction
  Slip- and rate-weakening friction model

----------------------------------------------------------------------
PyLith 1.3
----------------------------------------------------------------------
Green's functions

----------------------------------------------------------------------
PyLith 1.4
----------------------------------------------------------------------
Coupling
Adaptive time stepping

----------------------------------------------------------------------
PyLith 1.5
----------------------------------------------------------------------
Nonlinear solvers
Large deformation
Improved support for spherical geometry in user-interface
Power-law viscoelastic material

----------------------------------------------------------------------
PyLith 1.6
----------------------------------------------------------------------
Adaptive mesh refinement

======================================================================
THINGS WE NEED SIEVE TO DO (Matt)
======================================================================

1. Boundary mesh

  This works and there is a unit test.

2. Construct mesh with higher order cells from mesh with lower order cells.

  Many mesh generators do not know how to construct higher order
  elements, so we will need a general utility for doing this.

  Inputs:
    * PETSc Mesh
    * some sort of map (Python object) defining how to construct
      higher order reference cell from lower order reference cell.
  Output:
    * PETSc Mesh

  This already works. Our code is written in terms of numBasisFuncs, not
  vertices. Therefore, if we just use the P2 element from FIAT, our only
  problem is to correctly allocate the section (I think). To do this, we
  add the appropriate setFiberDimension() call. FIAT has this information,
  we just are not using it right now.

3. Global refinement of mesh.

  Inputs:
    * PETSc Mesh (original)
    * refinement factor (limited to factor of 2- 2 or 4)
  Outputs:
    * PETSc Mesh (refined)

  This already works. You just call

  double maxVolume   = 0.01;
  bool   interpolate = false;
  ALE::Obj<ALE::Mesh> newMesh = ALE::Generator::refineMesh(oldMesh, maxVolume, interpolate);

  There is another version that takes an array of maxVolumes, one fo each cell in oldMesh.

4. Check in nonlinear solver

5. Throw out cohesive midnodes from censored depth (not easy since they are mixed in with new vertices, maybe change numbering)

6. Coarsening for PyLith meshes

7. Time fixes

  a. Remove extra time in uninterpolated restrict(). May need special method for P1.

  Done b. Precompute element geometry

  c. getStateVars() is way to expensive. It looks like _getParameters() allocates an int_array. Try just using _numParamValues.

  d. Same as a) for update

  e. Put in flop counting for IR

8. Memory fixes

  a. Share memory in precomputation sections

======================================================================
QUESTIONS FOR LEIF
======================================================================

