======================================================================
CURRENT ISSUES/PRIORITIES
======================================================================

* Uniform global refinement for tets with faults

* Better preconditioning
  Better PETSc settings or Laplacian based preconditioner

* Data structure to hold label of fault Lagrange vertices and
  conventional vertices

  Move CohesiveInfo to CohesiveTopology.
  Create data structure in createFaultParallel() [call function]
  Refactor in FaultCohesive

* Drucker-Prager elastoplastic

* Friction

* Lumped solver

* Updates to manual
  + tutorial
  + governing equations
  + Large deformation formulation
  + Lumped solver

* Cleanup
  + memory model
  + full-scale testing
  + Code cleanup

    Add elasticPrestep() to Formulation
    Remove solnIncr, keep setField()

----------------------------------------------------------------------
FRICTION
----------------------------------------------------------------------

Initial tractions
  Integrate over fault surface (should be current implementation)

FaultCohesiveDyn -> FaultCohesiveTract
FaultCohesiveDynL -> FaultCohesiveDyn
Refactor FaultCohesive
  integrateResidualAssembled()
    updateSlip() [implemented for FaultCohesiveKin, not for FaultCohesiveDyn]

6. Other fault constitutive models [Surendra]
  Rate- and state-friction with aging law
  Rate- and state-friction with slip law


----------------------------------------------------------------------
LUMPED SOLVER
----------------------------------------------------------------------

FaultCohesiveDynL (C++)
  integrateJacobian (lumped)
  adjustSolnLumped()
    compute Lagrange multipliers (zero increment of slip)
    calls constrainSolnSpace()
    adjust displacements

Unit tests

  setting up cohesive info

  ElasticityExplicit
    integrateResidualLumped()
  AbsorbingDampers
    integrateResidualLumped()


  FaultCohesiveDynL
    integrateJacobian (lumped)
    adjustSolnLumped

----------------------------------------------------------------------
TODO WELL BEFORE WORKSHOP 2010
----------------------------------------------------------------------

Tutorial
  3d/hex8
    1. Dirichlet BC (static)
    2. Neumann BC (static)
    3. Earthquake rupture (static)
    4. Dirichlet BC (quasi-static)
    5. Dirichlet + Neumann (quasi-static)
    6. Multiple earthquake rupture + creep (quasi-static)
    7. Earthquake rupture + creep + Dirichlet BC (quasi-static)
    8. Add power-law rheology (quasi-static)
    9. Static friction + Dirichlet BC (static)
   10. Static friction + Dirchlet BC (quasi-static)
   11. Rate- and state-friction + Dirichlet BC (quasi-static)??

Write up description of Savage and Prescott (1978) benchmark and
distribute to Greg Lyzenga and Jay Parker

Rewrite governing equations to include fault implementation

Rewrite bulk constitutive models

----------------------------------------------------------------------
POST RELEASE 1.4
----------------------------------------------------------------------

Brad

  Memory model
    C++ Objects with fields
        DirichletBoundary (_outputFields)
        PointForce (BoundaryConditionPoints::_parameters) ACCESSOR DONE
        AbsorbingDampers (_parameters)
        Neumann (_parameters)
        Quadrature (_geometryFields) [should be NULL]
        OutputManager (_fields)
        CellFilterAvg (_fieldAvg)
        VertexFilterVecNorm (_fieldVecNorm)
 
  full-scale testing
    2d/quad4
      axialtract
      sheartract
      dislocation2
      fourcells_twofaults (1 proc, 2 procs)
    2d/tri3
      dislocation
      dislocation2
  cleanup

    Switch Components to PetscComponents.
      Add _cleanup() to components to deallocate local data structures.
      Add cleanup() to non-components to deallocate local data structures.

      Need to call parent deallocate() but not objects deallocate.
      bc C++, SWIG
      faults C++, SWIG
      feassemble C++, SWIG
      materials C++, SWIG
      meshio C++, SWIG
      problems C++, SWIG
      topology C++, SWIG

1. Savage-Presscott benchmark
    Tet mesh

2. Analytic BC for reverse-slip benchmark [Charles or Brad]
    a. Create BC for CUBIT mesh.
    b. Create BC for LaGriT mesh.
    c. Run benchmarks.
    d. Generate analytic solutions.
    e. Tabulate results.

3. Add missing unit tests

    pytests
      test_configure

    libtests/topology/TestMesh::testNondimensionalize()

    libtests/topology/Field add constraints to field in unit tests
      copy
      +=

    pytests.meshio.TestOutputSoln
    pytests.meshio.TestOutputDirichlet
    pytests.meshio.TestOutputFaultKin
    pytests.meshio.TestOutputMatElastic
    pytests.meshio.TestOutputNeumann

    libtests/materials
      Cleanup dbToStateVars for Maxwell models (use ids don't just copy)
      Cleanup testUpdateStateVars for Maxwell models

    libtests/bc/TestDirichletBoundary::testVertexField()
    libtests/bc/TestDirichletBoundary::testBoundaryMesh()

    pytests/bc/TestDirichletBoundary
    pytests/bc/TestNeumann (output)

    libtests/feassemble/ElasticityExplict
      testVerifyConfiguration()
      testCellField()
    libtests/feassemble/ElasticityImplict
      testVerifyConfiguration()
      testCellField()
    libtests/materials/Material
      propertyField()
      stateVarField()

    MeshIO::normalizer()
    Material::normalizer()
    Constraint::normalizer()
    Integrator::normalizer()
    DataWriter::normalizer()

    Mesh::coneSize()
    Mesh::numVertices()
    Mesh::numCells()
    TimeDependentPoints::parameterFields()
    Material::propertiesField()
    Material::stateVarsField()

    MeshOps::numMaterialCells()

    PetscApplication.compilePerformanceLog()
    PetscComponent.compilePerformanceLog()
    Material.ncells
    MemoryLogger.logMesh()
    MemoryLogger.logMaterial()

    libtests/faults/FaultCohesiveKin.cc
      Nontrivial dispIncr(t->t+dt) in integrateResidual

4. Tidy up

  Replace memcpy() calls with loops.

  Cleanup logging. Constraints and Integrators should log at the C++
  level using the C++ EventLogger. Add finer grain logging at C++
  level as in ElasticityImplicit.

  Update journaling.

  Eliminate use of Inventory class.

  Switch Components to PetscComponents.
    Add _cleanup() to components to deallocate local data structures.
    Add cleanup() to non-components to deallocate local data structures.

  Create createModuleObj() methods to Python objects as standard way
  of creating handle to C++ object (not necessary in abstract base
  classes).

  Add check before calling newSection() when want to enforce at
  least 1 value.

  Cleanup SlipTimeFn tests (refactor test/initialize stuff)


----------------------------------------------------------------------
RELEASE 1.5
----------------------------------------------------------------------

1. Nondimensionalization

  Ask constraints if a block matrix is okay. If okay and matrix type
  is "unknown" (not set by user), then set block size. Do this in Python.

2. 2-D Plane strain Maxwell viscoelastic rheology [Charles]

3. 2-D Plane strain Generalized Maxwell viscoelastic rheology [Charles]

4. 2-D Power-law rheology [Charles]
   2D viscoelastic models for plane strain

5. Initial stress, strain, state variables for inelastic models [Charles]

  Use switch to do elastic prestep so that main time loop is all
  anelastic in the most general case. Want to generate an error if
  both initial state variables are given and using an elastic prestep.

6. Manual

    * Cleanup notation and discussion of inelastic materials

7. Body forces? [Charles is going to discuss this with Brad Hager to
see if this will satisfy their needs]

Modularize output? [Matt]

Fault friction

Uniform refinement (debug, check, all cell types)


======================================================================
KNOWN DEFICIENCIES
======================================================================

* Dirichlet BC and fault BC

  Can't use block Jacobi preconditioner when Dirichlet BC overlap with
  fault BC's, because we end up with a DOF associated with a Lagrange
  multiplier that is "free". Not sure if this is okay, when the fault
  is at an angle to the boundary.

    Might be able to fix this problem by examining constraints
    relative to orientation and if orientation coincides with
    preexisting constraint, then constrain Lagrange multiplier DOF.

  Need better error trapping when using LineParser. State of
  ifstream is insufficient. Need state of istringstream buffer, but it
  is often !good() at eof(). Test of !good() and !eof()?

* ZeroDispDB

  The default BC is ZeroDispDB which hardwires the values in a UniformDB
  to 0. No error message is generated if the user sets the values or
  data properties and they are overwritten by the hardwired values. A
  possible solution is for ZeroDispDB to use a C++ UniformDB but not
  inherit from the Python UniformDB.

* Fault orientatin in 1-D mesh

  How do we determine the orientation for a fault in a 1-D mesh? We
  assume normaldir is +1.0, but cohesive cells could be created so
  that the fault has a normaldir of -1.0. If the normaldir is -1.0,
  then we need to flip the orientation field to get the correct
  sense of slip.



======================================================================
MISC PRIORITIES (Brad)
======================================================================

2. Additional unit tests
  a. FaultCohesive
    i. Add checking of faultMesh [not currently used]

3. Allow use of all elasticity constants (9 for 2-D, 36 for 3-D).
   a. Materials C++ code
   b. Integrator C++ code
   b. Material C++ unit tests

4. OutputManager
   a. VertexFilterChangeCS
      OutputFilter for writing vertex coordinates in another 
      coordinate system. Need test for whether two coordinate systems 
      are the same.

======================================================================
PLANNED RELEASES
======================================================================

----------------------------------------------------------------------
Release 1.5
----------------------------------------------------------------------

  1. Fault constitutive models

     Linear slip-weakening
     Rate- and state-friction
     Uniform friction
     Slip- and rate-weakening friction model

       Spontaneous (dynamic) fault rupture output
         Slip and change in tractions (time histories)
         Fault constitutive values (time histories)
         Orientation , Fault constitutive parameters (diagnostic)

  2. Large deformations

  3. Finite strain

  5. Uniform global refinement

  6. Improved support for spherical geometry in user-interface

----------------------------------------------------------------------
Release 1.6
----------------------------------------------------------------------

  1. Green's functions

  2. Higher order cells

     Nonisoparametric cells

       C++ unit tests for CellGeometry refPtsToGlobal() and jacobian()
       Update quadrature to use CellGeometry refPtsToGlobal() and
       jacobian() Remove CellGeometry jacobian(double_array)

----------------------------------------------------------------------
Release 1.7
----------------------------------------------------------------------

  1. Coupling of quasi-static and dynamic simulations

  2. Restart / checkpointing

  3. Uniform global refinement.

----------------------------------------------------------------------
LONG TERM WISH LIST
----------------------------------------------------------------------

Student
      Create a spatial database for the PREM model

  4. HDF5 output

       HDF5 files

         Would prefer to include multiple materials

         Datasets contain entire time histories (makes it possible to
         slice along time or space)

       Point locations (arbitrary location such as instrument site)

         Interpolate solution to desired location
         Solution field (time history)

  5. Use shared pointers for objects where both Python and C++ hold pointers.

======================================================================
THINGS WE NEED SIEVE TO DO (Matt)
======================================================================

2. Construct mesh with higher order cells from mesh with lower order cells.

  Many mesh generators do not know how to construct higher order
  elements, so we will need a general utility for doing this.

  Inputs:
    * PETSc Mesh
    * some sort of map (Python object) defining how to construct
      higher order reference cell from lower order reference cell.
  Output:
    * PETSc Mesh

  This already works. Our code is written in terms of numBasisFuncs, not
  vertices. Therefore, if we just use the P2 element from FIAT, our only
  problem is to correctly allocate the section (I think). To do this, we
  add the appropriate setFiberDimension() call. FIAT has this information,
  we just are not using it right now.

3. Uniform refinement of mesh.

  Inputs:
    * PETSc Mesh (original)
    * refinement factor (limited to factor of 2- 2 or 4)
  Outputs:
    * PETSc Mesh (refined)

  This already works. You just call

  double maxVolume   = 0.01;
  bool   interpolate = false;
  ALE::Obj<ALE::Mesh> newMesh = ALE::Generator::refineMesh(oldMesh, maxVolume, interpolate);

  There is another version that takes an array of maxVolumes, one for each cell in oldMesh.

6. Coarsening for PyLith meshes

7. Time fixes

  Not used a. Remove extra time in uninterpolated restrict(). May need special method for P1.

  Done c. getStateVars() is way too expensive. 

  Not used d. Same as a) for update

8. Memory fixes

  Done a. Share memory in precomputation sections

11. For Schur complement directly for mass matrix and Lagrange multiplier problem
