======================================================================
CURRENT BUGS
======================================================================

* None

======================================================================
CURRENT ISSUES/PRIORITIES
======================================================================

* configure
  
  + Check compatibility of PyLith options with PETSc
    - HDF5
    - CUDA

* Module building

  + We want the _wrap.cxx files to work independent of PyLith and
    PETSc configure options (for example, with/without HDF5 and
    single/double precision).

* Prescribed fault with opening has zero tractions (step20) Appears to
  be a feature/artifact associated with how we implement slip with
  Lagrange multipliers.

======================================================================
KNOWN DEFICIENCIES
======================================================================

* Dirichlet BC and fault BC

  Can't use block Jacobi preconditioner when Dirichlet BC overlap with
  fault BC's, because we end up with a DOF associated with a Lagrange
  multiplier that is "free". Not sure if this is okay, when the fault
  is at an angle to the boundary.

    Might be able to fix this problem by examining constraints
    relative to orientation and if orientation coincides with
    preexisting constraint, then constrain Lagrange multiplier DOF.

  Need better error trapping when using LineParser. State of
  ifstream is insufficient. Need state of istringstream buffer, but it
  is often !good() at eof(). Test of !good() and !eof()?

* ZeroDispDB

  The default BC is ZeroDispDB which hardwires the values in a UniformDB
  to 0. No error message is generated if the user sets the values or
  data properties and they are overwritten by the hardwired values. A
  possible solution is for ZeroDispDB to use a C++ UniformDB but not
  inherit from the Python UniformDB.

* Fault orientatin in 1-D mesh

  How do we determine the orientation for a fault in a 1-D mesh? We
  assume normaldir is +1.0, but cohesive cells could be created so
  that the fault has a normaldir of -1.0. If the normaldir is -1.0,
  then we need to flip the orientation field to get the correct
  sense of slip.


======================================================================
PLANNED RELEASES
======================================================================

----------------------------------------------------------------------
Release 2.0
----------------------------------------------------------------------

* Higher order

   Nonisoparametric cells

     C++ unit tests for CellGeometry refPtsToGlobal() and jacobian()
     Update quadrature to use CellGeometry refPtsToGlobal() and
     jacobian() Remove CellGeometry jacobian(double_array)

----------------------------------------------------------------------
Release 2.1
----------------------------------------------------------------------

* Coupling

  Use slip rate threshold for quasi-static -> dynamic transition.
  Use velocity threshold for dynamic -> quasi-static transition.

  1. Damping for Q
    Generalized Maxwell approach for attenuation

----------------------------------------------------------------------
Release 2.x
----------------------------------------------------------------------

  1. Restart / checkpointing
    Checkpointing
    Spin up
    Saving quasi-static information is probably more important

----------------------------------------------------------------------
Low-priority items (release unknown)
----------------------------------------------------------------------

  6. FaultCohesiveTract (dikes)

  4. Improved support for spherical geometry in user-interface

----------------------------------------------------------------------
LONG TERM WISH LIST
----------------------------------------------------------------------

Student
      Create a spatial database for the PREM model

  5. Use shared pointers for objects where both Python and C++ hold pointers.


* GPU utilization

  Finite-element integrations

  Modeled on snes/examples/tutorials/ex52.

  Refactor integration routine so that it uses batches rather than
  individual cells.

  + Implicit elasticity finite-element integration
  + Explicit elasticity finite-element integration

* Line search [MATT]

  Line search should be improved to include the inequality constraints.


----------------------------------------------------------------------
SECONDARY PRIORITIES
----------------------------------------------------------------------

* Fault preconditioner [BRAD]

  FaultCohesiveLagrange::calcPreconditioner() [need unit test]

* Cleanup

    Consistent use of Schur complement

      + adjustSolnLumped()
        Compute Lagrange multipliers then displacements
      + form C as sparse matrix, use PETSc operations for computation
        (will work parallel)
      + Refactor friction sensitivity solve, fault preconditioner, and
        adjustSolnLumped()

* Interpolated meshes + temperature field
  No fault, linear elasticity
  Benchmark memory use and speed

  Incompressibility, temperature/heat


* Testing
  + Need full-scale test with variation in physical properties
    within a material.

* Add output of initial fields (initial stress and initial strain).

* Combined kinematic and dynamic fault implementation

  FaultCohesiveKinDyn

    Add EqKinSrcs to FaultCohesiveDyn

    Use kinematic slip unless fault constitutive model suggests larger slip

* Lumped solver [Brad]
  + Need to finish unit tests

  AbsorbingDampers
    integrateResidualLumped()
  FaultCohesiveDyn
    adjustSolnLumped()

* Time step based on state variables

  TimeStepStrainRate object
    strainRateTarget
    strainRateTolerance
    maxDt
    updateInterval

    if (fabs(1.0 - strainRate / strainRateTarget) < tolerance) {
      assert(strainRate != 0.0);
      dtNew = dtOld * strainRateTolerance / strainRate;
      if (dtNew > maxDt)
        dtNew = maxDt;
    } // if

  ElasticMaterial
    strain rate not stored for purely elastic materials

    storeStrainRate()
      set flag to store strain rate
    maxStrainRate()
      compute total strain (if nec)
      compute strain rate, get maximum
    
----------------------------------------------------------------------
CLEANUP
----------------------------------------------------------------------

Brad

  full-scale testing
    2d/quad4
      axialtract
      sheartract
      dislocation2
      fourcells_twofaults (1 proc, 2 procs)
    2d/tri3
      dislocation
      dislocation2

  * write cells as ints in HDF5


2. Analytic BC for reverse-slip benchmark [Charles or Brad]
    a. Create BC for CUBIT mesh.
    b. Create BC for LaGriT mesh.
    c. Run benchmarks.
    d. Generate analytic solutions.
    e. Tabulate results.

3. Add missing unit tests

    pytests
      test_configure

    libtests/topology/TestMesh::testNondimensionalize()

    libtests/topology/Field add constraints to field in unit tests
      copy
      +=

    pytests.meshio.TestOutputSoln
    pytests.meshio.TestOutputDirichlet
    pytests.meshio.TestOutputFaultKin
    pytests.meshio.TestOutputMatElastic
    pytests.meshio.TestOutputNeumann

    libtests/materials
      Cleanup dbToStateVars for Maxwell models (use ids don't just copy)
      Cleanup testUpdateStateVars for Maxwell models

    libtests/bc/TestDirichletBoundary::testVertexField()
    libtests/bc/TestDirichletBoundary::testBoundaryMesh()

    pytests/bc/TestDirichletBoundary
    pytests/bc/TestNeumann (output)

    libtests/feassemble/ElasticityExplict
      testVerifyConfiguration()
      testCellField()
    libtests/feassemble/ElasticityImplict
      testVerifyConfiguration()
      testCellField()
    libtests/materials/Material
      propertyField()
      stateVarField()

    libtests/meshio/CellFilter for submesh

    MeshIO::normalizer()
    Material::normalizer()
    Constraint::normalizer()
    Integrator::normalizer()
    DataWriter::normalizer()

    Mesh::coneSize()
    Mesh::numVertices()
    Mesh::numCells()
    TimeDependentPoints::parameterFields()
    Material::propertiesField()
    Material::stateVarsField()

    MeshOps::numMaterialCells()

    PetscApplication.compilePerformanceLog()
    PetscComponent.compilePerformanceLog()
    Material.ncells
    MemoryLogger.logMesh()
    MemoryLogger.logMaterial()

    libtests/faults/FaultCohesiveKin.cc
      Nontrivial dispIncr(t->t+dt) in integrateResidual

4. Tidy up

  Update journaling.

  Eliminate use of Inventory class.

  Create createModuleObj() methods to Python objects as standard way
  of creating handle to C++ object (not necessary in abstract base
  classes).

  Add check before calling newSection() when want to enforce at
  least 1 value.

======================================================================
MISC PRIORITIES
======================================================================

1. OutputManager
   a. VertexFilterChangeCS
      OutputFilter for writing vertex coordinates in another 
      coordinate system. Need test for whether two coordinate systems 
      are the same.

2. Coarsening for PyLith meshes

3. For Schur complement directly for mass matrix and Lagrange multiplier problem
