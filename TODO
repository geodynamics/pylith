MAIN PRIORITIES

1. Implement unit tests for MeshIO at Python level.
   a. write()/read()
   b. checkVals()

  STATUS: 

    Postponed. Easiest implementation requires semi-messy build
    on top of libtests/meshio classes and initializing/finalizing
    PETSc from Python. May be easier to include in higher-level unit
    test.

2. Finish implementing IntegratorInertia.
   a. Python object
   b. bindings
   c. unit tests at Python level

  Status: Implemented a & b.

3. Implement WFInertia object (manager for integrating inertia over ALL patches)
   a. C++ object
   b. unit tests at C++ level
   c. Python object
   d. bindings
   e. unit tests at Python level

4. Construct test case for integrating inertia term for a mesh
   a. Mesh input file (ascii)
   b. Python driver

5. Specify material properties using spatial database


SECONDARY PRIORITIES

1. Implement MeshIOHDF5 & HDF5
   a. C++ objects
   b. unit tests at C++ level
   b. Python object (MeshIOHDF5)
   c. bindings
   d. unit tests at Python level

1. Implement MeshIOCubit
   a. C++ objects
   b. unit tests at C++ level
   b. Python object (MeshIOCubit)
   c. bindings
   d. unit tests at Python level
