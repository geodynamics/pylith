MAIN PRIORITIES

0. Create element families for materials.
   a. Move quadrature component from Integrator to Material?
      [Integrator will hold quadrature; user configures quadrature w/material]
     [DONE]
   b. In Formulation?, create an integrator for each "material"
     [IN PROGRESS]
   c. C++ Material (1 per element family)
      Holds physical properties
      Initialize involves getting parameters from db
   d. ExplicitElasticity gets density field from material's property manager

1. Finish implementing ExplicitElasticity
   a. C++
   a. Python object
   b. bindings
   c. unit tests at C++ level
   d. unit tests at Python level

  Status: Started on a.

2.  Finish implementing Python Formulation
    (e.g., Explicit) with initialization of solid element families.
   c. Python object
   e. unit tests at Python level

3. Implement unit tests for MeshIO at Python level.
   a. write()/read()
   b. checkVals()

  STATUS: 

    Postponed. Easiest implementation requires semi-messy build
    on top of libtests/meshio classes and initializing/finalizing
    PETSc from Python. May be easier to include in higher-level unit
    test.

SECONDARY PRIORITIES

1. Implement MeshIOHDF5 & HDF5
   a. C++ objects
   b. unit tests at C++ level
   b. Python object (MeshIOHDF5)
   c. bindings
   d. unit tests at Python level

2. Implement MeshIOCubit
   a. C++ objects
   b. unit tests at C++ level
   b. Python object (MeshIOCubit)
   c. bindings
   d. unit tests at Python level

UNRESOLVED ISSUES

1. Integration of nemesis (pylithic.py as mpi/python application)

QUESTIONS FOR MATT

1. How do we create element families?
  b. How do we create boundary conditions given group of vertices
  (list of labels of vertices) corresponding to vertices associated
  with faces? Note: this is unique if we don't allow groups to have
  multiple faces per element, which should be okay.
