======================================================================
INSTRUCTIONS FOR INSTALLING PYLITH ON LINUX x86_64 RUNNING UBUNTU 9.10
======================================================================

These installation instructions use as many Ubuntu packages as
possible. This reduces the number of packages that must be built from
source. We do not use the Ubuntu openmpi-1.3.2-3 because it appears to
contain bugs that cause PyLith to hang when running in
parallel. Instead, we build openmpi-1.4.2 from source.

We install development versions of the CIG software. Installing using
source tarballs is easy, simply replace downloading from the source
repository and running autoreconf with downloading and unpacking the
tarball.

To make things easier, I create environment variables TOOLS_DIR,
TOOLS_FORMAT, and PYTHON_VERSION. The TOOLS_FORMAT variable
makes it easier to maintain multiple copies of packages built with
different options (e.g., different compilers and different levels of
optimization). Note that the python version should match the version
of Python you will be using. If you don't know the version of python,
run "python --version".

See the Linux_ubuntu-AMD64_Aagaard.sh file for the settings used to
setup the environment variables using the bash shell. The
$TOOLS_FORMAT environment variable is used to differentiate between
packages built with different compilers and/or different optimization
settings. In this case, TOOLS_FORMAT is gcc-4.4.1_64. We use a medium
level of optimization and do not strip out error checking code. You
should setup your environment BEFORE building the packages.

Source files

  Source files are placed under $HOME/src/PACKAGE.

Build directories

  Packages supporting building in separate directories are built in
  $HOME/scratch/build/$TOOLS_FORMAT.

Install directorires

  Packages are installed in $HOME/tools/$TOOLS_FORMAT.


1. When installing Ubuntu, include the development tools (gcc,
gfortran, etc). in the installation.

2. Install additional packages.

  libcppunit
  libcppunit-dev
  proj
  proj-data
  libproj-dev
  swig-1.3.36
  python-numpy
  netcdf-bin
  libnetcdf-dev
  libnetcdf4
  mercurial
  subversion
  autoconf
  automake
  
3. Install OpenMPI
 
  Download and unpack the tarball.
    cd $src/openmpi-1.4.2
    wget http://www.open-mpi.org/software/ompi/v1.4/downloads/openmpi-1.4.2.tar.gz
    tar -zxvf openmpi-1.4.2.tar.gz

  Run configure in the build directory.
    cd $HOME/scratch/build/$TOOLS_FORMAT/openmpi-1.4.2
    ${TOOLS_DIR}/openmpi-1.4.2/src/openmpi-1.4.2/configure --config-cache --prefix=${TOOLS_DIR} CC=gcc CXX=g++ FC=gfortran F77=gfortran CFLAGS="-O2 -fPIC" CXXFLAGS="-O2 -fPIC" FFLAGS="-O2 -fPIC"

  Run "make" and "make install".
    make
    make install

  Test
    mpicc -show

    You should see the gcc compiler being used with the appropriate
    flags to include the OpenMPI headers and libraries.


4. FIAT (version 0.3.5 is the most recent version known to work)

  Depends on Python.

  Download and unpack the tarball.
    cd $HOME/src/fiat-0.3.5
    wget http://www.fenics.org/pub/software/fiat/FIAT-0.3.5.tar.gz

  Install using python.
    cd FIAT-0.3.5
    python setup.py install --prefix=$TOOLS_DIR

  Test
    python
    import FIAT


5. pythia

  Depends on Python.

  Check out pythia from the publicly accessible CIG SVN repository.
    cd $HOME/src
    svn co http://geodynamics.org/svn/cig/cs/pythia/trunk pythia

  Install using python.
    cd pythia
    python setup.py install --prefix=$TOOLS_DIR

  Test
    python
    import pyre


6. spatialdata

  Depends on pythia.

  Check out spatialdata from the publicly accessible CIG SVN repository.
    cd $HOME/src
    svn co http://geodynamics.org/svn/cig/cs/spatialdata-0.1/trunk spatialdata-dev
    cd spatialdata-dev
    autoreconf -if

  Run configure in the build dir.
    cd $HOME/scratch/build/$TOOLS_FORMAT/spatialdata-dev
    ${HOME}/src/spatialdata/configure  --config-cache  --enable-swig --enable-testing --enable-pythia  --prefix=${TOOLS_DIR}  CPPFLAGS="-I${TOOLS_DIR}/include "  LDFLAGS="-L${TOOLS_DIR}/lib " CC=icc CXX=icpc CFLAGS="-O2 -fPIC" CXXFLAGS="-O2 -fPIC"

  Run "make" and "make install".
    make
    make install

  Test
    make check


7. PETSc

  Checkout the development version of PETSc.
    cd $HOME/src
    hg clone http://petsc.cs.iit.edu/petsc/petsc-dev
    cd petsc-dev/config
    hg clone http://petsc.cs.iit.edu/petsc/BuildSystem BuildSystem

  Run configure in the *source* directory.
    cd $HOME/src/petsc-dev
    config/configure.py --PETSC_ARCH=linux_${TOOLS_FORMAT} --with-debugging=0 --with-clanguage=c++ --with-mpi-compilers=1 --with-shared=1 --with-dynamic=1 --with-64-bit-points=1 --with-large-file-io=1 --with-blas-lapack-lib="-L/usr/lib/atlas -llapack_atlas -llapack -latlas -lblas" --with-lgrind=0 --with-chaco=1 --download-chaco=1 --with-parmetis=1 --download-parmetis=1 --with-sieve=1 --with-boost=1 --download-boost=1 --with-ml=1 --download-ml=1

  Run "make" and "make test"
    make
    make test


8. nemesis

  Depends on Python, MPI, pythia.

  Check out nemesis from the publicly accessible CIG SVN repository.
    cd $HOME/src
    svn co http://geodynamics.org/svn/cig/cs/nemesis/trunk nemesis-dev
    cd nemesis-dev
    autoreconf -if

  Run configure in the build dir.
    cd $HOME/scratch/build/$TOOLS_FORMAT/nemesis-dev
    $HOME/src/nemesis-dev/configure --prefix=${TOOLS_DIR}

 Run "make" and "make install".
    make
    make install

  Test
    nemesis
    import mpi

    Running nemesis should startup Python. Nemesis is an MPI wrapper
    around Python.
  
 
9. PyLith

    Check out PyLith from the publicly accessible CIG SVN repository.
    cd $HOME/src
    svn co http://geodynamics.org/svn/cig/short/3D/PyLith/trunk pylith-dev
    cd pylith-dev
    autoreconf -if

  Run configure in the build dir.
    cd $HOME/scratch/build/$TOOLS_FORMAT/pylith-dev
    ${HOME}/src/pylith-dev/configure  --config-cache  --enable-swig --enable-testing --enable-cubit --prefix=${TOOLS_DIR}  CPPFLAGS="-I${TOOLS_DIR}/include "  LDFLAGS="-L${TOOLS_DIR}/lib "  CC=mpicc CXX=mpiCC  CFLAGS="-O2 -fPIC" CXXFLAGS="-O2 -fPIC"

 Run "make" and "make install".
    make
    make install

  Test
    make check

