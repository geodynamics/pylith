======================================================================
OVERVIEW
======================================================================

This directory contains detailed instructions for building PyLith from
source on several different platforms. You can compile all of the
software packages from source, but, in most cases, it is much easier
to make use of package managers to install low-level
dependencies. Additionally, some hardware vendors supply optimized
math libraries (BLAS/LAPACK) that will provide better performance than
generic implementations.

The degree of difficulty of the installation is closely related to how
many binary packages are available for your platform. Most Linux
distributions provide package managers that make installing a
consistent suite of packages very easy. On Darwin systems, the package
managers do a poor job of maintaining compatibility across
packages. For example, some Fink packages use Apple gcc while others
use Fink gcc (these two versions of gcc are not necessarily
compatible).

======================================================================
INSTRUCTIONS FOR VARIOUS PLATFORMS
======================================================================

In cases where there are multiple instructions for a given platform,
simply pick the procedure with which you are most comfortable.

FILE                              PLATFORM
MacBookPro_Aagaard.txt            Intel Mac
Linux_Fedora8-AMD64_Aagaard.txt   x86_64 machine running Fedora 8
Cluster_Rocks-4.3.txt             x86_64 cluster running Rocks 4.3

======================================================================
BUILDING IN A SEPARATE DIRECTORY FROM THE SOURCE TREE
======================================================================

Software packages that conform to the GNU build system and use a
configure script can be built in a different directory from the source
tree. A notable exception to this is MPICH2, which in most cases must
be built in the source tree. Building in a directory separate from the
source tree makes it easy to create builds for different compilers,
optimization levels, etc. To build in a separate directory, simply run
the configure script from the directory you wish to use as the
top-level build directory. Run "make", etc. in the build directory. In
cases where you need to generate the configure script via autoreconf,
run "autoreconf -if" in the top-level source directory.
