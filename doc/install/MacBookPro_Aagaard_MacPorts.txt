======================================================================
INSTRUCTIONS FOR INSTALLING PYLITH ON AN INTEL MAC RUNNING OSX 10.5
======================================================================

NOTE: These installation instructions use the MacPorts package manager
to install some commonly used packages. MacPorts appears to be a
better alternative to Fink because packages are updated more
frequently and there is better coherence among packages. However,
MacPorts builds all packages from source so installing packages can
take a long time.

MacPorts places everything in /opt/local. For CIG source code, I
separate the source code, build directories, and installed code. The
source code sits in $HOME/src/cig, I build the packages under
$HOME/scratch/build/cig, and install the packages to $HOME/tools/cig.

I use the bash shell and place all software package environment
variables in a .bash.tools file that is read by the .bashrc file.

To make things easier, I create environment variables TOOLS_DIR,
CIG_DIR, TOOLS_FORMAT, and PYTHON_VERSION. The TOOLS_FORMAT variable
makes it easier to maintain multiple copies of packages built with
different options (e.g., different compilers and different levels of
optimization). Note that the python version should match the version
of Python you will be using. If you don't know the version of python,
run "python --version".

  export TOOLS_DIR=/tools
  export TOOLS_FORMAT=gcc-4.0
  export PYTHON_VERSION=2.5

  export CIG_DIR=$HOME/tools/cig/${TOOLS_FORMAT}
  export CIG_INCDIR=${CIG_DIR}/include
  export CIG_LIBDIR=${CIG_DIR}/lib
  PATH=$PATH:${CIG_DIR}/bin
  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CIG_LIBDIR}
  export PYTHONPATH=${PYTHONPATH}:${CIG_LIBDIR}/python${PYTHON_VERSION}/site-packages

1. X and Xcode

  X and Xcode are on the Apple OSX install disc 1. X is under
  "additional options."

2. Install MacPorts (http://www.macports.org/)

3. Install Porticus (GUI interface to MacPorts)
   (http://porticus.alittledrop.com)

4. Install MacPorts packages

  Install the following using Porticus:

    autoconf
    automake
    libtool
    subversion
    mercurial
    cppunit
    python25
    py25-numpy
    swig

  Install netcdf via the command line so that you can change the default variants:

    /opt/local/bin/port install netcdf -dap -netcdf4

5. Install MPICH2 (http://www.mcs.anl.gov/research/projects/mpich2/)

  a. Untar the source and then run configure, build, and install.

  ./configure --with-arch=Darwin --disable-f90 --enable-css --prefix=${TOOLS_DIR}/mpich2-1.1.1/${TOOLS_FORMAT} --enable-g=none --enable-fast --disable-weak-symbols --enable-shared-libx=osx-gcc
    make
    make install

  b. Verify the shared libraries (lib*.dyllib) are created.

  c. If any of the dylib files are missing, create them by hand from the 
     static libraries. 

    Note: It is important to specify the full path for the .dylib files.

    To create libmpich.dylib:

    cd ${TOOLS_DIR}/mpich2-1.1.1/${TOOLS_FORMAT}/lib
    mkdir tmp
    cd tmp
    ar -x ../libmpich.a
    gcc -dynamiclib -single_module -undefined dynamic_lookup -o ${TOOLS_DIR}/mpich2-1.1.1/${TOOLS_FORMAT}/lib/libmpich.dylib *.o
    rm *.o
    cd ..
    rmdir tmp

  d. Set environment variables.

    export MPI_DIR=$TOOLS_DIR/mpich2-1.1.1/${TOOLS_FORMAT}
    PATH=$PATH:$MPI_DIR/bin
    export MANPATH=$MPI_DIR/man:$MANPATH
    export MPI_INCDIR=$MPI_DIR/include
    export MPI_LIBDIR=$MPI_DIR/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MPI_LIBDIR}

6. Install ParMetis (http://glaros.dtc.umn.edu/gkhome/metis/parmetis/overview)

  a. Untar the source and edit the Makefile.in.
  b. Set the CC, COPTIONS, INCDIR, LD, and LIBDIR variables.

    CC = gcc
    COPTIONS = -DNDEBUG -fPIC
    INCDIR = -I${MPI_INCDIR}
    LIBDIR = -L${MPI_LIBDIR} -lmpich -lpmpich

  c. Edit the ParMETISLib/stdheaders.h file

    Comment out the line #include <malloc.h> since this is not a
    standard header file and not present in OS X 10.5.

  d. Create shared libraries by hand.

    Note: It is important to specify the full path for the .dylib files.

    cd ${TOOLS_DIR}/parmetis-3.1/${TOOLS_FORMAT}/lib
    mkdir tmp
    cd tmp
    ar -x ../libmetis.a
    gcc -o ${TOOLS_DIR}/parmetis-3.1/${TOOLS_FORMAT}/lib/libmetis.dylib -dynamiclib -single_module -undefined dynamic_lookup  *.o
    rm *
    ar -x ../libparmetis.a
    gcc -o ${TOOLS_DIR}/parmetis-3.1/${TOOLS_FORMAT}/lib/libparmetis.dylib -dynamiclib -single_module -undefined dynamic_lookup  *.o
    rm *
    cd ..
    rmdir tmp

  e. Copy parmetis.h to the install location.

    cp parmetis.h ${TOOLS_DIR}/parmetis-3.1/${TOOLS_FORMAT}/include/

  f. Set environment variables.

    PARMETIS_DIR=$TOOLS_DIR/parmetis-3.1/${TOOLS_FORMAT}
    export PARMETIS_INCDIR=$PARMETIS_DIR/include
    export PARMETIS_LIBDIR=$PARMETIS_DIR/lib
    export PARMETIS_LIBS="-lparmetis -lmetis"
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${PARMETIS_LIBDIR}

7. Install FIAT (http://www.fenics.org/wiki/FIAT)

  a. Install FIAT.

    python setup.py install --prefix=$TOOLS_DIR/fiat-0.3.1/${TOOLS_FORMAT}

  b. Set environment variables.

    FIAT_DIR=${TOOLS_DIR}/fiat-0.3.4/${TOOLS_FORMAT}
    export PYTHONPATH=${PYTHONPATH}:${FIAT_DIR}/lib/python${PYTHON_VERSION}/site-packages

8. Install the development version of PETSc
  (http://www-unix.mcs.anl.gov/petsc/petsc-as/)

  a. Clone the source repository.

    hg clone http://petsc.cs.iit.edu/petsc/petsc-dev
    cd petsc-dev/config
    hg clone http://petsc.cs.iit.edu/petsc/BuildSystem BuildSystem
 

  b. Set PETSC_ARCH and PETSC_DIR environment variables.

    export PETSC_DIR=${TOOLS_DIR}/petsc-dev
    export PETSC_ARCH=osx_${TOOLS_FORMAT}_debug

  c. Configure PETSc, build, and test.

    ARCH_FLAGS="--PETSC_ARCH=osx_${TOOLS_FORMAT}_debug --with-debugging=1"
    LANG_FLAGS="--with-clanguage=c++"
    BUILD_FLAGS="--with-mpi-compilers=0 --with-gnu-compilers=1 --with-shared=1 --with-dynamic=1 --with-64-bit-points=1 --with-large-file-io=1 --CC=gcc --CXX=g++"
    MPI_FLAGS="--with-mpi-dir=/sw/tools/mpich2-1.1.1/gcc-4.0 --with-mpi-shared=0"
    OPTIONS="--with-lgrind=0 --download-tetgen"
    PART_FLAGS="--with-chaco=1 --download-chaco=1 --with-parmetis=1 --with-parmetis-dir=/sw/tools/parmetis-3.1/gcc-4.0"
    SIEVE_FLAGS="--with-sieve=1 --with-boost=1 --download-boost=1"
    config/configure.py ${ARCH_FLAGS} ${LANG_FLAGS} ${BUILD_FLAGS} ${MPI_FLAGS} ${OPTIONS} ${PART_FLAGS} ${SIEVE_FLAGS} ${EXTRA_FLAGS}
    make
    make test

9. Install pythia.

  a. Download the source code from the SVN repository.

    svn co http://geodynamics.org/svn/cig/cs/pythia/trunk pythia

  b. Install the software.

    python setup.py install --prefix=${CIG_DIR}

  c. Set environment variables.

    export PYTHIA_INCDIR=${CIG_INCDIR}/pythia-0.8

10. Install nemesis.

  a. Download the source code from the SVN repository.

    svn co http://geodynamics.org/svn/cig/cs/nemesis/trunk nemesis

  b. Create the configure script.

    autoreconf -if

  c. Run configure, build, and install.

    ./configure  --prefix=${CIG_DIR}  CPPFLAGS="-I${CIG_INCDIR} -I${MPI_INCDIR}"  LDFLAGS="-L${CIG_LIBDIR} -L${MPI_LIBDIR}"  LIBS="-lpmpich -lmpich"  CC=gcc CXX=g++
    make
    make install

    If you get an error about the architecture, edit libtool and
    delete "-arch ppc" or "-arch intel", which ever one is not for
    your machine.

11. Install PROJ.4 (http://trac.osgeo.org/proj/)

  a. Download the source code AND the datum shifts (proj-datumgrid-1.4.zip).

  b. Untar the source code and unzip the datum shifts in the nad directory.

  c. Run configure and build.

    ./configure --prefix=${TOOLS_DIR}/proj-4.6.1/${TOOLS_FORMAT}
    make
    make install

  d. Set environment variables.

    PROJ4_DIR=${TOOLS_DIR}/proj-4.6.1/${TOOLS_FORMAT}
    export PROJ4_LIBDIR=${PROJ4_DIR}/lib
    export PROJ4_INCDIR=${PROJ4_DIR}/include
    PATH=${PATH}:${PROJ4_DIR}/bin
    export MANPATH=${MANPATH}:${PROJ4_DIR}/man

12. Install spatialdata.

  a. Download the source code from the SVN repository.

    svn co http://geodynamics.org/svn/cig/cs/spatialdata-0.1/trunk spatialdata

  b. Create the configure script.

    autoreconf -if

  c. Run configure, build, install, and the unit tests.

    ./configure  --enable-testing --enable-pythia  --prefix=${CIG_DIR}  CPPFLAGS="-I${PROJ4_INCDIR} -I${CPPUNIT_INCDIR} -I${CIG_INCDIR}"  LDFLAGS="-L${PROJ4_LIBDIR} -L${CPPUNIT_LIBDIR} -L${CIG_LIBDIR} "  LIBS=""  CC=gcc CXX=g++
    make
    make install
    make check

13. Install PyLith.

  a. Download the source code from the SVN repository.

    svn co http://geodynamics.org/svn/cig/short/3D/PyLith/trunk pylith

  b. Create the configure script.

    autoreconf -if

  c. Run configure, build, install, and the unit tests.

    ./configure  --enable-testing --enable-tetgen --enable-cubit --prefix=${CIG_DIR}  CPPFLAGS="-I${PROJ4_INCDIR} -I${CPPUNIT_INCDIR} -I${CIG_INCDIR} -I/sw/include"  LDFLAGS="-L${PROJ4_LIBDIR} -L${CPPUNIT_LIBDIR} -L${CIG_LIBDIR} -L/sw/lib"  LIBS=""  CC=gcc CXX=g++ CFLAGS="-g -O" CXXFLAGS="-g -O"
    make
    make install
    make check

