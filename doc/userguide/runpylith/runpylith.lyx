#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options false
\language english
\inputencoding latin1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Running PyLith
\end_layout

\begin_layout Standard
There are essentially three major inputs needed to run a problem with PyLith:
\end_layout

\begin_layout Enumerate
A set of parameters describing the problem.
 These parameters describe the type of problem to be run, solver information,
 time-stepping information, boundary conditions, materials, etc.
 This information can be provided from the command-line or by using a 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 file.
\end_layout

\begin_layout Enumerate
Mesh information.
 This includes the topology of the finite-element mesh (coordinates of vertices
 and how the vertices are connected into cells), a material identifier for
 each cell, and sets of vertices associated with boundary conditions, faults,
 and output (for subsets of the mesh).
 This information can be provided using the PyLith mesh ASCII format (see
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples and Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:MeshIOAscii"

\end_inset

 for the format specification) or by importing the information from the
 LaGriT or CUBIT meshing packages (see Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples).
\end_layout

\begin_layout Enumerate
Databases specifying the material property values and boundary condition
 values to be used.
 Arbitrarily complex spatial variations in boundary and fault conditions
 and material properties may be given in the spatial database (see Chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples and Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Spatialdata:SimpleIOAscii"

\end_inset

 for the format specification).
\end_layout

\begin_layout Section
Defining the Simulation
\end_layout

\begin_layout Standard
The parameters for PyLith are specified as a hierarchy or tree of modules.
 The application assembles the hierarchy of modules from user input and
 then calls the 
\family typewriter
main
\family default
 function in the top-level module in the same manner as a C or C++ program.
 The behavior of the application is determined by the modules included in
 the hierarchy as specified by the user.
 The Pyre framework provides the interface for defining this hierarchy.
 Pyre properties correspond to simple settings in the form of strings, integers,
 and real numbers.
 Pyre facilities correspond to software modules.
 Facilities may have their own facilities (branches in the tree) and any
 number of properties.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Pyre:Architecture"

\end_inset

 for the general concept of Pyre facilities and properties.
 The top-level object is the PyLith application with three facilities: 
\family typewriter
mesher
\family default
, 
\family typewriter
problem
\family default
, and 
\family typewriter
petsc
\family default
.
 The 
\family typewriter
mesher
\family default
 specifies how to import the mesh, the 
\family typewriter
problem
\family default
 specifies the physical properties, boundary conditions, etc., and 
\family typewriter
petsc
\family default
 is used to specify PETSc settings.
 Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:components"

\end_inset

 contains a list of the components provided by PyLith and spatialdata.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:setting:parameters"

\end_inset

Setting PyLith Parameters
\end_layout

\begin_layout Standard
There are several methods for setting input parameters for the 
\family typewriter
pylith
\family default
 executable: via the command line or by using a text file in 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 format.
 Both facilities and properties have default values provided, so you only
 need to set values when you want to deviate from the default behavior.
\end_layout

\begin_layout Subsubsection
Units
\end_layout

\begin_layout Standard
All dimensional parameters require units.
 The units are specified using Python and Fortran syntax, so square meters
 is m**2.
 Whitespace is not allowed in the string, for units and dimensioned quantities
 are multiplied by the units string; for example, two meters per second
 is 2.0*m/s.
 Available units are shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:pyre:units"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:pyre:units"

\end_inset

Pyre supported units.
 Aliases are in parentheses.
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="left" valignment="top" width="0.9in">
<column alignment="left" valignment="top" width="4in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scale
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Available Units
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
meter (m), micrometer (um, micron), millimeter (mm), centimeter (cm), kilometer
 (km), inch, foot, yard, mile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
second (s), nanosecond (ns), microsecond (us), millisecond (ms), minute,
 hour, day, year
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mass
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kilogram (kg), gram (g), centigram (cg), milligram (mg), ounce, pound, ton
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pressure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pascal (Pa), kPa, MPa, GPa, bar, millibar, atmosphere (atm)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Using the Command Line
\end_layout

\begin_layout Standard
Pyre uses the following syntax to change properties from the command line.
 To change the value of a property of a component, use:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[component].[property]=[value]
\end_layout

\begin_layout Standard
Each component is attached to a facility, so the option above can also be
 written as: 
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility].[property]=[value]
\end_layout

\begin_layout Standard
Each facility has a default component attached to it.
 A different component can be attached to a facility by:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility]=[new_component] 
\end_layout

\begin_layout Standard
PyLith's command-line arguments can control Pyre and PyLith properties and
 facilities, MPI settings, and PETSc settings.
 You can get more information on the available options by typing
\end_layout

\begin_layout LyX-Code

\family typewriter
$ pylith --help
\end_layout

\begin_layout Standard
All PyLith-related properties are associated with the 
\family typewriter
pylithapp
\family default
 component.
 You can get a list of all of these top-level properties along with a descriptio
n of what they do by running PyLith with the 
\family typewriter
--help-properties
\family default
 command-line argument.
 To get information on user-configurable facilities and components, you
 can run PyLith with the 
\family typewriter
--help-components
\family default
 command-line argument.
 To find out about the properties associated with a given component, you
 can run PyLith with the 
\family typewriter
--[component].help-properties
\family default
 flag:
\end_layout

\begin_layout LyX-Code
$ pylith --problem.help-properties
\end_layout

\begin_layout Standard
Each component may also have sub-components associated with it:
\end_layout

\begin_layout LyX-Code
$ pylith -- problem.help-components
\end_layout

\begin_layout Standard
By starting at the top-level components, you can determine the components
 and properties at each level by working down to lower-level components:
\end_layout

\begin_layout LyX-Code
$ pylith --problem.bc.help-components
\end_layout

\begin_layout LyX-Code
$ pylith --problem.bc.help-properties
\end_layout

\begin_layout Standard
Using the 
\family typewriter
--help-components
\family default
 and 
\family typewriter
--help-properties
\family default
 flags for the various components and sub-components is a good way to discover
 potential problems in a simulation.
\end_layout

\begin_layout Subsubsection
Using a 
\family typewriter
.cfg
\family default
 File
\end_layout

\begin_layout Standard
Entering all those parameters via the command line involves the risk of
 typographical errors, which can lead to undesired results.
 You will generally find it easier to write a brief 
\family typewriter
.cfg
\family default
 input file that contains the parameters.
 This file has a format similar to a Windows INI file.
 The file is composed of one or more sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
[pylithapp.subcomponent1.subcomponent2]
\end_layout

\begin_layout LyX-Code
# this is a comment
\end_layout

\begin_layout LyX-Code
property1 = value1
\end_layout

\begin_layout LyX-Code
property2 = value2 ; this is another comment
\end_layout

\begin_layout Standard
We strongly recommend that you use 
\family typewriter
.cfg
\family default
 files for your work.
 The files are syntax-colored in the vim editor.
\end_layout

\begin_layout Subsubsection
Using a 
\family typewriter
.pml
\family default
 File
\end_layout

\begin_layout Standard
A 
\family typewriter
.pml
\family default
 file is an XML file that specifies parameter values in a highly structured
 format.
 It is composed of nested sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
<component name='component1'>
\end_layout

\begin_layout LyX-Code
    <component name='component2'>
\end_layout

\begin_layout LyX-Code
        <property name='property1'>value1</property>
\end_layout

\begin_layout LyX-Code
        <property name='property2'>value2</property>
\end_layout

\begin_layout LyX-Code
    </component>
\end_layout

\begin_layout LyX-Code
</component>
\end_layout

\begin_layout Standard
XML files are intended to be read and written by machines, not edited manually
 by humans.
 The 
\family typewriter
.pml
\family default
 file format is intended for applications in which PyLith input files are
 generated by another program, e.g., a GUI, web application, or a high-level
 structured editor.
 This file format will not be discussed further here, but if you are interested
 in using 
\family typewriter
.pml
\family default
 files, note that 
\family typewriter
.pml
\family default
 files and 
\family typewriter
.cfg
\family default
 files can be used interchangeably; in the following discussion, a file
 with a 
\family typewriter
.pml
\family default
 extension can be substituted anywhere a 
\family typewriter
.cfg
\family default
 file can be used.
\end_layout

\begin_layout Subsubsection
Specification and Placement of Configuration Files
\end_layout

\begin_layout Standard
Configuration files may be specified on the command line:
\end_layout

\begin_layout LyX-Code
$ pylith example.cfg
\end_layout

\begin_layout Standard
In addition, the Pyre framework searches for configuration files named 
\family typewriter
pylithapp.cfg
\family default
 in several predefined locations.
 You may put settings in any or all of these locations, depending on the
 scope you want the settings to have:
\end_layout

\begin_layout Enumerate

\family typewriter
$PREFIX/etc/pylithapp.cfg
\family default
, for system-wide settings;
\end_layout

\begin_layout Enumerate

\family typewriter
$HOME/.pyre/pylithapp/pylithapp.cfg
\family default
, for user settings and preferences;
\end_layout

\begin_layout Enumerate
the current directory (
\family typewriter
./pylithapp.cfg
\family default
), for local overrides.
 
\end_layout

\begin_layout Standard
Parameters given directly on the command line will override any input contained
 in a configuration file.
 Configuration files given on the command line override all others.
 The 
\family typewriter
pylithapp.cfg
\family default
 files placed in (3) will override those in (2), (2) overrides (1), and
 (1) overrides only the built-in defaults.
\end_layout

\begin_layout Standard
All of the example problems are set up using configuration files in the
 example directory, and specific problems are defined by including the appropria
te configuration file on the command-line.
 Referring to the directory 
\family typewriter
examples/twocells/twohex8
\family default
, the following configuration files are present:
\end_layout

\begin_layout LyX-Code
axialdisp.cfg
\end_layout

\begin_layout LyX-Code
dislocation.cfg
\end_layout

\begin_layout LyX-Code
pylithapp.cfg
\end_layout

\begin_layout LyX-Code
sheardisp.cfg
\end_layout

\begin_layout Standard
The settings in pylithapp.cfg will be read automatically, and additional
 settings are included by specifying one of the other files on the command-line:
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg
\end_layout

\begin_layout Standard
If you want to see what settings are being used, you can either examine
 the 
\family typewriter
.cfg
\family default
 files, or use the help flags as described above:
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.help-components
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.help-properties
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.bc.help-components
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.bc.help-properties
\end_layout

\begin_layout Standard
This is generally a more useful way of determining problem settings, since
 it includes default values as well as those that have been specified in
 the 
\family typewriter
.cfg
\family default
 file.
\end_layout

\begin_layout Subsubsection
List of PyLith Parameters (
\family typewriter
pylithinfo
\family default
)
\end_layout

\begin_layout Standard
The Python application 
\family typewriter
pylithinfo
\family default
 writes all of the current parameters to a text file.
 The default name of the text file is 
\family typewriter
pylith_parameters.txt
\family default
.
 The usage synopsis is
\end_layout

\begin_layout LyX-Code
$ pylithinfo [--verbose] [--fileout=pylith_parameters.txt] [PyLith args]
\end_layout

\begin_layout Standard
where 
\family typewriter
--verbose
\family default
 (or 
\family typewriter
-v
\family default
) turns on printing the descriptions of the properties and components as
 well as the location where the current value was set, and 
\family typewriter
--fileout=pylith_parameters.txt
\family default
 (or 
\family typewriter
-o pylith_parameters.txt
\family default
) sets the name of the output file.
 The lines in the text file are indented to show the hierarchy of the properties
 and components.
 
\end_layout

\begin_layout Subsection
Mesh Information (
\family typewriter
mesher
\family default
)
\end_layout

\begin_layout Standard
Geometrical and topological information for the finite element mesh may
 be provided by exporting an EXODUS format file from CUBIT, by exporting
 a GMV file and an accompanying Pset file from LaGriT, or by specifying
 the information in PyLith mesh ASCII format.
 See Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples.
\end_layout

\begin_layout Standard
PyLith supports linear cells in 1D (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:1D-linear-elements"

\end_inset

), 2D (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2D-linear-elements"

\end_inset

), and 3D (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:3D-linear-elements"

\end_inset

).
 The vertex ordering must follow the convention shown in Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:1D-linear-elements"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:3D-linear-elements"

\end_inset

.
 Quadratic cells are also supported, but at present the only method for
 using these cells in PyLith is using PyLith ASCII format.
 PyLith does not yet support automatic generation of a quadratic mesh from
 the linear meshes created by CUBIT or LaGriT.
\end_layout

\begin_layout Standard
The mesh information defines the vertex coordinates and specifies the vertices
 composing each cell in the mesh.
 The mesh information must also define at least one set of vertices for
 which displacement (Dirichlet) boundary conditions will be provided.
 In most realistic problems, there will be several vertex groups, each with
 a unique identifying label.
 For example, one group might define a surface of the mesh where displacement
 (Dirichlet) boundary conditions will be applied, another might define a
 surface where traction (Neumann) boundary conditions will be applied, while
 a third might specify a surface that defines a fault.
 Similarly, the mesh information contains cell labels that define the material
 type for each cell in the mesh.
 For a mesh with a single material type, there will only be a single label
 for every cell in the mesh.
 See Chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:material:models"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:boundary:interface:conditions"

\end_inset

 for more detailed discussions of setting the materials and boundary conditions.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figs/bar2.eps

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Linear bar cell available for 1D problems.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:1D-linear-elements"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figs/tri3.eps

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{0.5in}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/quad4.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Linear cells available for 2D problems are the triangle (left) and the quadrilat
eral (right).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:2D-linear-elements"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figs/tet4.eps

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{0.5in}
\end_layout

\end_inset


\begin_inset Graphics
	filename figs/hex8.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Linear cells available for 3D problems are the tetrahedron (left) and the
 hexahedron (right).
\begin_inset CommandInset label
LatexCommand label
name "fig:3D-linear-elements"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Mesh Importer
\end_layout

\begin_layout Standard
The default mesher component is MeshImporter, which provides the capabilities
 of reading the mesh from files.
 The MeshImporter has several properties and components:
\end_layout

\begin_layout Description
reorder_mesh Reorder the vertices and cells using the reverse Cuthill-McKee
 algorithm (default is False).
\end_layout

\begin_layout Description
reader Reader for a given type of mesh (default is MeshIOAscii).
\end_layout

\begin_layout Description
distributor Handles distribution of the mesh among processors.
\end_layout

\begin_layout Standard
Reordering the mesh so that vertices and cells connected topologically also
 reside close together in memory improves overall performance and can improve
 solver performance as well.
\end_layout

\begin_layout Quote

\color red
Note:
\color inherit
 The coordinate system associated with the mesh must be a Cartesian coordinate
 system.
 This includes generic Cartesian coordinate systems as well as geographic
 projections.
\end_layout

\begin_layout Subsubsection
MeshIOAscii
\end_layout

\begin_layout Standard
The MeshIOAscii object is intended for reading small, simple ASCII files
 containing a mesh constructed by hand.
 We use this file format extensively in the examples.
 Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:MeshIOAscii"

\end_inset

 describes the format of the files.
 The properties and components of the MeshIOAscii object include:
\end_layout

\begin_layout Description
filename Name of the mesh file.
\end_layout

\begin_layout Description
coordsys Coordinate system associated with the mesh.
\end_layout

\begin_layout Subsubsection
MeshIOCubit
\end_layout

\begin_layout Standard
The MeshIOCubit object reads the NetCDF Exodus II files output from CUBIT.
 Beginning with CUBIT 11.0, the names of the nodesets are included in the
 Exodus II files and PyLith can use these nodeset names or revert to using
 the nodeset ids.
 The properties and components associated withthe MeshIOCubit object are:
\end_layout

\begin_layout Description
filename Name of the Exodus II file.
\end_layout

\begin_layout Description
use_nodeset_names Identify nodesets by name rather than id (default is True).
\end_layout

\begin_layout Description
coordsys Coordinate system associated with the mesh.
\end_layout

\begin_layout Subsubsection
MeshIOLagrit
\end_layout

\begin_layout Standard
The MeshIOLagrit object is used to read ASCII and binary GMV and PSET files
 output from LaGriT.
 PyLith will automatically detect whether the files are ASCII or binary.
 We attempt to provide support for experimental 64-bit versions of LaGriT
 via flags indicating whether the Fortran code is using 32-bit or 64-bit
 integers.
 The MeshIOLagrit properties and components are:
\end_layout

\begin_layout Description
filename_gmv Name of GMV file.
\end_layout

\begin_layout Description
filename_pset Name of the PSET file.
\end_layout

\begin_layout Description
flip_endian Flip the endian of values when reading binary files (default
 is False).
\end_layout

\begin_layout Description
io_int32 Flag indicating that PSET files use 32-bit integers (default is
 True).
\end_layout

\begin_layout Description
record_header_32bt Flag indicating Fortran record header is 32-bit (default
 is True)
\end_layout

\begin_layout Description
coordsys Coordinate system associated with mesh.
\end_layout

\begin_layout Subsubsection
Distributor
\end_layout

\begin_layout Standard
The distributor users a partitioner to compute which cells should be placed
 on each processor, computes the overlap among the processors, and then
 distributes the mesh among the processors.
 The properties and components of the Distributor include:
\end_layout

\begin_layout Description
partitioner Choice of partitioner (
\begin_inset Quotes eld
\end_inset

parmetis
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

chaco
\begin_inset Quotes erd
\end_inset

, default is 
\begin_inset Quotes eld
\end_inset

chaco
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Description
writer_paritition Flag indicating that the partition information should
 be written to a file (default is False).
\end_layout

\begin_layout Description
data_writer Writer for partition information (default is DataWriterVTKMesh
 for VTK output).
\end_layout

\begin_layout Standard
ParMetis is not included in the PyLith binaries due to licensing issues.
\end_layout

\begin_layout Subsection
Problem Specification (
\family typewriter
problem
\family default
)
\end_layout

\begin_layout Standard
The problem component specifies the basic parameters of the simulation,
 including the physical properties, the boundary conditions, and interface
 conditions (faults).
 The current release of PyLith contains one type of problem, 
\family typewriter
TimeDependent
\family default
 for use in static, quasi-static, and dynamic simulations.
 Future releases may contain multiple types of problems, for example, computing
 Green's functions, as additional applications are developed.
 The general components are:
\end_layout

\begin_layout Description
normalizer Scales used to nondimensionalize the problem (default is NondimElasti
cQuasistatic).
\end_layout

\begin_layout Description
materials Array of materials comprising the domain (default is 
\family typewriter
[material]
\family default
).
\end_layout

\begin_layout Description
bc Array of boundary conditions (default is none).
\end_layout

\begin_layout Description
interfaces Array of interface conditions, i.e., faults (default is none).
\end_layout

\begin_layout Description
gravity_field Gravity field used to construct body forces (default is none).
\end_layout

\begin_layout Standard
The properties for each material group are:
\end_layout

\begin_layout Description
dimension Spatial dimension of the problem (default is 3)
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file for a problem is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
dimension = 3
\end_layout

\begin_layout LyX-Code
normalizer = spatialdata.units.NondimElasticQuasistatic
\end_layout

\begin_layout LyX-Code
materials = [elastic,viscoelastic]
\end_layout

\begin_layout LyX-Code
bc = [boundary_east,boundary_bottom,boundary_west]
\end_layout

\begin_layout LyX-Code
interfaces = [SanAndreas,SanJacinto]
\end_layout

\begin_layout LyX-Code
gravity_field = spatialdata.spatialdb.GravityField
\end_layout

\begin_layout Subsubsection
Nondimensionalization
\end_layout

\begin_layout Standard
PyLith nondimensionalizes all parameters provided by the user so that the
 simulation solves the equations using nondimensional quantities.
 This permits application of PyLith to problems across a vast range of spatial
 and temporal scales.
 The scales used to nondimensionalize the problem are length, pressure,
 density, and time.
 PyLith provides two normalizer objects to make it easy to provide reasonable
 scales for the nondimensionalization.
 The 
\family typewriter
NondimElasticQuasistatic
\family default
 normalizer has the following properties:
\end_layout

\begin_layout Description
length_scale Length to nondimensionalize length (default is 1.0 km).
\end_layout

\begin_layout Description
shear_modulus Shear modulus to nondimensionalize pressure (default is 3.0e+10
 Pa).
\end_layout

\begin_layout Description
relaxation_time Relaxation time to nondimensionalize time (default is 1.0
 year).
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file for a problem is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.normalizer]
\end_layout

\begin_layout LyX-Code
length_scale = 1.0*km
\end_layout

\begin_layout LyX-Code
shear_modules = 3.0e+10*Pa
\end_layout

\begin_layout LyX-Code
relaxation_time = 1.0*yr
\end_layout

\begin_layout Standard
The 
\family typewriter
NondimElasticDynamic
\family default
 normalizer has the following properties:
\end_layout

\begin_layout Description
shear_wave_speed Shear wave speed used to nondimensionalize length and pressure
 (default is 3.0 km/s).
\end_layout

\begin_layout Description
mass_density Mass density to nondimensionalize density and pressure (default
 is 3.0e+3 kg/m
\begin_inset Formula $^{3}$
\end_inset

).
\end_layout

\begin_layout Description
wave_period Period of seismic waves used to nondimensionalize time (default
 is 1.0 s).
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file for a problem is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.normalizer]
\end_layout

\begin_layout LyX-Code
shear_wave_speed = 3.0*km/s
\end_layout

\begin_layout LyX-Code
mass_density = 3.0e+3*kg/m**3
\end_layout

\begin_layout LyX-Code
wave_period = 1.0*s
\end_layout

\begin_layout Subsection
PETSc Settings (
\family typewriter
petsc
\family default
)
\end_layout

\begin_layout Standard
PyLith relies on PETSc for the linear algebra computations.
 PETSc options can be set in 
\family typewriter
.cfg
\family default
 files in sections beginning with 
\family typewriter
[pylithapp.petsc]
\family default
.
 The ones of primary interest in the case of PyLith are shown in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:petsc:options:defaults"

\end_inset

.
 In many quasi-static or dynamic elasticity simulations, runtime can be
 reduced by replacing the Jacobi preconditioner with Additive Schwartz with
 Gram-Schmidt orthogonalization (see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:petsc:options:recommended"

\end_inset

).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:petsc:options:defaults"

\end_inset

Useful command-line arguments for setting PETSc options.
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="left" valignment="top" width="1.2in">
<column alignment="center" valignment="middle" width="0.6in">
<column alignment="left" valignment="top" width="3.8in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Default Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
log_summary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print logging objects and events.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dump preconditioned residual norm to stdout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_view
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print linear solver parameters.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_rtol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1.0e-05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convergence tolerance for relative decrease in residual norm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
jacobi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set preconditioner type to block Jacobi.
 See PETSc documentation for a list of all preconditioner types.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:petsc:options:recommended"

\end_inset

PETSc options that often result in improved performance in quasi-static
 and dynamic elasticity problems.
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features>
<column alignment="left" valignment="top" width="2in">
<column alignment="center" valignment="middle" width="0.75in">
<column alignment="left" valignment="top" width="3in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
asm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Additive Schwarz method.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
sub_pc_factor_shift_
\begin_inset Newline newline
\end_inset

type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
nonzero
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Turn on nonzero shifting.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_max_it
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximum number of iterations.
 Depends on problem size.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_gmres_restart
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of iterations after which Gram-Schmidt orthogonalization is restarted.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_rtol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
1.0e-08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convergence tolerance for relative decrease in residual norm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ksp_atol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
1.0e-15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convergence tolerance for absolute value in residual norm.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ksp_converged_reason
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indicate why iterating stopped in linear solve.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
snes_converged_reason
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indicate why iterating stopped in nonlinear solve.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Time-Dependent Problem
\end_layout

\begin_layout Standard
PyLith currently only contains this one type of problem which is used for
 static, quasi-static, and dynamic simulations.
 The time-dependent problem adds the 
\family typewriter
formulation
\family default
 facility to the general-problem.
 The formulation specifies the time-stepping formulation to integrate the
 elasticity equation.
 Implicit time stepping should be used for quasi-static problems, whereas
 explicit time stepping should be used for dynamic problems which include
 inertial terms.
 Two options for explicit time-stepping are available: using a full, consistent
 Jacobian matrix and a lumped Jacobian matrix.
 In the lumped Jacobian formulation, the Jacobian is a diagonal matrix and
 stored as a vector, and PyLith employs an optimized built-in solver rather
 than a PETSc solver.
\end_layout

\begin_layout Standard
An example of setting the formulation facility to the implicit time stepping
 component is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
formulation = pylith.problems.Implicit
\end_layout

\begin_layout Standard
An example of setting the formulation facility to the explicit time stepping
 component is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
formulation = pylith.problems.Explicit
\end_layout

\begin_layout Standard
An example of setting the formulation facility to the lumped explicit time
 stepping component is:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
formulation = pylith.problems.ExplicitLumped
\end_layout

\begin_layout Subsection
Time-Stepping Formulation
\end_layout

\begin_layout Standard
The explicit and implicit time stepping formulations use a common set of
 facilities and properties.
 The facilities include
\end_layout

\begin_layout Description
time_step Time step size specification (default is uniform time step).
\end_layout

\begin_layout Description
solver Type of solver to use (default is linear).
\end_layout

\begin_layout Description
output Array of output managers for output of the solution (default is [output]).
\end_layout

\begin_layout Description
jacobian_viewer Viewer to dump the system Jacobian (sparse matrix) to a
 file for analysis (default is PETSc binary).
\end_layout

\begin_layout Standard
The formulation properties include
\end_layout

\begin_layout Description
matrix_type Type of PETSc matrix for the system Jacobian (sparse matrix,
 default is symmetric, block matrix with a block size of 1).
\end_layout

\begin_layout Description
view_jacobian Flag to indicate if system Jacobian (sparse matrix) should
 be written to a file (default is false).
\end_layout

\begin_layout Description
split_fields Split solution field into a displacement portion (fields 0..ndim-1)
 and a Lagrange multiplier portion (field ndim) to permit application of
 sophisticated PETSc preconditioners (default is false; for expert users
 only).
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file is
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.formulation]
\end_layout

\begin_layout LyX-Code
time_step = pylith.problems.TimeStepUniform
\end_layout

\begin_layout LyX-Code
solver = pylith.problems.SolverLinear ; Nonlinear solver is pylith.problems.SolverNo
nlinear
\end_layout

\begin_layout LyX-Code
output = [domain,ground_surface]
\end_layout

\begin_layout LyX-Code
matrix_type = sbaij ; Nonsymmetric sparse matrix is aij
\end_layout

\begin_layout LyX-Code
view_jacobian = false
\end_layout

\begin_layout Subsection
Time Stepping
\end_layout

\begin_layout Standard
PyLith provides three choices for controlling the time step in time-dependent
 simulations.
 These include (1) a uniform, user-specified time step (which is the default),
 (2) nonuniform, user-specified time steps, and (3) nonuniform, automatically
 calculated time steps.
 The procedure for automatically selecting time steps requires that the
 material models provide a reasonable estimate of the time step for stable
 time integration.
 In general, quasi-static simulations should use automatically calculated
 time steps and dynamic simulations should use a uniform, user-specified
 time step.
\end_layout

\begin_layout Standard

\series bold
\color red
Warning:
\series default
\color none
 
\color inherit
Changing the time step requires recomputing the Jacobian of the system,
 which can greatly increase the runtime if the time-step size changes frequently.
\end_layout

\begin_layout Subsubsection
Uniform, User-Specified Time Step
\end_layout

\begin_layout Standard
With a uniform, user-specified time step, the user selects the time step
 that is used over the entire duration of the simulation.
 This value is used whether or not it yields a stable solution, so users
 should be careful when selecting the time-step value.
 The properties for the uniform, user-specified time step are:
\end_layout

\begin_layout Description
total_time Time duration for simulation.
\end_layout

\begin_layout Description
dt Time step for simulation.
\end_layout

\begin_layout Standard
An example of setting a uniform, user-specified time step in a 
\family typewriter
.cfg
\family default
 file is:
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation]
\end_layout

\begin_layout LyX-Code
time_step = pylith.problems.TimeStepUniform ; Default value
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation.time_step]
\end_layout

\begin_layout LyX-Code
total_time = 1000.0*year
\end_layout

\begin_layout LyX-Code
dt = 0.5*year
\end_layout

\begin_layout Subsubsection
Nonuniform, User-Specified Time Step
\end_layout

\begin_layout Standard
The nonuniform, user-specified, time-step implementation allows the user
 to specify the time steps in an ASCII file (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:FileFormat:TimeStepUser"

\end_inset

 for the format specification of the time-step file).
 If the total duration exceeds the time associated with the time steps,
 then a flag determines whether to cycle through the time steps or to use
 the last specified time step for the time remaining.
 The properties for the nonuniform, user-specified time step are:
\end_layout

\begin_layout Description
total_time Time duration for simulation.
\end_layout

\begin_layout Description
filename Name of file with time-step sizes.
\end_layout

\begin_layout Description
loop_steps If true, cycle through time steps, otherwise keep using last
 time-step size for any time remaining.
\end_layout

\begin_layout Standard
An example of setting the properties for nonuniform, user-specified time
 steps in a 
\family typewriter
.cfg
\family default
 file is:
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation]
\end_layout

\begin_layout LyX-Code
time_step = pylith.problems.TimeStepUser ; Change the time step algorithm
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation.time_step]
\end_layout

\begin_layout LyX-Code
total_time = 1000.0*year
\end_layout

\begin_layout LyX-Code
filename = timesteps.txt
\end_layout

\begin_layout LyX-Code
loop_steps = false ; Default value
\end_layout

\begin_layout Subsubsection
Nonuniform, Automatic Time Step
\end_layout

\begin_layout Standard
This time-step implementation automatically calculates a stable time step
 based on the constitutive model and rate of deformation.
 As a result, this choice for choosing the time step relies on accurate
 calculation of a stable time step within each finite-element cell by the
 constitutive models.
 In order to provide some control over the time-step selection, the user
 can control the frequency that a new time step is calculated, the time
 step to use relative to the value determined by the constitutive models,
 and a maximum value for the time step.
 The properties for controlling the automatic time-step selection are:
\end_layout

\begin_layout Description
total_time Time duration for simulation.
\end_layout

\begin_layout Description
max_dt Maximum time step permitted.
\end_layout

\begin_layout Description
adapt_skip Number of time steps to skip between calculating new stable time
 step.
\end_layout

\begin_layout Description
stability_factor Safety factor for stable time step (default is 2.0).
\end_layout

\begin_layout Standard
An example of setting the properties for the automatic time step in a 
\family typewriter
.cfg
\family default
 file is:
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation]
\end_layout

\begin_layout LyX-Code
time_step = pylith.problems.TimeStepAdapt ; Change the time step algorithm
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation.time_step]
\end_layout

\begin_layout LyX-Code
total_time = 1000.0*year
\end_layout

\begin_layout LyX-Code
max_dt = 10.0*year
\end_layout

\begin_layout LyX-Code
adapt_skip = 10 ; Default value
\end_layout

\begin_layout LyX-Code
stability_factor = 2.0 ; Default value
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:spatial:databases"

\end_inset

Databases for Boundaries, Interfaces, and Material Properties
\end_layout

\begin_layout Standard
Once the problem has been defined with PyLith parameters, and the mesh informati
on has been provided, the final step is to specify the boundary conditions
 and material properties to be used.
 The mesh information provides labels defining sets of vertices to which
 boundary conditions or fault conditions will be applied, as well as cell
 labels that will be used to define the material type of each cell.
 For boundary conditions, the 
\family typewriter
.cfg
\family default
 file is used to associate boundary condition types and spatial databases
 with each vertex group (see Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:boundary:interface:conditions"

\end_inset

).
 For materials, the 
\family typewriter
.cfg
\family default
 file is used to associate material types and spatial databases with cells
 identified by the material identifier (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Material-models"

\end_inset

).
\end_layout

\begin_layout Standard
The spatial databases define how the boundary conditions or material property
 values vary spatially, and they can be arbitrarily complex.
 The simplest example for a material database would be a mesh where all
 the cells of a given type have uniform properties (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

 or 0D variation).
 A slightly more complex case would be a mesh where the cells of a given
 type have properties that vary linearly along a given direction (
\begin_inset Quotes eld
\end_inset

line
\begin_inset Quotes erd
\end_inset

 or 1D variation).
 In more complex models, the material properties might have different values
 at each point in the mesh (
\begin_inset Quotes eld
\end_inset

volume
\begin_inset Quotes erd
\end_inset

 or 3D variation).
 This might be the case, for example, if the material properties are provided
 by a database of seismic velocities and densities.
 For boundary conditions the simplest case would be where all vertices in
 a given group have the same boundary condition parameters (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

 or 0D variation).
 A more complex case might specify a variation in the conditions on a given
 surface (
\begin_inset Quotes eld
\end_inset

area
\begin_inset Quotes erd
\end_inset

 or 2D variation).
 This sort of condition might be used, for example, to specify the variation
 of slip on a fault plane.
 The examples discussed in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 also contain more information regarding the specification and use of the
 spatial database files.
\end_layout

\begin_layout Subsection
SimpleDB Spatial Database
\end_layout

\begin_layout Standard
In most cases the default type of spatial database for faults, boundary
 conditions, and materials is 
\family typewriter
SimpleDB
\family default
.
 Spatial database files provide specification of a field over some set of
 points.
 There is no topology associated with the points.
 Although multiple values can be specified at each point with more than
 one value included in a search query, the interpolation of each value will
 be done independently.
 Time dependent variations of a field are not supported in these files.
 Spatial database files can specify spatial variations over zero, one, two,
 and three dimensions.
 Zero dimensional variations correspond to uniform values.
 One-dimensional spatial variations correspond to piecewise linear variations,
 which need not coincide with coordinate axes.
 Likewise, two-dimensional spatial variations correspond to variations on
 a planar surface (which need not coincide with the coordinate axes) and
 three-dimensional spatial variations correspond to variations over a volume.
 In one, two, or three dimensions, queries can use a 
\begin_inset Quotes eld
\end_inset

nearest value
\begin_inset Quotes erd
\end_inset

 search or linear interpolation.
\end_layout

\begin_layout Standard
The spatial database files need not provide the data using the same coordinate
 system as the mesh coordinate system, provided the two coordinate systems
 are compatible.
 Examples of compatible coordinate systems include geographic coordinates
 (longitude/latitude/elevation), and projected coordinates (e.g., coordinates
 in a transverse Mercator projection).
 Spatial database queries use the Proj.4 Cartographic Projections library
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

proj.maptools.org
\end_layout

\end_inset

 to convert between coordinate systems, so a large number of geographic
 projections are available with support for converting between NAD27 and
 WGS84 horizontal datums as well as several other frequently used datums.
 Because the interpolation is done in the coordinate system of the spatial
 database, geographic coordinates should only be used for very simple datasets,
 or undesirable results will occur.
 This is especially true when the spatial database coordinate system combines
 latitude, longitude, and elevation in meters (longitude and latitude in
 degrees are often much smaller than elevations in meters leading to distorted
 
\begin_inset Quotes eld
\end_inset

distance
\begin_inset Quotes erd
\end_inset

 between locations and interpolation).
\end_layout

\begin_layout Standard
SimpleDB uses a simple ASCII file to specify the variation of values (e.g.,
 displacement field, slip field, physical properties) in space.
 The file format is described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Spatialdata:SimpleIOAscii"

\end_inset

.
 The tutorials in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 use SimpleDB files to specify the values for the boundary conditions, 
 physical properties, and fault slip.
\end_layout

\begin_layout Standard
As in the other Pyre objects, spatial database objects contain parameters
 that can be set from the command line or using 
\family typewriter
.cfg or .pml
\family default
 files.
 The parameters for a spatial database are:
\end_layout

\begin_layout Description
label Label for the database, which is used in diagnostic messages.
\end_layout

\begin_layout Description
query_type Type of search query to perform.
 Values for this parameter are ``linear'' and ``nearest'' (default).
\end_layout

\begin_layout Description
iohandler Database importer.
 Only one importer is implemented, so you do not need to change this setting.
\end_layout

\begin_layout Description
iohandler.filename Filename for the spatial database.
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file is:
\end_layout

\begin_layout LyX-Code
label = Material properties
\end_layout

\begin_layout LyX-Code
query_type = linear
\end_layout

\begin_layout LyX-Code
iohandler.filename = mydb.spatialdb
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
UniformDB Spatial Database
\end_layout

\begin_layout Standard
The SimpleDB spatial database is quite general, but when the values are
 uniform, it is often easier to use the UniformDB spatial database instead.
 With the UniformDB, you specify the values directly either on the command
 line or in a parameter-setting (
\family typewriter
.cfg
\family default
) file.
 On the other hand, if the values are used in more than one place, it is
 easier to place the values in a SimpleDB file, because they can then be
 referred to using the filename of the spatial database rather than having
 to repeatedly list all of the values on the command line or in a parameter-sett
ing (
\family typewriter
.cfg
\family default
) file.
 The Pyre properties for a UniformDB are:
\end_layout

\begin_layout Description
values Array of names of values in spatial database
\end_layout

\begin_layout Description
data Array of values in spatial database
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
Specify the physical properties of a linearly elastic, isotropic material
 in a 
\family typewriter
pylithapp.cfg
\family default
 file.
 The data values are dimensioned with the appropriate units using Python
 syntax.
\end_layout

\begin_layout LyX-Code

\size small
[pylithapp.timedependent.materials.material]
\end_layout

\begin_layout LyX-Code

\size small
db_properties = spatialdata.spatialdb.UniformDB ; Set the db to a UniformDB
\end_layout

\begin_layout LyX-Code

\size small
db_properties.values = [vp,vs,density] ; Set the names of the values in the
 database
\end_layout

\begin_layout LyX-Code

\size small
db_properties.data = [5773.5*m/s, 3333.3*m/s, 2700.0*kg/m**3] ; Set the values
 in the database
\end_layout

\begin_layout Subsubsection
ZeroDispDB
\end_layout

\begin_layout Standard
The ZeroDispDB is a a special case of the UniformDB for the Dirichlet boundary
 conditions.
 The values in the database are the ones requested by the Dirichlet boundary
 conditions, 
\family typewriter
displacement-x
\family default
, 
\family typewriter
displacement-y
\family default
, and 
\family typewriter
displacement-z
\family default
, and are all set to zero.
 This makes it trivial to set displacements to zero on a boundary.
 The examples discussed in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorials"

\end_inset

 use this database.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SCECCVMH-Impl"

\end_inset

SCEC CVM-H Spatial Database
\end_layout

\begin_layout Standard
Although the SimpleDB implementation is able to specify arbitrarily complex
 spatial variations, there are existing databases for physical properties,
 and when they are available, it is desirable to access these directly.
 One such database is the SCEC CVM-H database, which provides seismic velocities
 and density information for much of southern California.
 Spatialdata provides a direct interface to this database.
 See Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Tutorial-Two-tet4-geoproj"

\end_inset

 for an example of using the SCEC CVM-H database for physical properties
 of an elastic material.
 The interface is known to work with versions 5.2 and 5.3 of the SCEC CVM-H.
 Setting a minimum wave speed can be used to replace water and very soft
 soils that are incompressible or nearly incompressible with stiffer, compressib
le materials.
 The Pyre properties for the SCEC CVM-H are:
\end_layout

\begin_layout Description
data_dir Directory containing the SCEC CVM-H data files
\end_layout

\begin_layout Description
min_vs Minimum shear wave speed.
 Corresponding minimum values for the dilatational wave speed (Vp) and density
 are computed.
 Default value is 500 m/s.
\end_layout

\begin_layout Description
squash Squash topography/bathymetry to sea level (make the earth's surface
 flat)
\end_layout

\begin_layout Description
squash_limit Elevation above which topography is squashed (geometry below
 this elevation remains undistorted)
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
Specify the physical properties of a linearly elastic, isotropic material
 using the SCEC CVM-H in a 
\family typewriter
pylithapp.cfg
\family default
 file.
\end_layout

\begin_layout LyX-Code

\size small
[pylithapp.timedependent.materials.material]
\end_layout

\begin_layout LyX-Code

\size small
db_properties = spatialdata.spatialdb.SCECCVMH ; Set the database to the SCEC
 CVM-H
\end_layout

\begin_layout LyX-Code

\size small
db_properties.data_dir = /home/johndoe/data/sceccvm-h/vx53 ; Directory containing
\begin_inset Newline newline
\end_inset

the database data files
\end_layout

\begin_layout LyX-Code

\size small
db_properties.min_vs = 500*m/s
\end_layout

\begin_layout LyX-Code

\size small
db_properties.squash = True ; Turn on squashing
\end_layout

\begin_layout LyX-Code

\size small
db_properties.squash_limit = -1000.0 ; Only distort the geometry above z =
 -1 km in 
\begin_inset Newline newline
\end_inset

flattening the earth
\end_layout

\begin_layout Subsection
CompositeDB Spatial Database
\end_layout

\begin_layout Standard
For some problems, a boundary condition or material property may have subsets
 with different spatial variations.
 One example would be when we have separate databases to describe the elastic
 and inelastic bulk material properties for a region.
 In this case, it would be useful to have two different spatial databases,
 e.g., a seismic velocity model with Vp, Vs, and density values, and another
 database with the inelastic physical properties.
 We can use the 
\family typewriter
CompositeDB
\family default
 spatial database for these cases.
 An example would be:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.maxwell]
\end_layout

\begin_layout LyX-Code
label = Maxwell material
\end_layout

\begin_layout LyX-Code
id = 1
\end_layout

\begin_layout LyX-Code
db_properties = spatialdata.spatialdb.CompositeDB
\end_layout

\begin_layout LyX-Code
db_properties.db_A = spatialdata.spatialdb.SCECCVMH
\end_layout

\begin_layout LyX-Code
db_properties.db_B = spatialdata.spatialdb.SimpleDB
\end_layout

\begin_layout LyX-Code
quadrature.cell = pylith.feassemble.FIATSimplex
\end_layout

\begin_layout LyX-Code
quadrature.cell.shape = tetrahedron
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.maxwell.db_properties]
\end_layout

\begin_layout LyX-Code
values_A = [density,vs,vp]
\end_layout

\begin_layout LyX-Code
db_A.label = Elastic properties from CVM-H
\end_layout

\begin_layout LyX-Code
db_A.data_dir = /Users/willic3/geoframe/tools/vx53/bin
\end_layout

\begin_layout LyX-Code
db_A.squash = False
\end_layout

\begin_layout LyX-Code
values_B = [viscosity]
\end_layout

\begin_layout LyX-Code
db_B.label = Vertically varying Maxwell material
\end_layout

\begin_layout LyX-Code
db_B.iohandler.filename = ../spatialdb/mat_vert_var_maxwell.spatialdb
\end_layout

\begin_layout Standard
Here we have specified a 
\family typewriter
CompositeDB
\family default
 where the elastic properties (
\family typewriter
density
\family default
, 
\family typewriter
vs
\family default
, 
\family typewriter
vp
\family default
) are given by the SCEC CVM-H, and 
\family typewriter
viscosity
\family default
 is described by a 
\family typewriter
SimpleDB
\family default
 (
\family typewriter
mat_vert_var_maxwell.spatialdb
\family default
).
 The user must first specify 
\family typewriter
db_properties
\family default
 as a 
\family typewriter
CompositeDB
\family default
, and must then give the two components of this database (
\family typewriter
SCECCVMH
\family default
 and 
\family typewriter
SimpleDB
\family default
).
 The values to query in each of these databases is also required.
 This is followed by the usual parameters for each of the spatial databases.
 The 
\family typewriter
CompositeDB
\family default
 provides a flexible mechanism for specifying material properties or boundary
 conditions where the variations come from two different sources.
\end_layout

\begin_layout Subsection
Time History Database
\end_layout

\begin_layout Standard
The time history database specifies the temporal variation in the amplitude
 of a field associated with a boundary condition.
 It is used in conjunction with spatial databases to provide spatial and
 temporal variation of parameters for boundary conditions.
 The same time history is applied to all of the locations, but the time
 history may be shifted with a spatial variation in the onset time and scaled
 with a spatial variation in the amplitude.
 The time history database uses a simple ASCII file which is simpler than
 the one used by the SimpleDB spatial databse.
 The file format is described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Spatialdata:TimeHistoryIO"

\end_inset

.
 
\end_layout

\begin_layout Standard
As in the other Pyre objects, spatial database objects contain parameters
 that can be set from the command line or using 
\family typewriter
.cfg or .pml
\family default
 files.
 The parameters for a spatial database are:
\end_layout

\begin_layout Description
label Label for the time history database, which is used in diagnostic messages.
\end_layout

\begin_layout Description
filename Filename for the time history database.
\end_layout

\begin_layout Standard
An example of setting these parameters in a 
\family typewriter
.cfg
\family default
 file is:
\end_layout

\begin_layout LyX-Code
label = Displacement time history
\end_layout

\begin_layout LyX-Code
filename = mytimehistory.timedb
\end_layout

\begin_layout Section
Labels and Identifiers for Materials, Boundary Conditions, and Faults
\end_layout

\begin_layout Standard
For materials, the ``label'' is a string used only for error messages.
 The ``id'' is an integer that corresponds to the material identifier in
 LaGriT (itetclr) and CUBIT (block id).
 The id also tags the cells in the mesh for associating cells with a specific
 material model and quadrature rule.
 For boundary conditions, the ``label'' is a string used to associate groups
 of vertices (psets in LaGriT and nodesets in CUBIT) with a boundary condition.
 Note that some mesh generators use strings (LaGriT) to identify groups
 of nodes while others use integers (CUBIT Exodus files).
 Although CUBIT permits associated strings with nodesets, they are not included
 in the Exodus files, so we must rely on the nodeset ID.
 PyLith 1.0 had an ``id'' for boundary conditions, but we removed it from
 subsequent releases because it was not used.
 For faults the ``label'' is used in the same manner as the ``label'' for
 boundary conditions.
 That is, it associates a string with a group of vertices (pset in LaGriT
 and nodeset in CUBIT).
 The fault ``id'' is a integer used to tag the cohesive cells in the mesh
 with a specific fault and quadrature rule.
 Because we use the fault ``id'' to tag cohesive cells in the mesh the same
 way we tag normal cells to materials, it must be unique among the faults
 as well as the materials.
\end_layout

\begin_layout Section
PyLith Output
\end_layout

\begin_layout Standard
PyLith currently supports output to VTK files, which can be imported directly
 into a number of visualization tools, such as ParaView, Visit, and MayaVi.
 PyLith 1.1 significantly expanded the information available for output,
 including fault information and state variables.
 Output of solution information for the domain, faults, materials, and boundary
 conditions is controlled by an output manager for each module.
 This allows the user to tailor the output to the problem.
 By default PyLith will write a number of VTK files: one VTK file for the
 solution over the entire domain, two VTK files for each fault, and two
 VTK files for each material.
 One of the files for each fault and material includes diagnostic  information.
 For a fault the fields include the final slip, the slip initiation  time,
 and the fault normal vector.
 For a material the fields include the density and the elastic constants.
 Additional diagnostic information can be included by setting the appropriate
 output parameters.
 See Chapters 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:material:models"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:boundary:interface:conditions"

\end_inset

 for more information on the available fields and the next section for output
 parameters.
 The second file for each fault and material includes solution information
 at each time step where output was requested (also customizable by the
 user).
 For a fault the solution information includes the slip and the change in
 tractions on the fault surface.
 For a material the solution information includes the total strain and stress.
 For some materials fields for additional state variables may be available.
\end_layout

\begin_layout Subsection
Output Manager
\end_layout

\begin_layout Standard
The OutputManager object controls the type of files written, the fields
 included in the output, and how often output is written.
 PyLith includes some specialized OutputManagers that prescribe what fields
 are output by default.
 In some cases, additional fields are available but not included by default.
 For example, in 3D problems, the along-strike and up-dip directions over
 the fault surface can be included in the diagnostic information.
 These are not included by default, because 1D problems have neither an
 along-strike nor up-dip direction and 2D problems do not have an up-dip
 direction.
\end_layout

\begin_layout Subsubsection
Output Manager Parameters
\end_layout

\begin_layout Standard
The parameters for the OutputManager are:
\end_layout

\begin_layout Description
output_freq Flag indicating whether to write output based on the time or
 number of time steps since the last output.
 Permissible values are ``time_step'' and ``skip'' (default).
\end_layout

\begin_layout Description
time_step Minimum time between output if 
\family typewriter
output_freq
\family default
 is set to ``time_step''.
\end_layout

\begin_layout Description
skip Number of time steps between output if 
\family typewriter
output_freq
\family default
 is set to ``skip''.
 A value of 0 means every time step is written.
\end_layout

\begin_layout Description
writer Writer for data (currently limited to VTK writer).
\end_layout

\begin_layout Description
coordsys Coordinate system for vertex coordinates (currently ignored).
\end_layout

\begin_layout Description
vertex_filter Filter to apply to all vertex fields (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:vertex:field:filters"

\end_inset

).
\end_layout

\begin_layout Description
cell_filter Filter to apply to all cell fields (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:cell:field:filters"

\end_inset

).
\end_layout

\begin_layout Standard
An example of setting the output parameters for a material in a 
\family typewriter
.cfg
\family default
 file is
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.elastic.output]
\end_layout

\begin_layout LyX-Code
output_freq = time_step
\end_layout

\begin_layout LyX-Code
time_step = 1.0*yr
\end_layout

\begin_layout LyX-Code
cell_filter = pylith.meshio.CellFilterAvgMesh
\end_layout

\begin_layout LyX-Code
cell_info_fields = [density] ; limit diagnostic data to density
\end_layout

\begin_layout LyX-Code
cell_data_fields = [total-strain,stress] ; default
\end_layout

\begin_layout LyX-Code
writer.filename = dislocation-elastic.vtk
\end_layout

\begin_layout Subsubsection
Output Over Subdomain
\end_layout

\begin_layout Standard
Output of the solution over the entire domain for large problems generates
 very large data files.
 In some cases one is primarily interested in the solution over the ground
 surface.
 PyLith supports output of the solution on any boundary of the domain by
 associating an output manager with a group of vertices corresponding to
 the surface of the boundary.
 As with several of the boundary conditions, the boundary must be a simply-conne
cted surface.
 The OutputSolnSubset is the specialized OutputManager that implements this
 feature and, by default, includes the displacement field in the output.
 In addition to the OutputManager parameters, the OutputSolnSubset includes:
\end_layout

\begin_layout Description
label Label of group of vertices defining boundary surface.
\end_layout

\begin_layout Description
vertex_data_fields Names of vertex data fields to output (default is [``displace
ments'']).
\end_layout

\begin_layout Subsection
Output Field Filters
\end_layout

\begin_layout Standard
Output fields may not directly correspond to the information a user desires.
 For example, the default output for the state variables includes the physical
 properties at each quadrature point.
 Most visualization packages cannot handle cell fields with multiple points
 in a cell (the locations of the points within the cell are not included
 in the data file).
 In order to reduce the field to a single point within the cell, we would
 like to average the values.
 This is best done within PyLith before output, because it reduces the file
 size and the quadrature information provides the information necessary
 (the weights of the quadrature points) to compute the appropriate average
 over the cell.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:vertex:field:filters"

\end_inset

Vertex Field Filters
\end_layout

\begin_layout Standard
Currently the only filter available for vertex fields computes the magnitude
 of a vector at each location.
 Most visualization packages support this operation, so this filter is not
 very useful.
\end_layout

\begin_layout Description
VertexFilterVecNorm Computes the magnitude of a vector field at each location.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:cell:field:filters"

\end_inset

Cell Field Filters
\end_layout

\begin_layout Standard
Most users will want to apply a filter to cell fields to average the fields
 over the cell, producing values at one location per cell for visualization.
\end_layout

\begin_layout Description
CellFilterAvgMesh Compute the weighted average of the values within a bulk
 cell.
 The weights are determined from the quadrature associated with the cells.
\end_layout

\begin_layout Description
CellFilterAvgSubMesh Compute the weighted average of the values for a boundary
 cell.
 The weights are determined from the quadrature associated with the cells.
\end_layout

\begin_layout Subsection
VTK Output
\end_layout

\begin_layout Standard
PyLith writes legacy (non-XML) VTK files.
 These are simple files with vertex coordinates, the mesh topology, and
 fields over vertices and/or cells.
 Each time step is written to a different file.
 The time stamp is included in the filename with the decimal point removed.
 This allows automatic generation of animations with many visualization
 packages that use VTK files.
 The default time stamp is the time in seconds, but this can be changed
 using the normalization constant to give a time stamp in years, tens of
 years, or any other value.
\end_layout

\begin_layout Subsubsection
VTKWriter Parameters
\end_layout

\begin_layout Standard
The parameters for the VTKWriter are:
\end_layout

\begin_layout Description
filename Name of VTK file
\end_layout

\begin_layout Description
time_format C-style format string for time stamp in filename.
 The decimal point in the time stamp will be removed for compatibility with
 VTK visualization packages that provide seamless animation of data from
 multiple VTK files.
\end_layout

\begin_layout Description
time_constant Value used to normalize time stamp in VTK files (default is
 1.0 s).
\end_layout

\begin_layout Section
Tips and Hints
\end_layout

\begin_layout Subsection
Tips and Hints For Running PyLith
\end_layout

\begin_layout Itemize
Examine the examples for a problem similar to the one you want to run and
 dissect it in detail.
\end_layout

\begin_layout Itemize
Start with a uniform-resolution coarse mesh to debug the problem setup.
 Increase the resolution as necessary to resolve the solution fields of
 interest (resolving stresses/strains may require a higher resolution than
 that for resolving displacements).
\end_layout

\begin_layout Itemize
Merge materials using the same material model.
 This will result in only one VTK file for each material model rather than
 several files.
\end_layout

\begin_layout Itemize
The rate of convergence in quasi-static (implicit) problems can sometimes
 be improved by renumbering the vertices in the finite-element mesh to reduce
 the bandwidth of the sparse matrix.
 LaGriT contains routines to do this, but CUBIT does not.
\end_layout

\begin_layout Itemize
If you encounter errors or warnings, run 
\family typewriter
pylithinfo
\family default
 or use the 
\family typewriter
--help
\family default
, 
\family typewriter
--help-components
\family default
, and 
\family typewriter
--help-properties
\family default
 command line arguments when running PyLith to check the parameters to make
 sure PyLith is using the parameters you intended.
\end_layout

\begin_layout Itemize
Use the 
\family typewriter
--petsc.log_summary
\family default
, 
\family typewriter
--petsc.ksp_monitor
\family default
, 
\family typewriter
--petsc.ksp_view
\family default
, 
\family typewriter
--petsc.ksp_converged_reason
\family default
, and 
\family typewriter
--petsc.snes_converged_reason
\family default
 command line arguments (or set them in a parameter file) to view PyLith
 performance and monitor the convergence.
\end_layout

\begin_layout Itemize
Turn on the journals (see the examples) to monitor the progress of the code.
\end_layout

\begin_layout Subsection
Troubleshooting
\end_layout

\begin_layout Itemize

\family typewriter
ImportError: liblapack.so.2: cannot open shared object file: No such file
 or directory
\end_layout

\begin_layout Quote
PyLith cannot find one of the libraries.
 You need to set up your environment variables (e.g., PATH, PYTHONPATH, and
 LD_LIBRARY_PATH) to match your installation.
 If you are using the PyLith binary on Linux or Mac OS X, run the command
 
\family typewriter
source setup.sh 
\family default
in the directory where you unpacked the distribution.
 This will set up your environment variables for you.
 If you are building PyLith from source, please consult the instructions
 for building from source.
\end_layout

\begin_layout Itemize
\paragraph_spacing single

\family typewriter
>> {command line}:: 
\begin_inset Newline newline
\end_inset

-- pyre.inventory(error) 
\begin_inset Newline newline
\end_inset

-- p4wd <- 'true' 
\begin_inset Newline newline
\end_inset

-- unrecognized property 'p4wd' 
\begin_inset Newline newline
\end_inset

>> {command line}:: 
\begin_inset Newline newline
\end_inset

-- pyre.inventory(error) 
\begin_inset Newline newline
\end_inset

-- p4pg <- 'true' 
\begin_inset Newline newline
\end_inset

-- unrecognized property ' p4pg'
\end_layout

\begin_layout Quote
Verify that the `mpirun' command included in the PyLith package is the first
 one on your PATH:
\end_layout

\begin_layout Quote

\family typewriter
$ which mpirun
\end_layout

\begin_layout Quote
If it is not, adjust your PATH environment variable accordingly.
\end_layout

\begin_layout Itemize

\family typewriter
"merlin.DistributionNotFound: Cheetah" error
\end_layout

\begin_layout Quote
This error occurs when trying to use the 32-bit linux binary on 64-bit linux
 systems.
 One of the Python packages PyLith uses does not know how to determine the
 system architecture at runtime.
 The workaround is:
\end_layout

\begin_layout Enumerate
Go to the lib/python2.5/site-packages directory.
\end_layout

\begin_layout Enumerate
Unzip merlin-1.7-py2.5.egg (if it is a file and not a directory).
\end_layout

\begin_layout Enumerate
Go to the merlin directory.
\end_layout

\begin_layout Enumerate
Edit __init__.py.
 Replace line 308 plat = get_platform() with plat = "linux-i686"
\end_layout

\begin_layout Enumerate
If merlin-1.7-py2.5.egg is a file, rezip merlin.
 Go to the site-packages directory and enter "zip -r merlin-1.7-py2.5.egg merlin".
\end_layout

\begin_layout Itemize
PyLith crashes with a bus error.
\end_layout

\begin_layout Quote
This often indicates that PyLith is using incompatible versions of libraries.
 This can result from changing your environment variables after configuring
 or installing PyLith (when building from source) or errors in setting the
 environment variables (PATH, LD_LIBRARY_PATH, and PYTHONPATH).
 If the former case, simply reconfigure and rebuild PyLith.
 In the latter case, check your environment variables (order matters!) to
 make sure PyLith finds the desired directories before system directories.
 
\end_layout

\begin_layout Itemize
PyLith crashes with a segmentation fault.
\end_layout

\begin_layout Quote
A segmentation fault might be caused by an error that wasn't trapped or
 a bug in the code.
 Please report these cases so that we can fix these problems (either trap
 the error and provide the user with an informative error message, or fix
 the bug).
 If this occurs with any of the problems distributed with PyLith, simply
 submit a bug report (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Getting-Help-and"

\end_inset

) indicating which problem you ran and your platform.
 If the crash occurs for a problem you created, it is a great help if you
 can try to reproduce the crash with a very simple problem (e.g., adjust the
 boundary conditions or other parameters of one of the examples to reproduce
 the segmentation fault).
 Submit a bug report along with log files showing the backtrace from a debugger
 (e.g., gdb) and the valgrind log file (only available on Linux platforms).
 You can generate a backtrace using the debugger by using the 
\family typewriter
--petsc.start_in_debugger
\family default
 command line argument:
\end_layout

\begin_layout LyX-Code
pylith [..args..] --petsc.start_in_debugger
\end_layout

\begin_layout LyX-Code
(gdb) continue
\end_layout

\begin_layout LyX-Code
(gdb) backtrace
\end_layout

\begin_layout Quote
To use valgrind to detect the memory error, first go to your working directory
 and run the problem with 
\family typewriter
--launcher.dry
\family default
:
\end_layout

\begin_layout LyX-Code
pylith [..args..] --launcher.dry
\end_layout

\begin_layout Quote
Instead of actually running the problem, this causes PyLith to dump the
 mpirun/mpiexec command it will execute.
 Copy and paste this command into your shell so you can run it directly.
 Insert the full path to valgrind before the full path to mpinemesis and
 tell valgrind to use a log file:
\end_layout

\begin_layout LyX-Code

\size small
mpirun -np 1 /path/to/valgrind --log-file=valgrind-log  /path/to/mpinemesis
 --pyre-start [..lots of junk..]
\end_layout

\end_body
\end_document
