#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Running PyLith
\end_layout

\begin_layout Standard
There are essentially three major inputs needed to run a problem with PyLith:
\end_layout

\begin_layout Enumerate
A set of parameters describing the problem.
 These parameters describe the type of problem to be run, solver information,
 time-stepping information, boundary conditions, materials, etc.
 This information can be provided from the command-line or by using a 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 file.
\end_layout

\begin_layout Enumerate
Mesh information.
 This includes the topology of the finite-element mesh (coordinates of vertices
 and how the vertices are connected into cells), a material identifier for
 each cell, and sets of vertices associated with boundary conditions, faults,
 and output (for subsets of the mesh).
 This information can be provided using the PyLith mesh ASCII format (See
 Chapter 
\begin_inset LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples and Section 
\begin_inset LatexCommand ref
reference "sec:MeshIOAscii"

\end_inset

 for the format specification) or by importing the information from the
 LaGriT or CUBIT meshing packages (see 
\family typewriter
examples/3d/hex8
\family default
 and 
\family typewriter
examples/3d/tet4
\family default
).
\end_layout

\begin_layout Enumerate
Databases specifying the material property values and boundary condition
 values to be used.
 Arbitrarily complex spatial variations in boundary and fault conditions
 and material properties may be given in the spatial database (see Chapter
 
\begin_inset LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples and Appendix 
\begin_inset LatexCommand ref
reference "sec:Spatialdata:SimpleIOAscii"

\end_inset

 for the format specification).
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:setting:parameters"

\end_inset

Setting Parameters for PyLith
\end_layout

\begin_layout Standard
The most basic information for setting up a PyLith simulation is the problem
 parameters, since these also describe the characteristics of the mesh and
 database information.
 There are several methods for setting input parameters for the 
\family typewriter
pylith
\family default
 executable: via the command line, or by using a text file in 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 format.
 PyLith gathers most simulation parameters and settings using Pyre properties
 and facilities.
 Properties correspond to simple settings in the form of strings, integers,
 and real numbers.
 Facilities correspond to software modules.
 Both facilities and properties have default values provided, so you only
 need to set values when you want to deviate from the default behavior.
\end_layout

\begin_layout Subsection
Using the Command Line
\end_layout

\begin_layout Standard
Pyre uses the following syntax to change properties from the command line.
 To change the value of a property of a component, use:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[component].[property]=[value]
\end_layout

\begin_layout Standard
Each component is attached to a facility, so the option above can also be
 written as: 
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility].[property]=[value]
\end_layout

\begin_layout Standard
Each facility has a default component attached to it.
 A different component can be attached to a facility by:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility]=[new_component] 
\end_layout

\begin_layout Standard
PyLith's command-line arguments can control Pyre and PyLith properties and
 facilities, MPI settings, and PETSc settings.
 You can get more information on the available options by typing
\end_layout

\begin_layout LyX-Code

\family typewriter
$ pylith --help
\end_layout

\begin_layout Standard
All PyLith-related properties are associated with the 
\family typewriter
pylithapp
\family default
 component.
 You can get a list of all of these top-level properties along with a descriptio
n of what they do by running PyLith with the 
\family typewriter
--help-properties
\family default
 command-line argument.
 To get information on user-configurable facilities and components, you
 can run PyLith with the 
\family typewriter
--help-components
\family default
 command-line argument.
 To find out about the properties associated with a given component, you
 can run PyLith with the 
\family typewriter
--[component].help-properties
\family default
 flag:
\end_layout

\begin_layout LyX-Code
$ pylith --problem.help-properties
\end_layout

\begin_layout Standard
Each component may also have sub-components associated with it:
\end_layout

\begin_layout LyX-Code
$ pylith -- problem.help-components
\end_layout

\begin_layout Standard
By starting at the top-level components, you can determine the components
 and properties at each level by working down to lower-level components:
\end_layout

\begin_layout LyX-Code
$ pylith --problem.bc.help-components
\end_layout

\begin_layout LyX-Code
$ pylith --problem.bc.help-properties
\end_layout

\begin_layout Standard
Using the 
\family typewriter
--help-components
\family default
 and 
\family typewriter
--help-properties
\family default
 flags for the various components and sub-components is a good way to discover
 potential problems in a simulation.
\end_layout

\begin_layout Subsection
Using a 
\family typewriter
.cfg
\family default
 File
\end_layout

\begin_layout Standard
Entering all those parameters via the command line involves the risk of
 typographical errors, which can lead to undesired results.
 You will generally find it easier to write a brief 
\family typewriter
.cfg
\family default
 input file that contains the parameters.
 This file has a format similar to a Windows INI file.
 The file is composed of one or more sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
[pylithapp.subcomponent1.subcomponent2]
\end_layout

\begin_layout LyX-Code
# this is a comment
\end_layout

\begin_layout LyX-Code
property1 = value1
\end_layout

\begin_layout LyX-Code
property2 = value2 ; this is another comment
\end_layout

\begin_layout Standard
We strongly recommend that you use 
\family typewriter
.cfg
\family default
 files for your work.
 The files are syntax-colored in the vim editor.
\end_layout

\begin_layout Subsection
Using a 
\family typewriter
.pml
\family default
 File
\end_layout

\begin_layout Standard
A 
\family typewriter
.pml
\family default
 file is an XML file that specifies parameter values in a highly structured
 format.
 It is composed of nested sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
<component name='component1'>
\end_layout

\begin_layout LyX-Code
    <component name='component2'>
\end_layout

\begin_layout LyX-Code
        <property name='property1'>value1</property>
\end_layout

\begin_layout LyX-Code
        <property name='property2'>value2</property>
\end_layout

\begin_layout LyX-Code
    </component>
\end_layout

\begin_layout LyX-Code
</component>
\end_layout

\begin_layout Standard
XML files are intended to be read and written by machines, not edited manually
 by humans.
 The 
\family typewriter
.pml
\family default
 file format is intended for applications in which PyLith input files are
 generated by another program, e.g., a GUI, web application, or a high-level
 structured editor.
 This file fomat will not be discussed further here, but if you are interested
 in using 
\family typewriter
.pml
\family default
 files, note that 
\family typewriter
.pml
\family default
 files and 
\family typewriter
.cfg
\family default
 files can be used interchangeably; in the following discussion, a file
 with a 
\family typewriter
.pml
\family default
 extension can be substituted anywhere a 
\family typewriter
.cfg
\family default
 file can be used.
\end_layout

\begin_layout Subsection
Specification and Placement of Configuration Files
\end_layout

\begin_layout Standard
Configuration files may be specified on the command line:
\end_layout

\begin_layout LyX-Code
$ pylith example.cfg
\end_layout

\begin_layout Standard
In addition, the Pyre framework searches for configuration files named 
\family typewriter
pylithapp.cfg
\family default
 in several predefined locations.
 You may put settings in any or all of these locations, depending on the
 scope you want the settings to have:
\end_layout

\begin_layout Enumerate

\family typewriter
$PREFIX/etc/pylithapp.cfg
\family default
, for system-wide settings;
\end_layout

\begin_layout Enumerate

\family typewriter
$HOME/.pyre/pylithapp/pylithapp.cfg
\family default
, for user settings and preferences;
\end_layout

\begin_layout Enumerate
the current directory (
\family typewriter
./pylithapp.cfg
\family default
), for local overrides.
 
\end_layout

\begin_layout Standard
Parameters given directly on the command line will override any input contained
 in a configuration file.
 Configuration files given on the command line override all others.
 The 
\family typewriter
pylithapp.cfg
\family default
 files placed in (3) will override those in (2), (2) overrides (1), and
 (1) overrides only the built-in defaults.
\end_layout

\begin_layout Standard
All of the example problems are set up using configuration files in the
 example directory, and specific problems are defined by including the appropria
te configuration file on the command-line.
 Referring to the directory 
\family typewriter
examples/twocells/twohex8
\family default
, the following configuration files are present:
\end_layout

\begin_layout LyX-Code
axialdisp.cfg
\end_layout

\begin_layout LyX-Code
dislocation.cfg
\end_layout

\begin_layout LyX-Code
pylithapp.cfg
\end_layout

\begin_layout LyX-Code
sheardisp.cfg
\end_layout

\begin_layout Standard
The settings in pylithapp.cfg will be read automatically, and additional
 settings are included by specifying one of the other files on the command-line:
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg
\end_layout

\begin_layout Standard
If you want to see what settings are being used, you can either examine
 the 
\family typewriter
.cfg
\family default
 files, or use the help flags as described above:
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.help-components
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.help-properties
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.bc.help-components
\end_layout

\begin_layout LyX-Code
$ pylith axialdisp.cfg --problem.bc.help-properties
\end_layout

\begin_layout Standard
This is generally a more useful way of determining problem settings, since
 it includes default values as well as those that have been specified in
 the 
\family typewriter
.cfg
\family default
 file.
\end_layout

\begin_layout Subsection
PETSc Settings
\end_layout

\begin_layout Standard
PyLith relies on PETSc for the linear algebra computations.
 PETSc options can be set in 
\family typewriter
.cfg
\family default
 files in sections beginning with 
\family typewriter
[pylithapp.petsc]
\family default
.
 The ones of primary interest in the case of PyLith are shown in Table\InsetSpace ~

\begin_inset LatexCommand ref
reference "tab:petsc:options:defaults"

\end_inset

.
 In many quasi-static or dynamic elasticity simulations, runtime can be
 reduced by replacing the Jacobi preconditioner with Additive Schwartz with
 Gram-Schmidt orthogonalization (see Table\InsetSpace ~

\begin_inset LatexCommand ref
reference "tab:petsc:options:quasistatic"

\end_inset

).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0.9in">
<column alignment="center" valignment="middle" leftline="true" width="0.8in">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="4in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Default Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
log_summary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print logging objects and events.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dump preconditioned residual norm to stdout.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_view
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print linear solver parameters.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_rtol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
1.0e-05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Convergence tolerance for relative decrease in residual norm.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
jacobi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set preconditioner type to block Jacobi.
 See PETSc documentation for a list of all preconditioner types.
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:petsc:options:defaults"

\end_inset

Useful command-line arguments for setting PETSc options.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0.9in">
<column alignment="center" valignment="middle" leftline="true" width="0.8in">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="4in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
asm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Additive Schwarz method
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_max_it
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\emph on
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Maximum number of iterations.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_gmres_restart
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of iterations after which Gram-Schmidt orthogonalization is restarted
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_rtol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
1.0e-08
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Convergence tolerance for relative decrease in residual norm.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:petsc:options:quasistatic"

\end_inset

PETSc options that often result in improved performance in quasi-static
 and dynamic elasticity problems.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Mesh Information
\end_layout

\begin_layout Standard
Geometrical and topological information for the finite element mesh may
 be provided by exporting an EXODUS format file from CUBIT, by exporting
 a GMV file and an accompanying Pset file from LaGriT, or by specifying
 the information in PyLith mesh ASCII format.
 See Chapter 
\begin_inset LatexCommand ref
reference "cha:Tutorials"

\end_inset

 for examples.
\end_layout

\begin_layout Standard
PyLith supports linear cells in 1D (Figure 
\begin_inset LatexCommand ref
reference "fig:1D-linear-elements"

\end_inset

), 2D (Figure 
\begin_inset LatexCommand ref
reference "fig:2D-linear-elements"

\end_inset

), and 3D (Figure 
\begin_inset LatexCommand ref
reference "fig:3D-linear-elements"

\end_inset

).
 The vertex ordering must follow the convention shown in Figures 
\begin_inset LatexCommand ref
reference "fig:1D-linear-elements"

\end_inset

-
\begin_inset LatexCommand ref
reference "fig:3D-linear-elements"

\end_inset

.
 Quadratic cells are also supported, but at present the only method for
 using these cells in PyLith is using PyLith ASCII format.
 PyLith does not yet support automatic generation of a quadratic mesh from
 the linear meshes created by CUBIT or LaGriT.
\end_layout

\begin_layout Standard
The mesh information defines the vertex coordinates as well as specifying
 the vertices composing each cell in the mesh.
 The mesh information must also define at least one set of vertices for
 which displacement (Dirichlet) boundary conditions will be provided.
 In most realistic problems, there will be several vertex groups, each with
 a unique identifying label.
 For example, one group might define a surface of the mesh where displacement
 (Dirichlet) boundary conditions will be applied, another might define a
 surface where traction (Neumann) boundary conditions will be applied, while
 a third might specify a surface that defines a fault.
 Similarly, the mesh information contains cell labels that define the material
 type for each cell in the mesh.
 For a mesh with a single material type, there will only be a single label
 for every cell in the mesh.
 See Chapters 
\begin_inset LatexCommand ref
reference "cha:material:models"

\end_inset

 and 
\begin_inset LatexCommand ref
reference "cha:boundary:interface:conditions"

\end_inset

 for more detailed discussions of setting the materials and boundary conditions.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figs/bar2.eps

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Linear bar cell available for 1D problems.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:1D-linear-elements"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figs/tri3.eps

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
 
\begin_inset Graphics
	filename figs/quad4.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Linear cells available for 2D problems are the triangle (left) and the quadrilat
eral (right).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:2D-linear-elements"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figs/tet4.eps

\end_inset

\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
 
\begin_inset Graphics
	filename figs/hex8.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Linear cells available for 3D problems are the tetrahedron (left) and the
 hexahedron (right).
\begin_inset LatexCommand label
name "fig:3D-linear-elements"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Databases for Boundaries, Interfaces, and Material Properties
\end_layout

\begin_layout Standard
Once the problem has been defined with PyLith parameters, and the mesh informati
on has been provided, the final step is to specify the boundary conditions
 and material properties to be used.
 The mesh information provides labels defining sets of vertices to which
 boundary conditions or fault conditions will be applied, as well as cell
 labels that will be used to define the material type of each cell.
 For boundary conditions, the 
\family typewriter
.cfg
\family default
 file is used to associate boundary condition types and spatial databases
 with each vertex group (see Chapter 
\begin_inset LatexCommand ref
reference "cha:boundary:interface:conditions"

\end_inset

).
 For materials, the 
\family typewriter
.cfg
\family default
 file is used to associate material types and spatial databases with cells
 identified by the material identifier (see Figure 
\begin_inset LatexCommand ref
reference "fig:Material-models"

\end_inset

).
\end_layout

\begin_layout Standard
The spatial databases define how the boundary conditions or material property
 values vary spatially, and they can be arbitrarily complex.
 The simplest example for a material database would be a mesh where all
 the cells of a given type have uniform properties (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

 or 0D variation).
 A slightly more complex case would be a mesh where the cells of a given
 type have properties that vary linearly along a given direction (
\begin_inset Quotes eld
\end_inset

line
\begin_inset Quotes erd
\end_inset

 or 1D variation).
 In more complex models, the material properties might have different values
 at each point in the mesh (
\begin_inset Quotes eld
\end_inset

volume
\begin_inset Quotes erd
\end_inset

 or 3D variation).
 This might be the case, for example, if the material properties are provided
 by a database of seismic velocities and densities.
 See Section 
\begin_inset LatexCommand ref
reference "sec:Spatialdata:SimpleIOAscii"

\end_inset

 for the specification of the file format for the default spatial database.
 For boundary conditions the simplest case would be where all vertices in
 a given group have the same boundary condition parameters (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

 or 0D variation).
 A more complex case might specify a variation in the conditions on a given
 surface (
\begin_inset Quotes eld
\end_inset

area
\begin_inset Quotes erd
\end_inset

 or 2D variation).
 This sort of condition might be used, for example, to specify the variation
 of slip on a fault plane.
 The examples discussed in Chapter 
\begin_inset LatexCommand ref
reference "cha:Tutorials"

\end_inset

 also contain more information regarding the specification and use of the
 spatial database files.
\end_layout

\begin_layout Subsection
SimpleDB Database Implementation
\end_layout

\begin_layout Standard
The default database used for faults, boundary conditions, and materials
 is 
\family typewriter
SimpleDB
\family default
.
 This is a simple database format that is used in most of the example problems.
 The file format is described in 
\begin_inset LatexCommand ref
reference "sec:Spatialdata:SimpleIOAscii"

\end_inset

.
 Looking at 
\family typewriter
examples/twocells/twotet4
\family default
, for example, we find the following spatial database files:
\end_layout

\begin_layout LyX-Code
axialdisp.spatialdb
\end_layout

\begin_layout LyX-Code
dislocation_disp.spatialdb
\end_layout

\begin_layout LyX-Code
dislocation_slip.spatialdb
\end_layout

\begin_layout LyX-Code
dislocation_sliprate.spatialdb
\end_layout

\begin_layout LyX-Code
dislocation_sliptime.spatialdb
\end_layout

\begin_layout LyX-Code
matprops.spatialdb
\end_layout

\begin_layout Standard
Each of these files is a SimpleDB implementation.
 They represent the most general method for specifying spatial variations
 in parameters.
\end_layout

\begin_layout Subsection
UniformDB Database Implementation
\end_layout

\begin_layout Standard
Although the SimpleDB implementation is quite general, in some cases a simpler
 implementation may be easier to use.
 For example, for the case of a 0D variation (constant values throughout
 the mesh), it should not be necessary to create a separate file simply
 to specify these constant parameter values.
 In this case, it may be easier to include the information in a 
\family typewriter
.cfg
\family default
 file.
 This is possible using the UniformDB database implementation.
 Although most of the example problems make use of the SimpleDB implementation,
 a problem using UniformDB is available in 
\family typewriter
examples/twocells/twohex8
\family default
.
 In the file 
\family typewriter
pylithapp.cfg
\family default
 you will find the following:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.material]
\end_layout

\begin_layout LyX-Code
db = spatialdata.spatialdb.UniformDB
\end_layout

\begin_layout LyX-Code
db.values = [vp,vs,density,viscosity]
\end_layout

\begin_layout LyX-Code
db.data = [5773.502691896258, 3333.333333333333, 2700.0, 1.0e18]
\end_layout

\begin_layout Standard
The first line switches the default 
\family typewriter
db
\family default
 to 
\family typewriter
UniformDB
\family default
.
 The next line defines the parameter names for this database, and the third
 line provides values for each parameter.
 If these three lines are commented out of 
\family typewriter
pylithapp.cfg
\family default
, and the following line is uncommented,
\end_layout

\begin_layout LyX-Code
# db.iohandler.filename = matprops.spatialdb
\end_layout

\begin_layout Standard
the file 
\family typewriter
matprops.spatialdb
\family default
 will be used to define the parameter values.
 The results will be identical, but in the first case (using UniformDB),
 no spatial database file is needed.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:SCECCVMH-Impl"

\end_inset

SCECCVMH Implementation
\end_layout

\begin_layout Standard
Although the SimpleDB implementation is able to specify arbitrarily complex
 spatial variations, there are existing parameter databases, and when they
 are available, it is desirable to access these directly.
 One such database is the SCEC CVM-H database, which provides seismic velocity
 and density information for much of southern California.
 PyLith 1.1 provides a direct interface to this database, provided that the
 SpatialData package has been built with CVM-H support.
 An example that uses this implementation is provided in 
\family typewriter
examples/twocells/twotet4-geoproj
\family default
.
 This example is somewhat unique in that the 
\family typewriter
pylithapp.cfg
\family default
 file must be edited to run the example.
 This is because the directory where the SCEC CVM-H database resides will
 be different for each user, and the location must be specified.
 In pylithapp.cfg, we have:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.material]
\end_layout

\begin_layout LyX-Code
db = spatialdata.spatialdb.SCECCVMH
\end_layout

\begin_layout LyX-Code
db.data_dir = /home/brad/data/sceccvm-h/vx53/bin
\end_layout

\begin_layout Standard
The first line switches the default 
\family typewriter
db
\family default
 to 
\family typewriter
SCECCVMH
\family default
.
 The next line defines the location of the 
\family typewriter
vx53
\family default
 executable, and must be changed to the location specified by the user when
 the package is installed.
 The package may be obtained from http://structure.harvard.edu/cvm-h.
 There are some additional aspects of this example that are explained more
 fully in 
\begin_inset LatexCommand ref
reference "sec:Tutorial-Two-tet4-geoproj"

\end_inset

.
\end_layout

\begin_layout Section
Labels and Identifiers for Materials, Boundary Conditions, and Faults
\end_layout

\begin_layout Standard
ADD STUFF HERE
\end_layout

\end_body
\end_document
