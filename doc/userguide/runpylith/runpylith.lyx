#LyX 1.4.4 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Chapter
Running PyLith
\end_layout

\begin_layout Standard
There are essentially three major pieces needed to run a problem with PyLith:
\end_layout

\begin_layout Enumerate
A set of parameters describing the problem.
 These parameters describe the type of problem to be run, solver information,
 time-stepping information, etc.
 This information can be provided from the command-line or using a 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 file.
\end_layout

\begin_layout Enumerate
Mesh information.
 This includes the topology of the finite-element mesh (coordinates of vertices
 and how the vertices are connected into cells), the material identifier
 for each cell, and sets of vertices associated with boundary conditions,
 faults, and output (for subsets of the mesh).
 This information can be provided using the PyLith Mesh ASCII format (See
 Chapter 
\begin_inset LatexCommand \ref{cha:Tutorials}

\end_inset

 for examples and Section 
\begin_inset LatexCommand \ref{sec:MeshIOAscii}

\end_inset

 for the format specification) or by importing the information from the
 LaGriT or CUBIT meshing packages (See Section XX [LaGriT/CUBIT tutorials]).
\end_layout

\begin_layout Enumerate
Databases specifying the material properties and boundary conditions to
 be used.
 Arbitrarily complex spatial variations in boundary and fault conditions
 and material properties may be given in the spatial database (See Chapter
 
\begin_inset LatexCommand \ref{cha:Tutorials}

\end_inset

 for examples and Section 
\begin_inset LatexCommand \ref{sec:Spatialdata:SimpleIOAscii}

\end_inset

 for the format specification).
\end_layout

\begin_layout Section
Setting Parameters for PyLith
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:setting:parameters}

\end_inset


\end_layout

\begin_layout Standard
The most basic information for setting up a PyLith simulation is the problem
 parameters, since these also describe the characteristics of the mesh and
 database information.
 There are several methods for setting input parameters for the 
\family typewriter
pylith
\family default
 executable: via the command line, or by using a configuration file in 
\family typewriter
.cfg
\family default
 or 
\family typewriter
.pml
\family default
 format.
 PyLith gathers many simulation parameters and settings using Pyre properties
 and facilities.
 Properties correspond to simple settings in the form of strings, integers,
 and real numbers.
 Facilities correspond to software modules.
 Both facilities and properties have default values provided, so you only
 need to set values when you want to deviate from the default behavior.
 Unless you write a module that extends PyLith's functionality, you will
 never need to change any of the facilities from the defaults.
\end_layout

\begin_layout Subsection
Using the Command Line
\end_layout

\begin_layout Standard
Pyre uses the following syntax to change properties from the command line.
 To change the value of a property of a component, use:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[component].[property]=[value]
\end_layout

\begin_layout Standard
Each component is attached to a facility, so the option above can also be
 written as: 
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility].[property]=[value]
\end_layout

\begin_layout Standard
Each facility has a default component attached to it.
 A different component can be attached to a facility by:
\end_layout

\begin_layout LyX-Code

\family typewriter
--[facility]=[new_component] 
\end_layout

\begin_layout Standard
PyLith's command-line arguments can control Pyre and PyLith properties and
 facilities, MPI settings, and PETSc settings.
 You can get more information on the available options by typing
\end_layout

\begin_layout LyX-Code

\family typewriter
$ pylith --help
\end_layout

\begin_layout Standard
All PyLith-related properties are associated with the 
\family typewriter
pylithapp
\family default
 component.
 You can get a list of all of these properties along with a description
 of what they do by running PyLith with the 
\family typewriter
--help-properties
\family default
 command-line argument.
 To get information on user settable facilities and components, you can
 run PyLith with the 
\family typewriter
--help-components
\family default
 command-line argument.
 To find out about the properties associated with a given component, you
 can run PyLith with the 
\family typewriter
--[component].help-properties
\family default
 flag:
\end_layout

\begin_layout LyX-Code
$ pylith --problem.help-properties
\end_layout

\begin_layout Subsection
Using a 
\family typewriter
.cfg
\family default
 File
\end_layout

\begin_layout Standard
Entering all those parameters via the command line involves the risk of
 typographical errors, which can lead to undesired results.
 You will generally find it easier to write a brief 
\family typewriter
.cfg
\family default
 input file that contains the parameters.
 This file has a format similar to a Windows INI file.
 The file is composed of one or more sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
[pylithapp.component1.component2]
\end_layout

\begin_layout LyX-Code
# this is a comment
\end_layout

\begin_layout LyX-Code
property1 = value1
\end_layout

\begin_layout LyX-Code
property2 = value2 ; this is another comment
\end_layout

\begin_layout Standard
We strongly recommend that you use 
\family typewriter
.cfg
\family default
 files for your work.
 The files are syntax-colored by the vim editor.
\end_layout

\begin_layout Subsection
Using a 
\family typewriter
.pml
\family default
 File
\end_layout

\begin_layout Standard
A 
\family typewriter
.pml
\family default
 file is an XML file that specifies parameter values in a highly structured
 format.
 It is composed of nested sections which are formatted as follows:
\end_layout

\begin_layout LyX-Code
<component name='component1'>
\end_layout

\begin_layout LyX-Code
    <component name='component2'>
\end_layout

\begin_layout LyX-Code
        <property name='property1'>value1</property>
\end_layout

\begin_layout LyX-Code
        <property name='property2'>value2</property>
\end_layout

\begin_layout LyX-Code
    </component>
\end_layout

\begin_layout LyX-Code
</component>
\end_layout

\begin_layout Standard
XML files are intended to be read and written by machines, not edited manually
 by humans.
 The 
\family typewriter
.pml
\family default
 file format is intended for applications in which PyLith input files are
 generated by another program, e.g., a GUI, web application, or a high-level
 structured editor.
 This file fomat will not be discussed further here.
 But if you are interested in using 
\family typewriter
.pml
\family default
 files, note that 
\family typewriter
.pml
\family default
 files and 
\family typewriter
.cfg
\family default
 files can be used interchangeably; in the following discussion, a file
 with a 
\family typewriter
.pml
\family default
 extension can be substituted anywhere a 
\family typewriter
.cfg
\family default
 file can be used.
\end_layout

\begin_layout Subsection
Specification and Placement of Configuration Files
\end_layout

\begin_layout Standard
Configuration files may be specified on the command line:
\end_layout

\begin_layout LyX-Code
$ pylith example.cfg
\end_layout

\begin_layout Standard
In addition, the Pyre framework searches for configuration files named 
\family typewriter
pylithapp.cfg
\family default
 in several predefined locations.
 You may put settings in any or all of these locations, depending on the
 scope you want the settings to have:
\end_layout

\begin_layout Enumerate

\family typewriter
PREFIX/etc/pylithapp.cfg
\family default
, for system-wide settings;
\end_layout

\begin_layout Enumerate

\family typewriter
$HOME/.pyre/pylithapp/pylithapp.cfg
\family default
, for user settings and preferences;
\end_layout

\begin_layout Enumerate
the current directory (
\family typewriter
./pylithapp.cfg
\family default
), for local overrides.
 
\end_layout

\begin_layout Standard
Parameters given directly on the command line will override any input contained
 in a configuration file.
 Configuration files given on the command line override all others.
 The 
\family typewriter
pylithapp.cfg
\family default
 files placed in (3) will override those in (2), (2) overrides (1), and
 (1) overrides only the built-in defaults.
\end_layout

\begin_layout Subsection
PETSc Settings
\end_layout

\begin_layout Standard
PyLith relies on PETSc for the linear algebra computations.
 PETSc options can be set in 
\family typewriter
.cfg
\family default
 files in sections beginning with 
\family typewriter
[pylithapp.petsc]
\family default
.
 The ones of primary interest in the case of PyLith are shown in Table\InsetSpace ~

\begin_inset LatexCommand \ref{tab:Useful-command-line-arguments}

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0.9in">
<column alignment="center" valignment="middle" leftline="true" width="0.8in">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="4in">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Property
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Default Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
log_summary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print logging objects and events.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dump preconditioned residual norm to stdout.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_view
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print linear solver parameters.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ksp_rtol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
1.0e-09
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Convergence tolerance for relative decrease in residual norm.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
bjacobi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set preconditioner type to block Jacobi.
 See PETSc documentation for a list of all preconditioner types.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
sub_pc_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\shape italic
ilu
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set preconditioner to incomplete factorization for each block.
 See PETSc documentation for a list of all preconditioners.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{tab:Useful-command-line-arguments}

\end_inset

Useful command-line arguments for setting PETSc options.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mesh Information
\end_layout

\begin_layout Standard
Geometrical and topological information for the finite element mesh may
 be provided by exporting an EXODUS format file from CUBIT, by exporting
 a GMV file and an accompanying Pset file from LaGriT, or by specifying
 the information in PyLith Mesh ASCII format.
 See Chapter 
\begin_inset LatexCommand \ref{cha:Tutorials}

\end_inset

 for examples.
\end_layout

\begin_layout Standard
PyLith supports linear elements in 1D (
\begin_inset LatexCommand \ref{fig:1D-linear-elements}

\end_inset

), 2D (
\begin_inset LatexCommand \ref{fig:2D-linear-elements}

\end_inset

), and 3D (
\begin_inset LatexCommand \ref{fig:3D-linear-elements}

\end_inset

).
 The node ordering must follow the convention shown in the figures.
 Quadratic elements are also supported, but at present the only method for
 using these elements in PyLith is using PyLith ASCII format.
 PyLith does not yet support automatic generation of a quadratic mesh from
 the linear meshes created by CUBIT or LaGriT.
\end_layout

\begin_layout Standard
The mesh information defines the nodal coordinates as well as specifying
 the nodes composing each element in the mesh.
 The mesh information must also define at least one set of nodes for which
 displacement (Dirichlet) boundary conditions will be provided.
 In most realistic problems, there will be several node groups, each with
 a unique identifying label.
 For example, one group might define a surface of the mesh where displacement
 (Dirichlet) boundary conditions will be applied, another might define a
 surface where traction (Neumann) boundary conditions will be applied, while
 a third might specify a surface that will define a fault.
 Similarly, the mesh information contains element labels that define the
 material type for each element in the mesh.
 For a mesh with a single material type, there will only be a single label
 for every element in the mesh.
 ***Put in references for all of this***
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figs/bar2.eps

\end_inset

 
\end_layout

\begin_layout Caption
Linear bar element available for 1-D problems.
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{fig:1D-linear-elements}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Standard
\align center

\hfill

\begin_inset Graphics
	filename figs/tri3.eps

\end_inset

 
\hfill

\begin_inset Graphics
	filename figs/quad4.eps

\end_inset


\hfill

\end_layout

\begin_layout Caption
Linear elements available for 2-D problems are the triangle (left) and the
 quadrilateral (right).
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{fig:2D-linear-elements}

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
-
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center

\hfill

\begin_inset Graphics
	filename figs/tet4.eps

\end_inset


\hfill

\begin_inset Graphics
	filename figs/hex8.eps

\end_inset


\hfill

\end_layout

\begin_layout Caption
Linear elements available for 3D problems are the tetrahedron (left) and
 the hexahedron (right).
\begin_inset LatexCommand \label{fig:3D-linear-elements}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Databases for Boundaries, Interfaces, and Material Properties
\end_layout

\begin_layout Standard
Once the problem has been defined with PyLith parameters, and the mesh informati
on has been provided, the final step is to specify the boundary conditions
 and material properties to be used.
 The mesh information provides labels defining sets of nodes to which boundary
 conditions or fault conditions will be applied, as well as element labels
 that will be used to define the material type of each element.
 For boundary conditions, the .cfg file is used to associate boundary condition
 types and spatial databases with each node group (***reference***).
 For materials, the 
\family typewriter
.cfg
\family default
 file is used to associate material types and spatial databases with each
 element group.
\end_layout

\begin_layout Standard
The spatial databases define how the boundary conditions or material property
 values vary spatially, and they can be arbitrarily complex.
 The simplest example for a material database would be a mesh where all
 the elements of a given type have uniform properties (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

, or 0-D variation).
 A slightly more complex case would be a mesh where the elements of a given
 type have properties that vary linearly along a given direction (
\begin_inset Quotes eld
\end_inset

line
\begin_inset Quotes erd
\end_inset

, or 1-D variation).
 In more complex models, the material properties might have different values
 at each point in the mesh (
\begin_inset Quotes eld
\end_inset

volume
\begin_inset Quotes erd
\end_inset

, or 3-D variation).
 This might be the case, for example, if the material properties are provided
 by a database of seismic velocities and densities.
 ***Provide references***
\end_layout

\begin_layout Standard
For boundary conditions, the simplest case would be where all nodes in a
 given group have the same boundary conditions (
\begin_inset Quotes eld
\end_inset

point
\begin_inset Quotes erd
\end_inset

, or 0-D variation).
 A more complex case might specify a variation in the conditions on a given
 surface (
\begin_inset Quotes eld
\end_inset

area
\begin_inset Quotes erd
\end_inset

, or 2-D variation).
 This sort of condition might be used, for example, to specify the variation
 of slip on a fault plane.
 ***Provide references***
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
