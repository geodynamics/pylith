<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter_runpylith">
  <title>Running PyLith</title>

  <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section>
    <title>Supported Finite Elements</title>
    <para>
      PyLith currently only supports the 4-node linear tetrahedral and
      8-node linear hexahedral elements. The node ordering must follow
      the convention shown in <xref linkend="fig_tet4" /> and <xref
      linkend="fig_hex8" />.
    </para>

    <figure id="fig_tet4">
      <title>Linear tetrahedral finite element.</title>
      <mediaobject>
	<imageobject role="fo">
	  <imagedata fileref="figs/tet4.eps" format="EPS" />
	</imageobject>
	<imageobject role="xhtml,html">
	  <imagedata fileref="figs/tet4.png" format="PNG" />
	</imageobject>
      </mediaobject>
    </figure>

    <figure id="fig_hex8">
      <title>Linear hexahedral finite element.</title>
      <mediaobject>
	<imageobject role="fo">
	  <imagedata fileref="figs/hex8.eps" format="EPS" />
	</imageobject>
	<imageobject role="xhtml,html">
	  <imagedata fileref="figs/hex8.png" format="PNG" />
	</imageobject>
      </mediaobject>
    </figure>
  </section>

  <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section>
    <title>Input Files</title>
    <para>
      PyLith gets its input from a variety of files. Most of these are
      associated with different kinds of boundary conditions. As a
      result only six files are required. The remaining files are only used
      when the associated boundary condition is used. See <xref
      linkend="appendix_fileformats" /> for a detailed discussion of
      the file formats.
    </para>
    <para>
      The first step in the simulation process involves partitioning
      the mesh among the processors. In this phase, PyLith reads in
      the entire mesh and then writes out processor specific pieces
      with one file for each processor. The filenames for these follow
      the convention <filename>xx.PROC.ext</filename> where
      <filename>PROC</filename> refers to the processor number and
      <filename>xx.ext</filename> was the original filename. This
      procedure is applied to files with the following extensions:
      <filename>coord</filename>, <filename>connect</filename>,
      <filename>split</filename>, and <filename>bc</filename>.
    </para>
    <para>
      The remaining files provide information common to all
      processors. As a result, the user must create copies of each one
      for each of the processors. By default PyLith expects the names
      of these files to follow the same form,
      <filename>xx.PROC.ext</filename>. Setting up this naming scheme
      is most easily done using symbolic links or copying files to
      local directories on each machine using a shell script that
      starts a simulation. See <filename>runbm.py</filename> in <xref
      linkend="tutorial_reversenog" /> for a simple example. You can also
      choose your own filename template by setting the appropriate
      command-line argument. See <xref
      linkend="section_commandline_arguments" /> for more information.
    </para>

    <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <section>
      <title>Required Input Files</title>
      <para>
        The required input files define the finite-element mesh,
        boundary conditions, time step information, output, and
        material properties.
      </para>
      <variablelist>
	<varlistentry>
	  <term><filename>xx.coord</filename></term>
	  <listitem>
	    <para>
              Coordinates of finite-element vertices.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.connect</filename></term>
	  <listitem>
	    <para>
              Topology and material information for the finite-element mesh.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.bc</filename></term>
	  <listitem>
	    <para>
              Boundary conditions at vertices on external boundaries.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.time</filename></term>
	  <listitem>
	    <para>
              Time stepping information.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.statevar</filename></term>
	  <listitem>
	    <para>
              State variables to be output for the elastic and
              (time-dependent) viscoelastic solution.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.prop</filename></term>
	  <listitem>
	    <para>
              Properties for each material.
            </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <section>
      <title>Optional Input Files</title>
      <para>
        The optional input files are only read when a file exists
        matching the name of an input file PyLith expects to read.
        Note that explicit filenames for each of the files can be
        specified using command-line arguments as discussed in <xref
        linkend="section_commandline_arguments" />.
      </para>
      <variablelist>
	<varlistentry>
	  <term><filename>xx.fuldat</filename></term>
	  <listitem>
	    <para>
              Time steps for which full output is requested.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.split</filename></term>
	  <listitem>
	    <para>
              Dislocation boundary condition information (implemented
              using split nodes).
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.skew</filename></term>
	  <listitem>
	    <para>
              Local coordinate rotation information for boundary
              conditions.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.keyval</filename></term>
	  <listitem>
	    <para>
              File for changing default parameters.
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.wink</filename></term>
	  <listitem>
	    <para>
              Winkler spring element boundary condition
              information. <emphasis>Not yet tested.</emphasis>
            </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><filename>xx.hist</filename></term>
	  <listitem>
	    <para>
              Time histories for split node and Winkler boundary
              conditions (if necessary). <emphasis>Not yet
              tested.</emphasis>
            </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

  </section>

  <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="section_commandline_arguments">
    <title>Command-line Arguments</title>

    <para>
      In general, PyLith's command-line arguments fall into three
      categories: MPI settings, Pyre properties and facilities, and
      PETSc settings.
    </para>

    <para>
      If using the MPICH implementation of the Message Passing
      Interface (MPI), as is done for the CIG distributed binaries,
      the synopsis for running PyLith is:
    </para>
    <cmdsynopsis>
      <command>mpirun</command>
      <arg choice="req">-np <replaceable>NPROCS</replaceable></arg>
      pylith3dapp.py
      <arg choice="opt"><replaceable>PyLith settings</replaceable></arg>
      <arg choice="opt"><replaceable>PETSc settings</replaceable></arg>
    </cmdsynopsis>
    
    <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <section>
      <title>MPI Settings</title>

      <warning>
	<para>
          This section applies only to PyLith compiled using the MPICH
          implementation of the Message Passing Interface (MPI).
        </para>
      </warning>

      <para>
        The MPI settings define how many processors are used and other
        parallel processing parameters. The number of processors is
        specified using <option>-np NPROCS</option>, where
        <literal>NPROCS</literal> corresponds to the number of
        processors.
      </para>


    </section>

    <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <section>
      <title>Properties and Facilities</title>
      <para>
        PyLith gathers many simulation parameters and settings using
        Pyre properties and facilities. Properties correspond to
        simple settings in the form of strings, integers, and real
        numbers. Facilities corresponds to software modules. Both
        facilities and properties have default values provided, so you
        only need to set values when you want to deviate from the
        default behavior. Unless you write a module that extends
        PyLith's functionality, you will never need to change any of
        the facilities from the defaults.
      </para>
      <para>
        In the current version of PyLith, all of the properties are
        associated with the <literal>scanner</literal> component. You
        can get a list of all of these properties along with a
        description of what they do by running PyLith with the
        <option>--scanner.help-properties</option> command-line
        argument.
      </para>

      <example id="example_pylith_properties">
	<title>Setting scanner properties from the command line.</title>
	<screen>
          <cmdsynopsis>
	    <command>mpirun</command>
	    <arg choice="plain">-np <replaceable>1</replaceable></arg> 
	    <arg choice="plain">pylith3dapp.py</arg>
	    <arg choice="plain">--scanner.help-properties</arg><sbr/>
	    <arg choice="plain">--scanner.asciiOutput=<replaceable>none</replaceable></arg>
	    <arg choice="plain">--scanner.title=<replaceable>"My simulation"</replaceable></arg>
	  </cmdsynopsis>
        </screen>
      </example>
       
    </section>

    <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <section>
      <title>PETSc Settings</title>
      <para>
        PyLith relies on PETSc for the linear algebra
        computations. Many of PETSc options can be set using
        command-line arguments. The ones of primary interest in the
        case of PyLith are shown in <xref
	  linkend="table_petsc_options" />.
      </para>
      
      <table id="table_petsc_options">
	<title>Useful command-line arguments for setting PETSc options.</title>

	<tgroup cols="2" align="left">
	  <thead>
	    <row>
	      <entry>Argument</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-log_summary</arg>
		</cmdsynopsis></entry>
	      <entry>Print logging objects and events.</entry>
	    </row>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-pc_type
                  <replaceable>bjacobi</replaceable></arg>
		</cmdsynopsis></entry>
		<entry>
	          Set preconditioner type to block Jacobi. See PETSc
		  documentation for a list of all preconditioner types.
	        </entry>
	    </row>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-sub_pc_type
                  <replaceable>ilu</replaceable></arg>
		</cmdsynopsis></entry>
		<entry>
		  Set preconditioner to incomplete factorization for
		  each block. See PETSc documentation for a list of all
		  preconditioners.
	        </entry>
	    </row>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-ksp_monitor <replaceable>stdout</replaceable></arg>
		</cmdsynopsis></entry>
	      <entry>
                Dump preconditioned residual norm to stdout. If only
                <option>-ksp_monitor</option> is given, the default is
                to use stdout.
              </entry>
	    </row>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-ksp_view</arg>
		</cmdsynopsis></entry>
	      <entry>Print linear solver parameters.</entry>
	    </row>
	    <row>
	      <entry><cmdsynopsis>
		  <arg choice="plain">-ksp_rtol
		  <replaceable>1.0e-09</replaceable></arg>
		</cmdsynopsis></entry>
	      <entry>Tolerance for relative decrease in residual norm</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </section>

  </section>

  <!-- SECTION +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section>
    <title>Setting Pyre properties using pml files</title>
    <para>
      PyLith's Pyre properties can also be set using
      <filename>pml</filename> files. These are <acronym>XML</acronym>
      files that follow a special Pyre XML schema.
    </para>
    <para>
      ADD STUFF HERE
    </para>

  </section>

</chapter>
