#LyX 1.6.6 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options false
\language english
\inputencoding latin1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Tutorial-3d-hex8-quasistatic"

\end_inset

Tutorial Using Hexahedral Mesh Created by CUBIT - Quasi-static Examples
\end_layout

\begin_layout Standard
PyLith features discussed in this tutorial:
\end_layout

\begin_layout Itemize
Quasi-static solution
\end_layout

\begin_layout Itemize
Formatting timestamps of VTK output files
\end_layout

\begin_layout Itemize
Output of velocity field
\end_layout

\begin_layout Itemize
Dirichlet displacement and velocity boundary conditions
\end_layout

\begin_layout Itemize
Neumann traction boundary conditions and time-varying tractions
\end_layout

\begin_layout Itemize
ZeroDispDB spatial database
\end_layout

\begin_layout Itemize
SimpleDB spatial database
\end_layout

\begin_layout Itemize
UniformDB spatial database
\end_layout

\begin_layout Itemize
Quasi-static fault rupture and fault creep
\end_layout

\begin_layout Itemize
Multiple kinematic fault ruptures
\end_layout

\begin_layout Itemize
Specifying more than one material
\end_layout

\begin_layout Itemize
Nonlinear solver
\end_layout

\begin_layout Itemize
Linearly elastic isotropic material
\end_layout

\begin_layout Itemize
Maxwell linear viscoelastic material
\end_layout

\begin_layout Itemize
Power-law viscoelastic material
\end_layout

\begin_layout Itemize
Drucker-Prager elastoplastic material
\end_layout

\begin_layout Itemize
Adaptive time stepping
\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
This set of examples describes a set of quasi-static problems for PyLith.
 These quasi-static problems primarily demonstrate the usage of time-dependent
 boundary conditions and fault slip, as well as different rheologies.
 Some of the examples also demonstrate the usage of the nonlinear solver,
 which is required by the nonlinear rheologies (power-law viscoelastic and
 Drucker-Prager elastoplastic).
 All of the examples are contained in the directory 
\family typewriter
examples/3d/hex8
\family default
, and the corresponding 
\family typewriter
.cfg
\family default
 files are 
\family typewriter
step04.cfg
\family default
, 
\family typewriter
step05.cfg
\family default
, 
\family typewriter
step06.cfg
\family default
, 
\family typewriter
step07.cfg
\family default
, 
\family typewriter
step08.cfg
\family default
, and 
\family typewriter
step09.cfg
\family default
.
 Each example may be run as follows:
\end_layout

\begin_layout LyX-Code
pylith stepxx.cfg
\end_layout

\begin_layout Standard
This will cause PyLith to read the default parameters in 
\family typewriter
pylithapp.cfg
\family default
, and then override or augment them with the additional parameters in the
 
\family typewriter
stepxx.cfg
\family default
 file.
 Each 
\family typewriter
.cfg
\family default
 file is extensively documented, to provide detailed information on the
 various parameters.
\end_layout

\begin_layout Subsubsection
Step04 - Pure Dirichlet Velocity Boundary Conditions
\end_layout

\begin_layout Standard
The step04.cfg file describes a problem with x-displacements fixed at zero
 on the positive and negative x-faces while velocity boundary conditions
 are applied in the y-directions on the same faces, yielding a left-lateral
 sense of movement.
 The bottom (minimum z) boundary is held fixed in the z-direction.
 We also use a Maxwell viscoelastic material for the lower crust, and the
 simulation is run for 200 years using a constant time step size of 20 years.
 The default time stepping behavior is 
\family typewriter
TimeStepUniform
\family default
.
 We retain that behavior for this problem and provide the total simulation
 time and the time step size:
\end_layout

\begin_layout LyX-Code
# Change the total simulation time to 200 years, and use a constant time
\end_layout

\begin_layout LyX-Code
# step size of 20 years.
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.implicit.time_step]
\end_layout

\begin_layout LyX-Code
total_time = 200.0*year
\end_layout

\begin_layout LyX-Code
dt = 20.0*year 
\end_layout

\begin_layout Standard
We than change the material type of the lower crust, provide a spatial database
 from which to obtain the material properties (using the default 
\family typewriter
SimpleDB
\family default
), and request additional output information for the material:
\end_layout

\begin_layout LyX-Code
# Change material type of lower crust to Maxwell viscoelastic.
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
materials.lower_crust = pylith.materials.MaxwellIsotropic3D
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# Provide a spatial database from which to obtain property values.
\end_layout

\begin_layout LyX-Code
# Since there are additional properties and state variables for the Maxwell
\end_layout

\begin_layout LyX-Code
# model, we explicitly request that they be output.
 Properties are named in
\end_layout

\begin_layout LyX-Code
# cell_info_fields and state variables are named in cell_data_fields.
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.lower_crust]
\end_layout

\begin_layout LyX-Code
db_properties.iohandler.filename = spatialdb/mat_maxwell.spatialdb
\end_layout

\begin_layout LyX-Code
output.cell_info_fields = [density,mu,lambda,maxwell_time]
\end_layout

\begin_layout LyX-Code
output.cell_data_fields = [total_strain,stress,viscous_strain]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Note that the default 
\family typewriter
output.cell_info_fields
\family default
 are those corresponding to an elastic material (
\family typewriter
density
\family default
, 
\family typewriter
mu
\family default
, 
\family typewriter
lambda
\family default
), and the default 
\family typewriter
output.cell_data_fields
\family default
 are 
\family typewriter
total_strain
\family default
 and 
\family typewriter
stress
\family default
.
 For materials other than elastic, there are generally additional material
 properties and state variables, and the appropriate additional fields must
 be specifically requested for each material type.
\end_layout

\begin_layout Standard
This example has no displacements in the elastic solution (t = 0), so we
 retain the default 
\family typewriter
ZeroDispDB
\family default
 for all instances of 
\family typewriter
db_initial
\family default
.
 To apply the velocity boundary conditions, we must specify 
\family typewriter
db_rate
\family default
, which is zero by default.
 We use a 
\family typewriter
UniformDB
\family default
 to assign the velocities:
\end_layout

\begin_layout LyX-Code
# +x face
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.bc.x_pos]
\end_layout

\begin_layout LyX-Code
bc_dof = [0, 1]
\end_layout

\begin_layout LyX-Code
label = face_xpos
\end_layout

\begin_layout LyX-Code
db_initial.label = Dirichlet BC on +x
\end_layout

\begin_layout LyX-Code
db_rate = spatialdata.spatialdb.UniformDB
\end_layout

\begin_layout LyX-Code
db_rate.label = Dirichlet rate BC on +x
\end_layout

\begin_layout LyX-Code
db_rate.values = [displacement-rate-x,displacement-rate-y,rate-start-time]
\end_layout

\begin_layout LyX-Code
db_rate.data = [0.0*cm/year,1.0*cm/year,0.0*year]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# -x face
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.bc.x_neg]
\end_layout

\begin_layout LyX-Code
bc_dof = [0, 1]
\end_layout

\begin_layout LyX-Code
label = face_xneg
\end_layout

\begin_layout LyX-Code
db_initial.label = Dirichlet BC on -x
\end_layout

\begin_layout LyX-Code
db_rate = spatialdata.spatialdb.UniformDB
\end_layout

\begin_layout LyX-Code
db_rate.label = Dirichlet rate BC on +x
\end_layout

\begin_layout LyX-Code
db_rate.values = [displacement-rate-x,displacement-rate-y,rate-start-time]
\end_layout

\begin_layout LyX-Code
db_rate.data = [0.0*cm/year,-1.0*cm/year,0.0*year]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Note that 
\family typewriter
db_rate
\family default
 requires a start time, which allows the condition to be applied at any
 time during the simulation.
 For this example, we start the velocity boundary conditions at t = 0.
\end_layout

\begin_layout Standard
Finally, we must provide information on VTK output.
 This is slightly more complicated than the static case, because we must
 decide the frequency with which output occurs for each output type.
 We also assign a more user-friendly format to the output file time stamp,
 and we request that the time stamp is in units of 1 year (rather than the
 default value of seconds):
\end_layout

\begin_layout LyX-Code
# Give basename for VTK domain output of solution over domain.
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation.output.domain]
\end_layout

\begin_layout LyX-Code
# We specify that output occurs in terms of a given time frequency, and
\end_layout

\begin_layout LyX-Code
# ask for output every 40 years.
 The time stamps of the output files are
\end_layout

\begin_layout LyX-Code
# in years (rather than the default of seconds), and we give a format for
\end_layout

\begin_layout LyX-Code
# the time stamp.
\end_layout

\begin_layout LyX-Code
output_freq = time_step
\end_layout

\begin_layout LyX-Code
time_step = 40.0*year
\end_layout

\begin_layout LyX-Code
writer.filename = step04/step04.vtk
\end_layout

\begin_layout LyX-Code
writer.time_format = %04.0f
\end_layout

\begin_layout LyX-Code
writer.time_constant = 1.0*year
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# Give basename for VTK domain output of solution over ground surface.
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.formulation.output.subdomain]
\end_layout

\begin_layout LyX-Code
# Name of nodeset for ground surface.
\end_layout

\begin_layout LyX-Code
label = face_zpos
\end_layout

\begin_layout LyX-Code
# We keep the default output frequency behavior (skip every n steps), and
\end_layout

\begin_layout LyX-Code
# ask to skip 0 steps between output, so that we get output every time step.
\end_layout

\begin_layout LyX-Code
skip = 0
\end_layout

\begin_layout LyX-Code
writer.filename = step04/step04-groundsurf.vtk
\end_layout

\begin_layout LyX-Code
writer.time_format = %04.0f
\end_layout

\begin_layout LyX-Code
writer.time_constant = 1.0*year
\end_layout

\begin_layout Standard
We provide similar output information for the two materials (
\family typewriter
upper_crust
\family default
 and 
\family typewriter
lower_crust
\family default
).
 Note that for the domain output, we requested output in terms of a given
 time frequency, while for the subdomain we requested output in terms of
 number of time steps.
 When we have run the simulation, the output VTK files will be contained
 in 
\family typewriter
examples/3d/hex8/step04
\family default
, and the results may be visualized using a tool such as ParaView or mayavi2.
 Results using ParaView are shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:step04-displ-t200"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/step04-displ-t200.jpg
	width 10cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Displacement field for example step04 at t = 200 years visualized using
 ParaView.
 The mesh has been distorted by the computed displacements (magnified by
 500), and the vectors show the computed displacements.
\begin_inset CommandInset label
LatexCommand label
name "fig:step04-displ-t200"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Step05 - Time-varying Dirichlet and Neumann Boundary Conditions
\end_layout

\begin_layout Standard
The step02.cfg file describes a problem with Dirichlet (displacement) boundary
 conditions corresponding to zero x and y-displacements applied on the negative
 x-face and Neumann (traction) boundary conditions corresponding to normal
 compression and horizontal shear applied on the positive x-face.
 The bottom (minimum z) boundary is held fixed in the z-direction.
 The problem is similar to example step01, except that 1 MPa of normal compressi
on and 1 MPa of shear (in a left-lateral sense) are applied on the positive
 x-face, and the negative x-face is pinned in both the x and y-directions.
\end_layout

\begin_layout Standard
For the boundary conditions, we must first change the boundary condition
 type for the positive x-face from the default Dirichlet to Neumann:
\end_layout

\begin_layout LyX-Code
# +x face -- first change bc type to Neumann
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.bc]
\end_layout

\begin_layout LyX-Code
x_pos = pylith.bc.Neumann 
\end_layout

\begin_layout Standard
We use a 
\family typewriter
SimpleDB
\family default
 to describe the traction boundary conditions.
 When applying traction boundary conditions over a surface, it is also necessary
 to specify integration information for the surface.
 Since this is a three-dimensional problem, the dimension of the surface
 is 2.
 Since the cells being used are trilinear hexahedra, the cell type is 
\family typewriter
FIATLagrange
\family default
 and we use an integration order of 2.
 A lower integration order would not provide sufficient accuracy while a
 higher integration order would offer no benefit (while requiring more computati
on time and storage):
\end_layout

\begin_layout LyX-Code
# +x face
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.bc.x_pos]
\end_layout

\begin_layout LyX-Code
label = face_xpos
\end_layout

\begin_layout LyX-Code
db_initial = spatialdata.spatialdb.SimpleDB
\end_layout

\begin_layout LyX-Code
db_initial.label = Neumann BC on +x
\end_layout

\begin_layout LyX-Code
db_initial.iohandler.filename = spatialdb/tractions_axial_shear.spatialdb
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# We must specify quadrature information for the cell faces.
\end_layout

\begin_layout LyX-Code
quadrature.cell = pylith.feassemble.FIATLagrange
\end_layout

\begin_layout LyX-Code
quadrature.cell.dimension = 2
\end_layout

\begin_layout LyX-Code
quadrature.cell.quad_order = 2 
\end_layout

\begin_layout Standard
The boundary conditions on the negative x-face are simpler than they were
 in example step01 (zero displacements in the x and y-directions), so we
 can use the default 
\family typewriter
ZeroDispBC
\family default
:
\end_layout

\begin_layout LyX-Code
# -x face
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.bc.x_neg]
\end_layout

\begin_layout LyX-Code
bc_dof = [0, 1] 
\end_layout

\begin_layout LyX-Code
label = face_xneg
\end_layout

\begin_layout LyX-Code
db_initial.label = Dirichlet BC on -x 
\end_layout

\begin_layout Standard
The boundary conditions on the negative z-face are supplied in the same
 manner as for example step01.
 When we have run the simulation, the output VTK files will be contained
 in examples/3d/hex8/step02, and the results may be visualized using a tool
 such as ParaView or mayavi2.
 Results using ParaView are shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:step02-displ"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/step02-displ.jpg
	width 10cm

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Displacement field for example step02 visualized using ParaView.
 The mesh has been distorted by the computed displacements (magnified by
 500), and the vectors show the computed displacements.
\begin_inset CommandInset label
LatexCommand label
name "fig:step02-displ"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Step03 - Dirichlet Boundary Conditions with Kinematic Fault Slip
\end_layout

\begin_layout Standard
The step03.cfg file describes a problem with Dirichlet (displacement) boundary
 conditions corresponding to zero x and y-displacements applied on the negative
 and positive x-faces and a vertical fault with a combination of left-lateral
 and updip motion.
 The left-lateral component of fault slip has a constant value of 2 m in
 the upper crust, and then decreases linearly to zero at the base of the
 model.
 The reverse slip component has a value of 0.25 m at the surface, and then
 decreases linearly to zero at 2 km depth.
\end_layout

\begin_layout Standard
Due to the simplicity of the boundary conditions, we are able to use the
 default 
\family typewriter
ZeroDispBC
\family default
 for the positive and negative x-faces, as well as the negative z-face.
 To use a fault, we must first define a fault interface.
 We do this by providing an array containing a single interface:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent]
\end_layout

\begin_layout LyX-Code
# Set interfaces to an array of 1 fault: 'fault'.
\end_layout

\begin_layout LyX-Code
interfaces = [fault] 
\end_layout

\begin_layout Standard
For this example we specify the fault slip, so we set the interface type
 to 
\family typewriter
FaultCohesiveKin
\family default
:
\end_layout

\begin_layout LyX-Code
# Set the type of fault interface condition.
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.interfaces]
\end_layout

\begin_layout LyX-Code
fault = pylith.faults.FaultCohesiveKin 
\end_layout

\begin_layout Standard
We must then identify the nodeset corresponding to the fault, and provide
 integration information for the fault surface:
\end_layout

\begin_layout LyX-Code
# Set the parameters for the fault interface condition.
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.interfaces.fault]
\end_layout

\begin_layout LyX-Code
# The label corresponds to the name of the nodeset in CUBIT.
\end_layout

\begin_layout LyX-Code
label = fault
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# We must define the quadrature information for fault cells.
\end_layout

\begin_layout LyX-Code
# The fault cells are 2D (surface).
\end_layout

\begin_layout LyX-Code
quadrature.cell = pylith.feassemble.FIATLagrange
\end_layout

\begin_layout LyX-Code
quadrature.cell.dimension = 2 
\end_layout

\begin_layout Standard
Finally, we use one 
\family typewriter
SimpleDB
\family default
 to define the spatial variation of fault slip, and another SimpleDB to
 define the time at which slip begins (the start time is 0.0 since this is
 a static problem):
\end_layout

\begin_layout LyX-Code
# The slip time and final slip are defined in spatial databases.
 [pylithapp.timedependent.interfaces.fault.eq_srcs.rupture.slip_function]
\end_layout

\begin_layout LyX-Code
slip.iohandler.filename = spatialdb/finalslip.spatialdb
\end_layout

\begin_layout LyX-Code
slip_time.iohandler.filename = spatialdb/sliptime.spatialdb 
\end_layout

\begin_layout Standard
Since the problem now contains a fault, we can request that fault infomation
 is also output:
\end_layout

\begin_layout LyX-Code
# Give basename for VTK fault output.
\end_layout

\begin_layout LyX-Code
[pylithapp.problem.interfaces.fault.output]
\end_layout

\begin_layout LyX-Code
writer.filename = step03/step03-fault.vtk 
\end_layout

\begin_layout Standard
This will result in two extra files being produced.
 The first file (step03-fault_info.vtk) contains information such as the
 normal directions to the fault surface, the applied fault slip, and the
 fault slip times.
 The second file (step03-fault_t0000000.vtk) contains the cumulative fault
 slip for the time step and the change in tractions on the fault surface
 due to the slip.
 When we have run the simulation, the output VTK files will be contained
 in examples/3d/hex8/step03, and the results may be visualized using a tool
 such as ParaView or mayavi2.
 Results using ParaView are shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:step03-displ"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/step03-displ.jpg
	width 10cm

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Displacement field for example step03 visualized using ParaView.
 The mesh has been distorted by the computed displacements (magnified by
 500), and the vectors show the computed displacements.
\begin_inset CommandInset label
LatexCommand label
name "fig:step03-displ"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
