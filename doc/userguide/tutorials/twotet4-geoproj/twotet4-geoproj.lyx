#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\language english
\inputencoding latin1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Tutorial-Two-tet4-geoproj"

\end_inset

Tutorial Using Two Linear Tetrahedra and PyLith Mesh ASCII Format in a Geoprojec
ted Mesh
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This tutorial is virtually identical to the other tutorial using two linear
 tetrahedra (
\begin_inset LatexCommand ref
reference "sec:Tutorial-Two-tet4"

\end_inset

).
 The primary difference is in how the material properties are assigned.
 For this tutorial, we use the SCEC CVM-H database to assign material properties
, as described in 
\begin_inset LatexCommand ref
reference "sub:SCECCVMH-Impl"

\end_inset

.
 Actually using the SCEC SVM-H database is very straightforward, requiring
 only a few modifications to 
\family typewriter
pylithapp.cfg
\family default
.
 Additional changes are required, however, because the database requires
 a geoprojected coordinate system.
 This requires changes to the mesh description, the spatial databases, and
 the 
\family typewriter
pylithapp.cfg
\family default
 files.
 Since all aspects of this problem other than the material database and
 the coordinate system are identical to the examples in 
\begin_inset LatexCommand ref
reference "sec:Tutorial-Two-tet4"

\end_inset

, we only describe the kinematic fault problem in this tutorial.
 Due to the simple geometry of the problem, the mesh may be constructed
 by hand, using PyLith mesh ASCII format to describe the mesh.
 In this tutorial, we will walk through the steps necessary to construct,
 run, and view two problems that use the same mesh.
 In addition to this manual, each of the files for the example problem is
 heavily documented to aid users in understanding the basic file formats.
\end_layout

\begin_layout Subsection
Mesh Description
\end_layout

\begin_layout Standard
The mesh consists of two tetrahedra forming a pyramid shape (Figure 
\begin_inset LatexCommand ref
reference "fig:twotet4-geoproj-mesh"

\end_inset

).
 The mesh geometry and topology is described in the file 
\family typewriter
twotet4.mesh
\family default
, which is in PyLith mesh ASCII format.
 This file format is described in Appendix 
\begin_inset LatexCommand ref
reference "cha:File-Formats"

\end_inset

.
 This file describes the dimensionality of the problem (1D, 2D, or 3D),
 the coordinates of the vertices (nodes), the vertices composing each cell
 (element), the material ID to be associated with each cell, and then provides
 groups of vertices that may be used to define faults or surfaces to which
 boundary conditions may be applied.
 If you compare this mesh against the one used in 
\begin_inset LatexCommand ref
reference "sec:Tutorial-Two-tet4"

\end_inset

, you will notice that, although the mesh topology is the same, the vertex
 coordinates are significantly different.
 That is because the SCEC CVM-H database requires a UTM coordinate system
 in zone 11, using the NAD27 datum.
 If you want to use the SCEC CVM-H database, you will need to put your mesh
 in this coordinate system.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename figs/twotet4-mesh.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Mesh used for the two tetrahedra examples.
\begin_inset LatexCommand label
name "fig:twotet4-geoproj-mesh"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Additional Common Information
\end_layout

\begin_layout Standard
In addition to the mesh, the three example problems share additional information.
 For problems of this type, it is generally useful to create a file named
 
\family typewriter
pylithapp.cfg
\family default
 in the run directory, since this file is read automatically every time
 PyLith is run.
 Settings specific to a particular problem may be placed in other 
\family typewriter
.cfg
\family default
 files, as described later, and then those files are placed on the command
 line.
  The settings contained in 
\family typewriter
pylithapp.cfg
\family default
 for this problem consist of:
\end_layout

\begin_layout Description
pylithapp.journal.info Settings that control the verbosity of the output for
 the different components.
\end_layout

\begin_layout Description
pylithapp.mesh_generator Settings that control mesh importing, such as the
 importer type, the filename, and the spatial dimension of the mesh.
 These setting are particularly important for this problem, as they define
 the coordinate system used.
\end_layout

\begin_layout Description
pylithapp.timedependent Settings that control the problem, such as the total
 time, time step size, and spatial dimension.
\end_layout

\begin_layout Description
pylithapp.timedependent.materials Settings that control the material type,
 specify which material IDs are to be associated with a particular material
 type, and define the database (
\family typewriter
SCECCVMH
\family default
) used to obtain material parameters for the mesh.
 The quadrature information is also given.
\end_layout

\begin_layout Description
pylithapp.petsc PETSc settings to use for the problem, such as the preconditioner
 type.
\end_layout

\begin_layout Standard
This problem has some unique aspects compared to the other tutorials.
 First, all of the other tutorials use a Cartesian coordinate system, while
 this one uses a geoprojected coordinate system.
 In addition to using different vertex coordinates, we also define the coordinat
e system in pylithapp.cfg:
\end_layout

\begin_layout LyX-Code
[pylithapp.mesh_generator.importer]
\end_layout

\begin_layout LyX-Code
coordsys = spatialdata.geocoords.CSGeoProj
\end_layout

\begin_layout LyX-Code
filename = twotet4.mesh
\end_layout

\begin_layout LyX-Code
coordsys.space_dim = 3
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
[pylithapp.mesh_generator.importer.coordsys]
\end_layout

\begin_layout LyX-Code
datum_horiz = NAD27
\end_layout

\begin_layout LyX-Code
datum_vert = mean sea level
\end_layout

\begin_layout LyX-Code
ellipsoid = clrk66
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
[pylithapp.mesh_generator.importer.coordsys.projector]
\end_layout

\begin_layout LyX-Code
projection = utm
\end_layout

\begin_layout LyX-Code
proj-options = +zone=11 
\end_layout

\begin_layout Standard
At the top level, we define the type of coordinate system, give the file
 describing the mesh, and give the number of spatial dimensions for the
 coordinate system.
 We then provide the horizontal datum and vertical datum for the coordinate
 system, along with the ellipsoid to be used.
 Finally, we specify a utm projection, and specify zone 11 as the zone to
 be used.
 All of the coordinate transformations in the SpatialData package are perfomed
 using the proj projections library (http://remotesensing.org/proj), and
 additional projection options may be included using the proj-options parameter.
 See the proj documentation for additional information.
\end_layout

\begin_layout Standard
In addition to the usual material information, we must specify that we want
 to use the 
\family typewriter
SCECCVMH
\family default
 database implementation:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.materials.material]
\end_layout

\begin_layout LyX-Code
db = spatialdata.spatialdb.SCECCVMH
\end_layout

\begin_layout LyX-Code
db.data_dir = /home/brad/data/sceccvm-h/vx53/bin
\end_layout

\begin_layout Standard
The first 
\family typewriter
db
\family default
 option defines 
\family typewriter
SCECCVMH
\family default
 as the database to be used.
 The next line defines the location of the 
\family typewriter
vx53
\family default
 executable, and must be changed to the location specified by the user when
 the package is installed.
 The package may be obtained from http://structure.harvard.edu/cvm-h.
\end_layout

\begin_layout Standard
The final difference with the other examples is in the description of the
 spatial databases.
 These must also be defined as geoprojected databases.
 Examining dislocation_slip.spatialdb, we find:
\end_layout

\begin_layout LyX-Code
// We are specifying the data in a projected geographic coordinate system.
\end_layout

\begin_layout LyX-Code
cs-data = geo-projected {
\end_layout

\begin_layout LyX-Code
  to-meters = 1.0
\end_layout

\begin_layout LyX-Code
  ellipsoid = clrk66
\end_layout

\begin_layout LyX-Code
  datum-horiz = NAD27
\end_layout

\begin_layout LyX-Code
  datum-vert = mean sea level
\end_layout

\begin_layout LyX-Code
  projector = projection {
\end_layout

\begin_layout LyX-Code
    projection = utm
\end_layout

\begin_layout LyX-Code
    units = m
\end_layout

\begin_layout LyX-Code
    proj-options = +zone=11
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Note that the description is somewhat more complex than the corresponding
 entry in 
\begin_inset LatexCommand ref
reference "sec:Tutorial-Two-tet4"

\end_inset

:
\end_layout

\begin_layout LyX-Code
// We are specifying the data in a Cartesian coordinate system.
\end_layout

\begin_layout LyX-Code
cs-data = cartesian {
\end_layout

\begin_layout LyX-Code
  // Our units are already in meters, so we can just multiply by one.
\end_layout

\begin_layout LyX-Code
  to-meters = 1.0
\end_layout

\begin_layout LyX-Code
  // We are using a 3D Cartesian coordinate system.
\end_layout

\begin_layout LyX-Code
  space-dim = 3
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Fortunately, it is quite easy to substitute the appropriate lines in an
 existing spatial database file, which is what we have done with this example.
\end_layout

\begin_layout Subsection
Kinematic Fault Slip Example
\end_layout

\begin_layout Standard
This example problem is left lateral fault slip applied between the two
 tetrahedral cells using kinematic cohesive cells.
 Note that we vary the amount of fault slip for each vertex with this example,
 as described in 
\family typewriter
dislocation_slip.spatialdb
\family default
.
 The vertices away from the fault are held fixed in the 
\family typewriter
x
\family default
, 
\family typewriter
y
\family default
, and 
\family typewriter
z
\family default
-directions.
 Parameter settings that override or augment those in 
\family typewriter
pylithapp.cfg
\family default
 are contained in the file 
\family typewriter
dislocation.cfg
\family default
.
 These settings are:
\end_layout

\begin_layout Description
pylithapp.journal.info Turns on journaling for 2D quadrature (used for 3D
 faults) and for cohesive kinematic faults.
\end_layout

\begin_layout Description
pylithapp.timedependent Specifies an implicit formulation for the problem,
 the array of boundary conditions, and the array of interfaces.
\end_layout

\begin_layout Description
pylithapp.timedependent.bc.bc Defines which degrees of freedom are being constraine
d (
\family typewriter
x
\family default
, 
\family typewriter
y
\family default
, and 
\family typewriter
z
\family default
), gives the label (defined in 
\family typewriter
twotet4.mesh
\family default
) defining the points desired, and assigns a label to the boundary condition
 set.
 In this case, rather than specifying a spatial database file to define
 the boundary conditions, the default for Dirichlet BC is used, which sets
 the displacements to zero for all time.
\end_layout

\begin_layout Description
pylithapp.timedependent.interfaces Gives the label (defined in 
\family typewriter
twotet4.mesh
\family default
) defining the points on the fault, provides quadrature information, and
 then gives database names for material properties (needed for conditioning),
 fault slip, fault slip rate, and fault slip time.
\end_layout

\begin_layout Description
pylithapp.problem.formulation.output.output.writer Gives the base filename for
 VTK output (
\family typewriter
dislocation.vtk
\family default
).
\end_layout

\begin_layout Description
pylithapp.timedependent.interfaces.fault.output.writer Gives the base filename
 for cohesive cell output files (
\family typewriter
dislocation-fault.vtk
\family default
).
\end_layout

\begin_layout Description
pylithapp.timedependent.materials.material.output Gives the base filename for
 state variable output files (
\family typewriter
dislocation-statevars.vtk
\family default
).
\end_layout

\begin_layout Standard
Rather than specifying the displacement boundary conditions in a spatial
 database file, we use the default behavior for Dirichlet boundary conditions,
 which is a uniform displacement of zero applied at all times.
 There is one part of the fault examples that is slightly different from
 the other examples.
 Since the material properties are being defined using the SCEC CVM-H database,
 this same database should be used to condition the equations associated
 with the fault.
 We do this as follows:
\end_layout

\begin_layout LyX-Code
[pylithapp.timedependent.interfaces.fault]
\end_layout

\begin_layout LyX-Code
mat_db = spatialdata.spatialdb.SCECCVMH
\end_layout

\begin_layout LyX-Code
mat_db.data_dir = /home/brad/data/sceccvm-h/vx53/bin
\end_layout

\begin_layout Standard
This specifies the 
\family typewriter
SCECCVMH
\family default
 implementation for the material database, and again provides the location
 of the 
\family typewriter
vx53
\family default
 binary.
\end_layout

\begin_layout Standard
The fault example requires three additional database files that were not
 needed for the simple displacement examples.
 The first file (
\family typewriter
dislocation_slip.spatialdb
\family default
) specifies 0.01 m of left-lateral fault slip for the entire fault.
 Since we specify a different amount of slip for every vertex on the fault,
 the data dimension is one.
 It is also necessary to specify the slip rate, which is done in the file
 
\family typewriter
dislocation_sliprate.spatialdb
\family default
.
 The slip rate of 1.0e6 m/s is essentially instantaneous.
 Finally, we must provide the time at which slip begins.
 The elastic solution begins at 
\begin_inset Formula $t=-dt$
\end_inset

, so this is the value given (
\begin_inset Formula $t=-1\sec$
\end_inset

) in 
\family typewriter
dislocation_sliptime.spatialdb
\family default
.
\end_layout

\begin_layout Standard
The files containing common information (
\family typewriter
twotet4.mesh
\family default
, 
\family typewriter
pylithapp.cfg
\family default
) along with the problem-specific files (
\family typewriter
\size small
dislocation.cfg
\family default
, 
\family typewriter
dislocation_slip.spatialdb
\family default
, 
\family typewriter
dislocation_sliprate.spatialdb
\family default
, 
\family typewriter
dislocation_sliptime.spatialdb
\family default
\size default
) provide a complete description of the problem, and we can then run this
 example by typing
\end_layout

\begin_layout LyX-Code
pylith dislocation.cfg
\end_layout

\begin_layout Standard
Once the problem has run, five files are produced.
 The first file is named 
\family typewriter
dislocation_t0000000.vtk
\family default
.
 The 
\family typewriter
t0000000
\family default
 indicates that the output is for the first (and only) time step, corresponding
 to an elastic solution.
 This file contains mesh information as well as displacement values at the
 mesh vertices.
 The second file is named 
\family typewriter
dislocation-statevars_t0000000.vtk
\family default
.
 This file contains the state variables for each cell.
 The default fields are the total strain and stress fields.
 Since the cells are linear tetrahedra, there is a single quadrature point
 for each cell and thus a single set of stress and strain values for each
 cell.
 The third file is named 
\family typewriter
dislocation-fault_t0000000.vtk
\family default
.
 This file gives the specified fault slip for each vertex on the fault,
 along with the computed traction change for the cohesive cell.
 The fourth file (
\family typewriter
dislocation-statevars_info.vtk
\family default
) gives the material properties used for the problem.
 Since we have not specified which properties to write, the default properties
 (
\family typewriter
mu
\family default
, 
\family typewriter
lambda
\family default
, 
\family typewriter
density
\family default
) are written.
 The final file (
\family typewriter
dislocation-fault_info.vtk
\family default
) provides information such as the normal direction, final slip, and slip
 time for each vertex on the fault.
 All of the 
\family typewriter
.vtk
\family default
 files may be used with a number of visualization packages.
 If the problem ran correctly, you should be able to generate a figure such
 as 
\begin_inset LatexCommand vref
reference "fig:twotet4-geoproj-disloc"

\end_inset

, which was generated using ParaView.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename figs/dislocation.jpg
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Color contours and vectors of displacement for the kinematic fault example.
\begin_inset LatexCommand label
name "fig:twotet4-geoproj-disloc"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
