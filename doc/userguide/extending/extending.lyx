#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options false
\language english
\inputencoding latin1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Extending"

\end_inset

Extending PyLith
\end_layout

\begin_layout Standard
One of the powerful features of using the Pyre framework in PyLith is the
 ability to extend the functionality of the software without altering any
 of the PyLith code.
 Any of the components can be replaced with other compatible components.
 You are already familiar with this feature from running the examples; when
 you set the spatial database to UniformDB, SimpleDB, or SCECCVMH you are
 switching between different compatible components for a spatial database
 facility.
 In this section we provide examples of how to extend PyLith for components
 that users will most likely want to replace with their own custom versions.
 You will need a familirarity with Python, Makefiles, and C++ to write your
 own components.
 The primary steps in constructing a component to extend PyLith' functionality
 include:
\end_layout

\begin_layout Enumerate
Setting up the sources files for the component or set of components based
 on the templates.
\end_layout

\begin_layout Enumerate
Edit the Python source file (
\family typewriter
.py
\family default
) for the component.
\end_layout

\begin_deeper
\begin_layout Enumerate
Define the user-specified properties and facilities.
\end_layout

\begin_layout Enumerate
Transfer the user-specified data from the Python object to the corresponding
 C++ object via calls to the SWIG interface object.
\end_layout

\end_deeper
\begin_layout Enumerate
Edit the C++ header (
\family typewriter
.hh
\family default
) and implementation files (
\family typewriter
.cc
\family default
) for the component.
\end_layout

\begin_deeper
\begin_layout Enumerate
Implement the methods required to satisfy the interface definition of the
 component.
\end_layout

\begin_layout Enumerate
Implement the desired functionality of the component in C++.
\end_layout

\end_deeper
\begin_layout Enumerate
Edit the SWIG interface files (
\family typewriter
.i
\family default
) that provide the glue between Python and C++.
\end_layout

\begin_layout Enumerate
Edit the Python source file that tests the functionality of the component.
\end_layout

\begin_layout Enumerate
Build, install, and run the tests of the component.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending:SpatialDatabases"

\end_inset

Spatial Databases
\end_layout

\begin_layout Standard
PyLith provides several types of spatial databases that can be used for
 use with specification of parameters for boundary conditions, earthquake
 ruptures, and physical properties.
 In this example (the source files are in the spatialdata package in the
 templates/spatialdb directory) we demonstrate how to provide a spatial
 database for specifying eleastic properties, such as a seismic velocity
 model.
 
\end_layout

\begin_layout Standard
Description of functionality of component (also in README)
\end_layout

\begin_layout Standard
Methods required in C++ object with description of UniformVelModel functionality.
\end_layout

\begin_layout Standard
Methods required in Python object with description of fuctionality in this
 case.
\end_layout

\begin_layout Standard
Description of how to create SWIG interface files.
\end_layout

\begin_layout Standard
Build, install, and run tests.
 (make, make install, make check)
\end_layout

\begin_layout Standard
run twotet4-geoproj to test, how to change settings
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending:BulkConstitutiveModels"

\end_inset

Bulk Constitutive Models
\end_layout

\end_body
\end_document
