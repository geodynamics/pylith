#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 2in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Extending"

\end_inset

Extending PyLith
\end_layout

\begin_layout Standard
One of the powerful features of using the Pyre framework in PyLith is the
 ability to extend the functionality of the software without altering any
 of the PyLith code.
 Any of the components can be replaced with other compatible components.
 You are already familiar with this feature from running the examples; when
 you set the spatial database to UniformDB, SimpleDB, or SCECCVMH you are
 switching between different compatible components for a spatial database
 facility.
 Modifying the governing equations to include other physical processes requires
 changing the data structures associated with the solution and altering
 the PyLith code.
\end_layout

\begin_layout Standard
In this section we provide examples of how to extend PyLith for components
 that users will most likely want to replace with their own custom versions.
 You will need a familiarity with Python, Makefiles, and C++ to write your
 own components.
 The primary steps in constructing a component to extend PyLith's functionality
 include:
\end_layout

\begin_layout Enumerate
Setting up the source files for the component or set of components based
 on the templates.
\end_layout

\begin_layout Enumerate
Edit the Python source file (
\family typewriter
.py
\family default
) for the component.
\end_layout

\begin_deeper
\begin_layout Enumerate
Define the user-specified properties and facilities.
\end_layout

\begin_layout Enumerate
Transfer the user-specified data from the Python object to the corresponding
 C++ object via calls to the SWIG interface object.
\end_layout

\end_deeper
\begin_layout Enumerate
Edit the C++ header (
\family typewriter
.hh
\family default
) and implementation files (
\family typewriter
.cc
\family default
) for the component.
\end_layout

\begin_deeper
\begin_layout Enumerate
Implement the methods required to satisfy the interface definition of the
 component.
\end_layout

\begin_layout Enumerate
Implement the desired functionality of the component in C++.
\end_layout

\end_deeper
\begin_layout Enumerate
Edit the SWIG interface files (
\family typewriter
.i
\family default
) that provide the glue between Python and C++.
\end_layout

\begin_layout Enumerate
Edit the Python source file that tests the functionality of the component.
\end_layout

\begin_layout Enumerate
Run configure, build, install, and run the tests of the component.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending:SpatialDatabases"

\end_inset

Spatial Databases
\end_layout

\begin_layout Standard
PyLith provides several types of spatial databases that can be used for
 specification of parameters associated with boundary conditions, earthquake
 ruptures, and physical properties.
 In this example we demonstrate how to provide a spatial database, UniformVelMod
el, for specifying elastic properties.
 The source files are included in the source for the spatialdata package
 in the 
\family typewriter
templates/spatialdb
\family default
 directory.
 The 
\family typewriter
README
\family default
 file in 
\family typewriter
templates/spatialdb
\family default
 provides detailed instructions for the various steps involved, and the
 source files contain numerous comments to help guide you through the customizat
ion process.
 
\end_layout

\begin_layout Standard
The UniformVelModel component provides uniform physical properties: P-wave
 speed, S-wave speed, and density.
 Although this is a rather trivial specification of physical properties
 that could be easily done using a UniformDB, this example demonstrates
 how to create a user-defined component that matches the requirements of
 a spatial database for elastic physical properties.
 Adding additional physical properties is simply a matter of including some
 additional values in the spatial database.
 Furthermore, in cases where we are constructing a spatial database for
 a seismic velocity model, the data points are georeferenced.
 With our uniform physical properties we do not need to worry about any
 differences in coordinate systems between our seismic velocity model and
 points at which the model is queried.
 However, in many cases we do, so we illustrate this functionality by using
 a geographic projection as the coordinate system in our example.
\end_layout

\begin_layout Standard
Using a top-down approach, the first step is to determine what information
 the user will need to supply to the component.
 Is the data for the spatial database in a file or a series of files? If
 so, file names and possible paths to a directory containing files with
 known names might be necessary.
 Are there other parameters that control the behavior of the component,
 such as a minimum shear wave speed? In our example the user supplies values
 for the P-wave speed, S-wave speed, and density.
 The user-supplied parameters become Pyre properties and facilities in the
 Python source file.
 Because our user supplied parameters are floating point values with dimensions,
 we create dimensional properties 
\family typewriter
vs
\family default
, 
\family typewriter
vp
\family default
, and 
\family typewriter
density
\family default
.
 In addition to defining the properties of the component, we also need to
 transfer these properties to the C++ object that does the real work.
 This is done by calling the C++ 
\family typewriter
vs()
\family default
, 
\family typewriter
vp()
\family default
, and 
\family typewriter
density()
\family default
 accessor functions that are accessible via the Python module created by
 SWIG.
\end_layout

\begin_layout Standard
In the C++ object we must implement the functions that are required by the
 spatial database interface.
 These functions are listed near the beginning of the UniformVelModel class
 definition at the top of the C++ header file, 
\family typewriter
UniformVelModel.hh
\family default
.
 The C++ object also includes the accessor functions that allow us to set
 the P-wave speed, S-wave speed, and density values to the user-specified
 values in the Python object.
 Additional information, such as a file name, parameters defined as data
 structures, etc., would be set via similar accessor functions.
 You can also add additional functions and data structures to the C++ class
 to provide the necessary operations and functionality of the spatial database.
 
\end_layout

\begin_layout Standard
In SimpleDB we use a separate class to read in the spatial database and
 yet another class to perform the actual query.
 In our example, the C++ object also creates and stores the UTM zone 10
 geographic projection for the seismic velocity model.
 When the spatial database gets a query for physical properties, we transform
 the coordinates of the query point from its coordinate system to the coordinate
 system of our seismic velocity model.
\end_layout

\begin_layout Standard
In order to use SWIG to create the Python module that allows us to call
 C++ from Python, we use a ``main'' SWIG interface file (
\family typewriter
\size small
spatialdbcontrib.i
\family default
\size default
 in this case) and then one for each object (
\family typewriter
\size small
UniformVelModel.i
\family default
\size default
 in this case).
 This greatly simplifies keeping the Python module synchronized with the
 C++ and Python code.
 The 
\family typewriter
\size small
UniformVelModel.i
\family default
\size default
 SWIG file is nearly identical to the corresponding C++ header file.
 There are a few differences, as noted in the comments within the file.
 Copying and pasting the C++ header file and then doing a little cleanup
 is a very quick and easy way to construct a SWIG interface file for a C++
 object.
 Because very little changes from SWIG module to SWIG module, it is usually
 easiest to construct the ``main'' SWIG interface by copying and customizing
 an existing one.
\end_layout

\begin_layout Standard
Once the Python, C++, and SWIG interface files are complete, we are ready
 to build the module.
 The 
\family typewriter
Makefile.am
\family default
 file defines how to compile and link the C++ library and generate the Python
 module via SWIG.
 The 
\family typewriter
configure.ac
\family default
 file contains the information used to build a configure script.
 The configure script checks to make sure it can find all of the tools needed
 to build the component (C++ compiler, Python, installed spatial database
 package, etc.).
 See the README file for detailed instructions on how to generate the configure
 script, and build and install the component.
\end_layout

\begin_layout Standard
We recommend constructing tests of the component to insure that it is functionin
g properly before attempting to use it in an application.
 The 
\family typewriter
\size small
tests
\family default
\size default
 directory within 
\family typewriter
\size small
templates/spatialdb
\family default
\size default
 contains a Python script, 
\family typewriter
\size small
testcontrib.py
\family default
\size default
, that runs the tests of the UniformVelModel component defined in 
\family typewriter
\size small
TestUniformVelModel.py
\family default
\size default
.
 Normally, one would want to test each function individually to isolate
 errors and create C++ tests as well as the Python tests included here.
 In our rather simple example, we simply test the overall functionality
 of the component.
 For examples of thorough testing, see the spatialdata and PyLith source
 code.
\end_layout

\begin_layout Standard
Once you have built, installed, and tested the UniformVelModel, it is time
 to use it in a simple example.
 Because the seismic velocity model uses georeferenced coordinates, our
 example must also use georeferenced coordinates.
 The dislocation example in the PyLith 
\family typewriter
examples/twocells/twotet4-geoproj
\family default
 directory uses UTM zone 11 coordinates.
 The spatial database package will transform the coordinates between the
 two projections as defined in the UniformVelModel 
\family typewriter
query()
\family default
 function.
 The dislocation example uses the SCEC CVM-H seismic velocity model.
 In order to replace the SCEC CVM-H seismic velocity with our uniform velocity
 model, in 
\family typewriter
pylithapp.cfg
\family default
 we replace the lines
\end_layout

\begin_layout LyX-Code
db_properties = spatialdata.spatialdb.SCECCVMH
\end_layout

\begin_layout LyX-Code
db_properties.data_dir = /home/brad/data/sceccvm-h/vx53/bin
\end_layout

\begin_layout Standard
with the lines
\end_layout

\begin_layout LyX-Code
db_properties = spatialdata.spatialdb.contrib.UniformVelModel
\end_layout

\begin_layout Standard
When you run the dislocation example, the 
\family typewriter
dislocation-statevars_info.vtk
\family default
 file should reflect the use of physical properties from the uniform seismic
 velocity with 
\begin_inset Formula $\mu=1.69\times10^{10}\mathrm{Pa}$
\end_inset

, 
\begin_inset Formula $\lambda=1.6825\times10^{10}\mathrm{Pa}$
\end_inset

, and 
\begin_inset Formula $\rho=2500\mathrm{kg/m^{3}}$
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending:BulkConstitutiveModels"

\end_inset

Bulk Constitutive Models
\end_layout

\begin_layout Standard
PyLith includes several linearly elastic and inelastic bulk constitutive
 models for 2D and 3D problems.
 In this example, we demonstrate how to extend PyLith by adding your own
 bulk constitutive model.
 We reimplement the 2D plane strain constitutive model while adding the
 current strain and stress tensors as state variables.
 This constitutive model, 
\family typewriter
PlaneStrainState
\family default
, is not particularly useful, but it illustrates the basic steps involved
 in creating a bulk constitutive model with state variables.
 The source files are included with the main PyLith source code in the 
\family typewriter
templates/materials
\family default
 directory.
 The 
\family typewriter
README
\family default
 file in 
\family typewriter
templates/materials
\family default
 provides detailed instructions for the various steps, and the source files
 contain numerous comments to guide you through the customization process.
\end_layout

\begin_layout Standard
In contrast to our previous example of creating a customized spatial database,
 which involved gathering user-specified parameters via the Pyre framework,
 there are no user-defined parameters for bulk constitutive models.
 The specification of the physical properties and state variables associated
 with the constitutive model is handled directly in the C++ code.
 As a result, the Python object for the constitutive model component is
 very simple, and customization is limited to simply changing the names
 of objects and labels.
\end_layout

\begin_layout Standard
The properties and state variables used in the bulk constitutive model are
 set using arguments to the constructor of the C++ 
\family typewriter
ElasticMaterial
\family default
 object.
 We define a number of constants at the top of the C++ file and use the
 
\family typewriter
Metadata
\family default
 object to define the properties and state variables.
 The C++ object for the bulk constitutive component includes a number of
 functions that implement elasticity behavior of a bulk material as well
 as several utility routines:
\end_layout

\begin_layout Description

\family typewriter
_dbToProperties()
\family default
 Computes the physical properties used in the constitutive model equations
 from the physical properties supplied in spatial databases.
\end_layout

\begin_layout Description

\family typewriter
_nondimProperties()
\family default
 Nondimensionalizes the physical properties used in the constitutive model
 equations.
\end_layout

\begin_layout Description

\family typewriter
_dimProperties()
\family default
 Dimensionalizes the physical properties used in the constitutive model
 equations.
\end_layout

\begin_layout Description

\family typewriter
_stableTimeStepImplicit()
\family default
 Computes the stable time step for implicit time stepping in quasi-static
 simulations given the current state (strain, stress, and state variables).
\end_layout

\begin_layout Description

\family typewriter
_calcDensity()
\family default
 Computes the density given the physical properties and state variables.
 In most cases density is a physical property used in the constitutive equations
, so this is a trivial function in those cases.
\end_layout

\begin_layout Description

\family typewriter
_calcStress()
\family default
 Computes the stress tensor given the physical properties, state variables,
 total strain, initial stress, and initial strain.
\end_layout

\begin_layout Description

\family typewriter
_calcElasticConsts()
\family default
 Computes the elastic constants given the physical properties, state variables,
 total strain, initial stress, and initial strain.
\end_layout

\begin_layout Description

\family typewriter
_updateStateVars()
\family default
 Updates the state variables given the physical properties, total strain,
 initial stress, and initial strain.
 If a constitutive model does not use state variables, then this routine
 is omitted.
\end_layout

\begin_layout Standard
Because it is sometimes convenient to supply physical properties for a bulk
 constitutive model that are equivalent but different from the ones that
 appear in the constitutive equations (e.g., P-wave speed, S-wave speed, and
 density rather then Lame's constants 
\begin_inset Formula $\mu,$
\end_inset


\begin_inset Formula $\lambda,$
\end_inset

 and density), each bulk constitutive model component has routines to convert
 the physical property parameters and state variables a user specifies via
 spatial databases to the physical property properties and state variables
 used in the constitutive model equations.
 In quasi-static problems, PyLith computes an elastic solution for the first
 time step (
\begin_inset Formula $-\Delta t$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

).
 This means that for inelastic materials, we supply two sets of functions
 for the constitutive behavior: one set for the initial elastic step and
 one set for the remainder of the simulation.
 See the source code for the inelastic materials in PyLith for an illustration
 of an efficient mechanism for doing this.
\end_layout

\begin_layout Standard
The SWIG interface files for a bulk constitutive component are set up in
 the same manner as in the previous example of creating a customized spatial
 database component.
 The ``main'' SWIG interface file (
\family typewriter
materialscontrib.i
\family default
 in this case) sets up the Python module, and the SWIG interface file for
 the component (
\family typewriter
PlaneStrainState.i
\family default
 in this case) defines the functions that should be included in the Python
 module.
 Note that because the C++ 
\family typewriter
ElasticMaterial
\family default
 object defines a number of pure virtual methods (which merely specify the
 interface for the functions and do not implement default behavior), we
 must include many protected functions in the SWIG interface file.
 If these are omitted, SWIG will give a warning indicating that some of
 the functions remain abstract (i.e., some pure virtual functions defined
 in the parent class 
\family typewriter
ElasticMaterial
\family default
 were not implemented in the child class 
\family typewriter
PlaneStrainState
\family default
), and no constructor is created.
 When this happens, you cannot create a 
\family typewriter
PlaneStrainState
\family default
 Python object.
\end_layout

\begin_layout Standard
Once the Python, C++, and SWIG interface files are complete, you are ready
 to configure and build the C++ library and Python module for the component.
 Edit the 
\family typewriter
Makefile.am
\family default
 file as necessary, then generate the configure script, run 
\family typewriter
configure
\family default
, and then build and install the library and module (see the 
\family typewriter
README
\family default
 file for detailed instructions).
\end_layout

\begin_layout Standard
Because most functionality of the bulk constitutive model component is at
 the C++ level, properly constructed unit tests for the 
\family typewriter
component
\family default
 should include tests for both the C++ code and Python code.
 The C++ unit tests can be quite complex, and it is best to examine those
 used for the bulk constitutive models included with PyLith.
 In this example we create the Python unit tests to verify that we can create
 a 
\family typewriter
PlaneStrainState
\family default
 Python object and call some of the simple underlying C++ functions.
 The source files are in the 
\family typewriter
templates/materials/tests
\family default
 directory.
 The 
\family typewriter
testcontrib.py
\family default
 Python script runs the tests defined in 
\family typewriter
TestPlaneStrainState.py
\family default
.
\end_layout

\begin_layout Standard
Once you have built, installed, and tested the 
\family typewriter
PlaneStrainState
\family default
 component, it is time to use it in a simple example.
 You can try using it in any of the 2D examples.
 For the examples in 
\family typewriter
examples/twocells/twoquad4
\family default
, in 
\family typewriter
pylithapp.cfg
\family default
 replace the line
\end_layout

\begin_layout LyX-Code
material = pylith.materials.ElasticPlaneStrain
\end_layout

\begin_layout Standard
with the line
\end_layout

\begin_layout LyX-Code
material = pylith.materials.contrib.PlaneStrainState
\end_layout

\begin_layout Standard
or simply add the command line argument
\end_layout

\begin_layout LyX-Code

\family typewriter
--timedependent.homogeneous.material=pylith.materials.contrib.PlaneStrainState
\end_layout

\begin_layout Standard
when running any of the 2D examples.
 The output should remain identical, but you should see the 
\family typewriter
PlaneStrainState
\family default
 object listed in the information written to 
\family typewriter
stdout
\family default
.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending:FaultConstitutiveModels"

\end_inset

Fault Constitutive Models
\end_layout

\begin_layout Standard
PyLith includes two of the most widely used fault constitutive models, but
 there are a wide range of models that have been proposed to explain earthquake
 source processes.
 In this example, we demonstrate how to extend PyLith by adding your own
 fault constitutive model.
 We implement a linear viscous fault constitutive model wherein the perturbation
 in the coefficient of friction is linearly proportional to the slip rate.
 This constitutive model, 
\family typewriter
ViscousFriction
\family default
, is not particularly useful, but it illustrates the basic steps involved
 in creating a fault constitutive model.
 The source files are included with the main PyLith source code in the 
\family typewriter
templates/friction
\family default
 directory.
 The 
\family typewriter
README
\family default
 file in 
\family typewriter
templates/friction
\family default
 provides detailed instructions for the various steps, and the source files
 contain numerous comments to guide you through the customization process.
\end_layout

\begin_layout Standard
Similar to our previous example of creating a customized bulk constitutive
 model, the parameters are defined in the C++ code, not in the Pyre framework.
 As a result, the Python object for the fault constitutive model component
 is very simple and customization is limited to simply changing the names
 of objects and labels.
\end_layout

\begin_layout Standard
The properties and state variables used in the fault constitutive model
 are set using arguments to the constructor of the C++ 
\family typewriter
FrictionModel
\family default
 object, analogous to the 
\family typewriter
ElasticMaterial
\family default
 object for bulk constitutive models.
 In fact, both types of constitutive models used the same underlying C++
 object (
\family typewriter
Metadata::ParamDescription
\family default
) to store the description of the parameters and state variables.
 We define a number of constants at the top of the C++ file and use the
 
\family typewriter
Metadata
\family default
 object to define the properties and state variables.
 The C++ object for the fault constitutive component includes a number of
 functions that implement friction as well as several utility routines:
\end_layout

\begin_layout Description

\family typewriter
_dbToProperties()
\family default
 Computes the physical properties used in the constitutive model equations
 from the physical properties supplied in spatial databases.
\end_layout

\begin_layout Description

\family typewriter
_nondimProperties()
\family default
 Nondimensionalizes the physical properties used in the constitutive model
 equations.
\end_layout

\begin_layout Description

\family typewriter
_dimProperties()
\family default
 Dimensionalizes the physical properties used in the constitutive model
 equations.
\end_layout

\begin_layout Description

\family typewriter
_dbToStateVars()
\family default
 Computes the initial state variables used in the constitutive model equations
 from the initial values supplied in spatial databases.
\end_layout

\begin_layout Description

\family typewriter
_nondimStateVars()
\family default
 Nondimensionalizes the state variables used in the constitutive model equations.
\end_layout

\begin_layout Description

\family typewriter
_dimStateVars()
\family default
 Dimensionalizes the state variables used in the constitutive model equations.
\end_layout

\begin_layout Description

\family typewriter
_calcFriction()
\family default
 Computes the friction stress given the physical properties, state variables,
 slip, slip rate, and normal traction.
\end_layout

\begin_layout Description

\family typewriter
_updateStateVars()
\family default
 Updates the state variables given the physical properties, slip, slip rate,
 and normal traction.
\end_layout

\begin_layout Standard
If a constitutive model does not use state variables, then the state variable
 routines are omitted.
 
\end_layout

\begin_layout Standard
Because it is sometimes convenient to supply physical properties for a fault
 constitutive model that are equivalent but different from the ones that
 appear in the constitutive equations, each fault constitutive model component
 has routines to convert the physical property parameters and state variables
 a user specifies via spatial databases to the physical property properties
 and state variables used in the constitutive model equations.
 
\end_layout

\begin_layout Standard
The SWIG interface files for a fault constitutive component are set up in
 the same manner as in the previous examples of creating a bulk constitutive
 model or a customized spatial database component.
 The ``main'' SWIG interface file (
\family typewriter
frictioncontrib.i
\family default
 in this case) sets up the Python module, and the SWIG interface file for
 the component (
\family typewriter
ViscousFriction.i
\family default
 in this case) defines the functions that should be included in the Python
 module.
 Note that because the C++ 
\family typewriter
FrictionModel
\family default
 object defines a number of pure virtual methods (which merely specify the
 interface for the functions and do not implement default behavior), we
 must include many protected functions in the SWIG interface file.
 If these are omitted, SWIG will give a warning indicating that some of
 the functions remain abstract (i.e., some pure virtual functions defined
 in the parent class 
\family typewriter
FrictionModel
\family default
 were not implemented in the child class 
\family typewriter
ViscousFriction
\family default
), and no constructor is created.
 When this happens, you cannot create a 
\family typewriter
ViscousFriction
\family default
 Python object.
\end_layout

\begin_layout Standard
Once the Python, C++, and SWIG interface files are complete, you are ready
 to configure and build the C++ library and Python module for the component.
 Edit the 
\family typewriter
Makefile.am
\family default
 file as necessary, then generate the configure script, run 
\family typewriter
configure
\family default
, and then build and install the library and module (see the 
\family typewriter
README
\family default
 file for detailed instructions).
\end_layout

\begin_layout Standard
Because most functionality of the fault constitutive model component is
 at the C++ level, properly constructed unit tests for the 
\family typewriter
component
\family default
 should include tests for both the C++ code and Python code.
 The C++ unit tests can be quite complex, and it is best to examine those
 used for the fault constitutive models included with PyLith.
 In this example we create the Python unit tests to verify that we can create
 a 
\family typewriter
ViscousFriction
\family default
 Python object and call some of the simple underlying C++ functions.
 The source files are in the 
\family typewriter
templates/friction/tests
\family default
 directory.
 The 
\family typewriter
testcontrib.py
\family default
 Python script runs the tests defined in 
\family typewriter
TestViscousFriction.py
\family default
.
\end_layout

\begin_layout Standard
Once you have built, installed, and tested the 
\family typewriter
ViscousFriction
\family default
 component, it is time to use it in a simple example.
 You can try using it in any of the 2D or 3D examples.
 For the examples in 
\family typewriter
examples/bar_shearwave/quad4,
\family default
 in 
\family typewriter
shearwave_staticfriction.cfg
\family default
 replace the line
\end_layout

\begin_layout LyX-Code
friction = pylith.friction.StaticFriction
\end_layout

\begin_layout Standard
with the line
\end_layout

\begin_layout LyX-Code
friction = pylith.friction.contrib.ViscousFriction
\end_layout

\begin_layout Standard
or simply add the command line argument
\end_layout

\begin_layout LyX-Code

\family typewriter
--timedependent.interfaces.fault.friction=pylith.friction.contrib.ViscousFriction
\end_layout

\begin_layout Standard
when running any of the friction examples.
 You will also need to supply a corresponding spatial database with the
 physical properties for the viscous friction constitutive model.
\end_layout

\end_body
\end_document
