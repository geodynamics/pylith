# -*- Pyrex -*-
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include <Mesh.hh>

#include <stdexcept>
#include <Python.h>
#include <assert.h>
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
  ctypedef unsigned long size_t
  void* malloc(size_t size)
  void free(void* mem)

cdef void MeshPtr_destructor(void* obj):
  """
  Destroy Petsc Mesh.
  """
  #embed{ void MeshPtr_destructor_cpp(void* pObj)
  ALE::Obj<ALE::Mesh>* pMesh = (ALE::Obj<ALE::Mesh>*) pObj;
  delete pMesh;
  #}embed
  MeshPtr_destructor_cpp(obj)
  return

# ----------------------------------------------------------------------
cdef class Mesh:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* MeshPtr_constructor()
    void* result = 0;
    try {
      result = (void*)(new ALE::Obj<ALE::Mesh>);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    self.thisptr = MeshPtr_constructor()
    self.handle = self._createHandle()
    self.name = "pylith_topology_Mesh"
    return


  def getRealSection(self, label):
    """
    Get real section from mesh.
    """
    # create shim for getRealSection
    #embed{ void* Mesh_getRealSection(void* pObj, char* label)
    typedef ALE::Mesh::real_section_type real_section_type;
    
    void* result = 0;
    try {
      ALE::Obj<ALE::Mesh>* mesh = (ALE::Obj<ALE::Mesh>*) pObj;
      assert(0 != mesh);
      const ALE::Obj<real_section_type>& section =
        (*mesh)->getRealSection(label);
      assert(!section.isNull());
      result = (void*) &section;
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed
    cdef void* ptr
    ptr = Mesh_getRealSection(self.thisptr, label)
    return PyCObject_FromVoidPtr(ptr, NULL)
    

  def createRealSection(self, label, fiberDim):
    """
    Create real section in mesh.
    """
    # create shim for createRealSection
    #embed{ void* Mesh_createRealSection(void* pObj, char* label, int fiberDim)
    typedef ALE::Mesh::real_section_type real_section_type;
    
    void* result = 0;
    try {
      ALE::Obj<ALE::Mesh>* mesh = (ALE::Obj<ALE::Mesh>*) pObj;
      assert(0 != mesh);
      const ALE::Obj<real_section_type>& section =
        (*mesh)->getRealSection(label);
      assert(!section.isNull());
      const ALE::Mesh::topology_type::patch_type patch = 0;      
      section->setFiberDimensionByDepth(patch, 0, fiberDim);
      section->allocate();
      result = (void*) &section;
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed
    cdef void* ptr
    ptr = Mesh_createRealSection(self.thisptr, label, fiberDim)
    return PyCObject_FromVoidPtr(ptr, NULL)
    

  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, MeshPtr_destructor)


def zeroRealSection(section):
  """
  Zero real section.
  """
  # create shim for zero section
  #embed{ void* Section_zero(void* pObj)
  typedef ALE::Mesh::real_section_type real_section_type;
  
  try {
    ALE::Obj<real_section_type>* section =
      (ALE::Obj<real_section_type>*) pObj;
    assert(!section->isNull());
    const ALE::Mesh::topology_type::patch_type patch = 0;      
    (*section)->zero(patch);
  } catch (const std::exception& err) {
    PyErr_SetString(PyExc_RuntimeError,
                    const_cast<char*>(err.what()));
  } catch (...) {
    PyErr_SetString(PyExc_RuntimeError,
                    "Caught unknown C++ exception.");
  } // try/catch
  #}embed
  cdef void* ptr
  ptr = PyCObject_AsVoidPtr(section)
  Section_zero(ptr)
  return
    



# End of file 
