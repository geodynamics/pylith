# -*- Pyrex -*-
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "pylith/faults/Fault.hh"
#include "pylith/faults/FaultCohesive.hh"
#include "pylith/faults/FaultCohesiveKin.hh"
#include "pylith/faults/EqKinSrc.hh"
#include "pylith/faults/SlipTimeFn.hh"
#include "pylith/faults/BruneSlipFn.hh"
#include "pylith/faults/LiuCosSlipFn.hh"
#include "pylith/faults/ConstRateSlipFn.hh"
#include "pylith/faults/StepSlipFn.hh"

#include "pylith/utils/array.hh"

#include <assert.h>
#include <stdexcept>
#include <Python.h>
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
  ctypedef unsigned long size_t
  void* malloc(size_t size)
  void free(void* mem)
  void strcpy(char*, char*)

# ----------------------------------------------------------------------
cdef void Fault_destructor(void* obj):
  """
  Destroy Fault object.
  """
  # create shim for destructor
  #embed{ void Fault_destructor_cpp(void* objVptr)
  pylith::faults::Fault* pM = (pylith::faults::Fault*) objVptr;
  delete pM;
  #}embed
  Fault_destructor_cpp(obj)
  return

cdef class Fault:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    self.handle = None
    self.thisptr = NULL
    self.name = "pylith_faults_Fault"
    return


  def adjustTopology(self, mesh):
    """
    Adjust mesh topology for fault implementation.
    """
    # create shim for method 'adjustTopology'
    #embed{ void Fault_adjustTopology(void* objVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      ALE::Obj<pylith::Mesh>* mesh = (ALE::Obj<pylith::Mesh>*) meshVptr;
      ((pylith::faults::Fault*) objVptr)->adjustTopology(*mesh);
    } catch (const std::exception& err) {
    PyErr_SetString(PyExc_RuntimeError,
                    const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
    PyErr_SetString(PyExc_RuntimeError,
                    "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    Fault_adjustTopology(self.thisptr, ptrFromHandle(mesh))
    return


  def initialize(self, mesh, cs, upDir, normalDir, matDB):
    """
    Initialize fault.
    """
    # create shim for method 'initialize'
    #embed{ void Fault_initialize(void* objVptr, void* meshVptr, void* csVptr, double* upDirPtr, double* normalDirPtr, void* dbVptr)
    try {
      assert(0 != objVptr);
      assert(0 != meshVptr);
      assert(0 != csVptr);
      assert(0 != dbVptr);
      ALE::Obj<pylith::Mesh>* mesh = (ALE::Obj<pylith::Mesh>*) meshVptr;
      spatialdata::geocoords::CoordSys* cs =
        (spatialdata::geocoords::CoordSys*) csVptr;
      spatialdata::spatialdb::SpatialDB* matDB =
        (spatialdata::spatialdb::SpatialDB*) dbVptr;
      pylith::double_array upDir(3);
      upDir[0] = upDirPtr[0];
      upDir[1] = upDirPtr[1];
      upDir[2] = upDirPtr[2];
      pylith::double_array normalDir(3);
      normalDir[0] = normalDirPtr[0];
      normalDir[1] = normalDirPtr[1];
      normalDir[2] = normalDirPtr[2];
      ((pylith::faults::Fault*) objVptr)->initialize(*mesh, cs, upDir, normalDir, matDB);
      } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch      
    #}embed

    if not mesh.name == "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type " \
            "'pylith::topology::Mesh'."
    if not cs.name == "spatialdata_geocoords_CoordSys":
      raise TypeError, \
            "Argument 'cs' must be extension module type " \
            "'spatialdata::geocoords::CoordSys'."
    if 3 != len(upDir):
      raise TypeError, \
            "Argument 'upDir' must be a 3 vector (list)."
    if 3 != len(normalDir):
      raise TypeError, \
            "Argument 'normalDir' must be a 3 vector (list)."
    if not matDB.name == "spatialdata_spatialdb_SpatialDB":
      raise TypeError, \
            "Argument 'matDB' must be extension module type " \
            "'spatialdata::spatialdb::SpatialDB'."
    cdef double upDirCpp[3]
    upDirCpp[0] = upDir[0]
    upDirCpp[1] = upDir[1]
    upDirCpp[2] = upDir[2]
    cdef double normalDirCpp[3]
    normalDirCpp[0] = normalDir[0]
    normalDirCpp[1] = normalDir[1]
    normalDirCpp[2] = normalDir[2]
    Fault_initialize(self.thisptr, ptrFromHandle(mesh), ptrFromHandle(cs),
                     upDirCpp, normalDirCpp, ptrFromHandle(matDB))
    return


  def faultMesh(self, mesh):
    """
    Get mesh associated with fault fields.
    """
    # create shim for method 'faultMesh'
    #embed{ void Fault_faultMesh(void* objVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      assert(0 != meshVptr);
      ALE::Obj<pylith::SubMesh>* mesh = (ALE::Obj<pylith::SubMesh>*) meshVptr;
      *mesh = ((pylith::faults::Fault*) objVptr)->faultMesh();
      } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch      
    #}embed

    if not mesh.name == "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type " \
            "'pylith::topology::Mesh'."
    Fault_faultMesh(self.thisptr, ptrFromHandle(mesh))
    return
    

  def vertexField(self, name, mesh, fields=None):
    """
    Get vertex field.
    """
    # create shim for method 'vertexField'
    #embed{ void* Fault_vertexField(void* objVptr, int* fieldPtr, char* name, void* meshVptr, void* fieldsVptr)
    void* result = 0;
    try {
      assert(0 != objVptr);
      assert(0 != fieldPtr);
      assert(0 != name);
      assert(0 != meshVptr);
      pylith::faults::Fault* fault = (pylith::faults::Fault*) objVptr;
      ALE::Obj<pylith::Mesh>* mesh = (ALE::Obj<pylith::Mesh>*) meshVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      pylith::VectorFieldEnum fieldType;
      const ALE::Obj<pylith::real_section_type>& field =
        fault->vertexField(&fieldType, name, *mesh, fields);
      *fieldPtr = fieldType;
      result = (void*) &field;
      } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed
    if not mesh.name == "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type " \
            "'pylith::topology::Mesh'."
    if None != fields:
      if not fields.name == "pylith_topology_FieldsManager":
        raise TypeError, \
              "Argument 'fields' must be extension module type " \
              "'pylith::topology::FieldsManager'."
    cdef void* ptr
    cdef int fieldType
    fieldType = 3
    if None != fields:
      ptr = Fault_vertexField(self.thisptr, &fieldType, name,
                              ptrFromHandle(mesh), ptrFromHandle(fields))
    else:
      ptr = Fault_vertexField(self.thisptr, &fieldType, name,
                              ptrFromHandle(mesh), NULL)
    return (PyCObject_FromVoidPtr(ptr, NULL), fieldType)
    

  def cellField(self, name, mesh, fields=None):
    """
    Get cell field.
    """
    # create shim for method 'cellField'
    #embed{ void* Fault_cellField(void* objVptr, int* fieldPtr, char* name, void* meshVptr, void* fieldsVptr)
    void* result = 0;
    try {
      assert(0 != objVptr);
      assert(0 != fieldPtr);
      assert(0 != name);
      assert(0 != meshVptr);
      pylith::faults::Fault* fault = (pylith::faults::Fault*) objVptr;
      ALE::Obj<pylith::Mesh>* mesh = (ALE::Obj<pylith::Mesh>*) meshVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      pylith::VectorFieldEnum fieldType;
      const ALE::Obj<pylith::real_section_type>& field =
        fault->cellField(&fieldType, name, *mesh, fields);
      *fieldPtr = fieldType;
      result = (void*) &field;
      } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed
    if not mesh.name == "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type " \
            "'pylith::topology::Mesh'."
    if None != fields:
      if not fields.name == "pylith_topology_FieldsManager":
        raise TypeError, \
              "Argument 'fields' must be extension module type " \
              "'pylith::topology::FieldsManager'."
    cdef void* ptr
    cdef int fieldType
    if None != fields:
      ptr = Fault_cellField(self.thisptr, &fieldType, name,
                            ptrFromHandle(mesh), ptrFromHandle(fields))
    else:
      ptr = Fault_cellField(self.thisptr, &fieldType, name,
                            ptrFromHandle(mesh), NULL)
    return (PyCObject_FromVoidPtr(ptr, NULL), fieldType)
    

  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, Fault_destructor)


  property id:
    def __set__(self, value):
      """
      Set identifier of material.
      """
      # create shim for method 'id'
      #embed{ void Fault_id_set(void* objVptr, int value)
      try {
        assert(0 != objVptr);
        ((pylith::faults::Fault*) objVptr)->id(value);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
        } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      Fault_id_set(self.thisptr, value)

    def __get__(self):
      """
      Get identifier of material.
      """
      # create shim for method 'id'
      #embed{ int Fault_id_get(void* objVptr)
      int result = 0;
      try {
        assert(0 != objVptr);
        result = ((pylith::faults::Fault*) objVptr)->id();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
        } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return result;
      #}embed
      return Fault_id_get(self.thisptr)


  property label:
    def __set__(self, value):
      """
      Set label of material.
      """
      # create shim for method 'label'
      #embed{ void Fault_label_set(void* objVptr, char* value)
      try {
        assert(0 != objVptr);
        ((pylith::faults::Fault*) objVptr)->label(value);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      Fault_label_set(self.thisptr, value)


# ----------------------------------------------------------------------
cdef class FaultCohesive(Fault):

  def __init__(self):
    """
    Constructor.
    """
    Fault.__init__(self)
    return

  property useFaultMesh:
    def __set__(self, flag):
      """
      Set use fault mesh flag.
      """
      # create shim for method 'useFaultMesh'
      #embed{ void FaultCohesiveKin_useFaultMesh_set(void* objVptr, int flag)
      try {
        assert(0 != objVptr);
        ((pylith::faults::FaultCohesiveKin*) objVptr)->useFaultMesh(flag);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      FaultCohesiveKin_useFaultMesh_set(self.thisptr, flag)


  property faultMeshFilename: # TEMPORARY
    def __set__(self, filename):
      """
      Set filename for fault mesh UCD file.
      """
      # create shim for method 'faultMeshFilename'
      #embed{ void FaultCohesiveKin_faultMeshFilename_set(void* objVptr, char* filename)
      try {
        assert(0 != objVptr);
        ((pylith::faults::FaultCohesiveKin*) objVptr)->faultMeshFilename(filename);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      FaultCohesiveKin_faultMeshFilename_set(self.thisptr, filename)


# ----------------------------------------------------------------------
cdef class FaultCohesiveKin(FaultCohesive):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* FaultCohesiveKin_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::FaultCohesiveKin);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    FaultCohesive.__init__(self)
    self.thisptr = FaultCohesiveKin_constructor()
    self.handle = self._createHandle()
    return


  def integrateResidual(self, residual, t, fields, mesh, cs):
    """
    Integrate contributions to residual term (r) for operator.
    """
    # create shim for method 'integrateResidual'
    #embed{ void FaultCohesiveKin_integrateResidual(void* objVptr, void* residualVptr, double t, void* fieldsVptr, void* meshVptr, void* csVptr)
    try {
      assert(0 != objVptr);
      assert(0 != residualVptr);
      assert(0 != fieldsVptr);
      assert(0 != meshVptr);
      assert(0 != csVptr);
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      ALE::Obj<pylith::real_section_type>* residual =
        (ALE::Obj<pylith::real_section_type>*) residualVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      spatialdata::geocoords::CoordSys* cs =
        (spatialdata::geocoords::CoordSys*) csVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->integrateResidual(*residual,
                                                              t, fields, *mesh, cs);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument must be extension module type 'Mesh'."
    FaultCohesiveKin_integrateResidual(self.thisptr, 
                                       PyCObject_AsVoidPtr(residual),
                                       t,
                                       ptrFromHandle(fields),
                                       ptrFromHandle(mesh),
				       ptrFromHandle(cs))
    return


  def integrateJacobian(self, mat, t, fields, mesh):
    """
    Compute contributions to Jacobian matrix (A) associated with operator.
    """
    # create shim for method 'integrateJacobian'
    #embed{ void FaultCohesiveKin_integrateJacobian(void* objVptr, void* matVptr, double t, void* fieldsVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      assert(0 != matVptr);
      assert(0 != fieldsVptr);
      assert(0 != meshVptr);
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      PetscMat* mat = (PetscMat*) matVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->integrateJacobian(
                                                        mat, t, fields, *mesh);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type 'Mesh'."
    FaultCohesiveKin_integrateJacobian(self.thisptr,
                                       PyCObject_AsVoidPtr(mat),
                                       t, 
                                       ptrFromHandle(fields),
                                       ptrFromHandle(mesh))
    return


  def integrateResidualAssembled(self, residual, t, fields, mesh, cs):
    """
    Integrate contributions to residual term (r) for operator that do
    not require assembly over cells, vertices, or processors.
    """
    # create shim for method 'integrateResidualAssembled'
    #embed{ void FaultCohesiveKin_integrateResidualAssembled(void* objVptr, void* residualVptr, double t, void* fieldsVptr, void* meshVptr, void* csVptr)
    try {
      assert(0 != objVptr);
      assert(0 != residualVptr);
      assert(0 != fieldsVptr);
      assert(0 != meshVptr);
      assert(0 != csVptr);
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      ALE::Obj<pylith::real_section_type>* residual =
        (ALE::Obj<pylith::real_section_type>*) residualVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      spatialdata::geocoords::CoordSys* cs =
        (spatialdata::geocoords::CoordSys*) csVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->integrateResidualAssembled(*residual,
                                                              t, fields, *mesh, cs);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument must be extension module type 'Mesh'."
    FaultCohesiveKin_integrateResidualAssembled(self.thisptr, 
                                       PyCObject_AsVoidPtr(residual),
                                       t,
                                       ptrFromHandle(fields),
                                       ptrFromHandle(mesh),
				       ptrFromHandle(cs))
    return


  def integrateJacobianAssembled(self, mat, t, fields, mesh):
    """
    Compute contributions to Jacobian matrix (A) associated with
    operator that do not require assembly over cells, vertices, or
    processors.
    """
    # create shim for method 'integrateJacobianAssembled'
    #embed{ void FaultCohesiveKin_integrateJacobianAssembled(void* objVptr, void* matVptr, double t, void* fieldsVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      assert(0 != matVptr);
      assert(0 != fieldsVptr);
      assert(0 != meshVptr);
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      PetscMat* mat = (PetscMat*) matVptr;
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->integrateJacobianAssembled(
                                                        mat, t, fields, *mesh);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type 'Mesh'."
    FaultCohesiveKin_integrateJacobianAssembled(self.thisptr,
                                                PyCObject_AsVoidPtr(mat),
                                                t, 
                                                ptrFromHandle(fields),
                                                ptrFromHandle(mesh))
    return


  def updateState(self, t, fields, mesh):
    """
    Update state variables as needed.
    """
    # create shim for method 'updateState'
    #embed{ void FaultCohesiveKin_updateState(void* objVptr, double t, void* fieldsVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      assert(0 != fieldsVptr);
      assert(0 != meshVptr);
      pylith::topology::FieldsManager* fields =
        (pylith::topology::FieldsManager*) fieldsVptr;
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->updateState(t, fields, *mesh);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if fields.name != "pylith_topology_FieldsManager":
      raise TypeError, \
            "Argument 'fields' must be extension module type 'FieldsManager'."
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type 'Mesh'."
    FaultCohesiveKin_updateState(self.thisptr,
                                 t,
                                 ptrFromHandle(fields),
                                 ptrFromHandle(mesh))
    return


  def verifyConfiguration(self, mesh):
    """
    Verify compatibility of configuration settings.
    """
    # create shim for method 'verifyConfiguration'
    #embed{ void FaultCohesiveKin_verifyConfiguration(void* objVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      assert(0 != meshVptr);
      ALE::Obj<pylith::Mesh>* mesh =
        (ALE::Obj<pylith::Mesh>*) meshVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->verifyConfiguration(*mesh);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    if mesh.name != "pylith_topology_Mesh":
      raise TypeError, \
            "Argument 'mesh' must be extension module type 'Mesh'."
    FaultCohesiveKin_verifyConfiguration(self.thisptr,
                                   ptrFromHandle(mesh))
    return


  def eqsrcs(self, names, srcs):
    """
    Set quadrature.
    """
    # create shim for method 'eqsrc'
    #embed{ void FaultCohesiveKin_eqsrcs_set(void* objVptr, char** names, void** srcsVptr, int nsrcs)
    try {
      assert(0 != objVptr);
      pylith::faults::EqKinSrc** eqsrcs =
        (pylith::faults::EqKinSrc**) srcsVptr;
      ((pylith::faults::FaultCohesiveKin*) objVptr)->eqsrcs(
      const_cast<const char**>(names), eqsrcs, nsrcs);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    cdef char** namesArray
    cdef void** srcsArray
    namesArray = NULL
    srcsArray = NULL
    nsrcs = len(srcs)
    if len(names) != nsrcs:
      raise ValueError("Lengths of arrays 'names' and 'srcs' must match.")
    if nsrcs > 0:
      namesArray = <char**> malloc(nsrcs*sizeof(char*))
      srcsArray = <void**> malloc(nsrcs*sizeof(void*))
    for i from 0 <= i < nsrcs:
      strsize = len(names[i])
      namesArray[i] = <char*> malloc(1+strsize*sizeof(char))
      tmp = names[i] # KLUDGE??
      strcpy(namesArray[i], tmp)
      
      if not srcs[i].cppHandle.name == "pylith_faults_EqKinSrc":
        raise TypeError, \
          "Argument srcs must be an array of extension module type 'EqKinSrc'."
      srcsArray[i] = ptrFromHandle(srcs[i].cppHandle)
    FaultCohesiveKin_eqsrcs_set(self.thisptr, namesArray, srcsArray, nsrcs)

    for i from 0 <= i < nsrcs:
      free(<void*> namesArray[i])
    free(<void*> namesArray)
    free(srcsArray)
    return


  property quadrature:
    def __set__(self, q):
      """
      Set quadrature.
      """
      # create shim for method 'quadrature'
      #embed{ void FaultCohesiveKin_quadrature_set(void* objVptr, void* qVptr)
      try {
        assert(0 != objVptr);
        pylith::feassemble::Quadrature* quadrature =
          (pylith::feassemble::Quadrature*) qVptr;
        ((pylith::faults::FaultCohesiveKin*) objVptr)->quadrature(quadrature);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not q.name == "pylith_feassemble_Quadrature":
        raise TypeError, \
              "Argument must be extension module type 'Quadrature'."
      FaultCohesiveKin_quadrature_set(self.thisptr, ptrFromHandle(q))


  property timeStep:
    def __set__(self, dt):
      """
      Set timeStep.
      """
      # create shim for method 'timeStep'
      #embed{ void FaultCohesiveKin_timeStep_set(void* objVptr, double dt)
      try {
        assert(0 != objVptr);
        ((pylith::faults::FaultCohesiveKin*) objVptr)->timeStep(dt);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      FaultCohesiveKin_timeStep_set(self.thisptr, dt)


  property stableTimeStep:
    def __get__(self):
      """
      Get stable time step.
      """
      # create shim for method 'stableTimeStep'
      #embed{ double FaultCohesiveKin_stableTimeStep_get(void* objVptr)
      double result = 0.0;
      try {
        assert(0 != objVptr);
        result =
          ((pylith::faults::FaultCohesiveKin*) objVptr)->stableTimeStep();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return result;
      #}embed
      return FaultCohesiveKin_stableTimeStep_get(self.thisptr)


  property needNewJacobian:
    def __get__(self):
      """
      Set timeStep.
      """
      # create shim for method 'needNewJacobian'
      #embed{ int FaultCohesiveKin_needNewJacobian_get(void* objVptr)
      int result = 0;
      try {
        assert(0 != objVptr);
        result =
          ((pylith::faults::FaultCohesiveKin*) objVptr)->needNewJacobian();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return result;
      #}embed
      return FaultCohesiveKin_needNewJacobian_get(self.thisptr)


  property useSolnIncr:
    def __set__(self, flag):
      """
      Set timeStep.
      """
      # create shim for method 'useSolnIncr'
      #embed{ void FaultCohesiveKin_useSolnIncr_set(void* objVptr, int flag)
      try {
        assert(0 != objVptr);
        ((pylith::faults::FaultCohesiveKin*) objVptr)->useSolnIncr(flag);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      FaultCohesiveKin_useSolnIncr_set(self.thisptr, flag)


# ----------------------------------------------------------------------
cdef void EqKinSrc_destructor(void* obj):
  """
  Destroy EqKinSrc object.
  """
  # create shim for destructor
  #embed{ void EqKinSrc_destructor_cpp(void* objVptr)
  pylith::faults::EqKinSrc* src = (pylith::faults::EqKinSrc*) objVptr;
  delete src;
  #}embed
  EqKinSrc_destructor_cpp(obj)
  return


cdef class EqKinSrc:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* EqKinSrc_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::EqKinSrc);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    self.name = "pylith_faults_EqKinSrc"
    self.thisptr = EqKinSrc_constructor()
    self.handle = self._createHandle()
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, EqKinSrc_destructor)


  property originTime:
    def __set__(self, value):
      """
      Set origin time for earthquake rupture.
      """
      # create shim for method 'originTime'
      #embed{ void EqKinSrc_originTime_set(void* objVptr, double value)
      try {
        assert(0 != objVptr);
        ((pylith::faults::EqKinSrc*) objVptr)->originTime(value);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      EqKinSrc_originTime_set(self.thisptr, value)


  property slipfn:
    def __set__(self, value):
      """
      Set slip time function.
      """
      # create shim for method 'slipfn'
      #embed{ void EqKinSrc_slipfn_set(void* objVptr, void* fnVptr)
      try {
        assert(0 != objVptr);
        assert(0 != fnVptr);
        pylith::faults::SlipTimeFn* fn =
          (pylith::faults::SlipTimeFn*) fnVptr;
        ((pylith::faults::EqKinSrc*) objVptr)->slipfn(fn);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "pylith_faults_SlipTimeFn":
        raise TypeError, \
              "Argument must be extension module type " \
              "'pylith_faults_SlipTimeFn'."
      EqKinSrc_slipfn_set(self.thisptr, ptrFromHandle(value))


# ----------------------------------------------------------------------
cdef void SlipTimeFn_destructor(void* obj):
  """
  Destroy SlipTimeFn object.
  """
  # create shim for destructor
  #embed{ void SlipTimeFn_destructor_cpp(void* objVptr)
  pylith::faults::SlipTimeFn* f = (pylith::faults::SlipTimeFn*) objVptr;
  delete f;
  #}embed
  SlipTimeFn_destructor_cpp(obj)
  return


cdef class SlipTimeFn:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    self.handle = None
    self.thisptr = NULL
    self.name = "pylith_faults_SlipTimeFn"
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, SlipTimeFn_destructor)


# ----------------------------------------------------------------------
cdef class BruneSlipFn(SlipTimeFn):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* BruneSlipFn_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::BruneSlipFn);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    SlipTimeFn.__init__(self)
    self.thisptr = BruneSlipFn_constructor()
    self.handle = self._createHandle()
    return


  property dbFinalSlip:
    def __set__(self, value):
      """
      Set database for final slip.
      """
      # create shim for method 'dbFinalSlip'
      #embed{ void BruneSlipFn_dbFinalSlip_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbFinalSlip(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbFinalSlip_set(self.thisptr, ptrFromHandle(value))


  property dbSlipTime:
    def __set__(self, value):
      """
      Set database for slip initiation time.
      """
      # create shim for method 'dbSlipTime'
      #embed{ void BruneSlipFn_dbSlipTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbSlipTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbSlipTime_set(self.thisptr, ptrFromHandle(value))


  property dbPeakRate:
    def __set__(self, value):
      """
      Set database for peak slip rate.
      """
      # create shim for method 'dbPeakRate'
      #embed{ void BruneSlipFn_dbPeakRate_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbPeakRate(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbPeakRate_set(self.thisptr, ptrFromHandle(value))


# ----------------------------------------------------------------------
cdef class LiuCosSlipFn(SlipTimeFn):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* LiuCosSlipFn_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::LiuCosSlipFn);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    SlipTimeFn.__init__(self)
    self.thisptr = LiuCosSlipFn_constructor()
    self.handle = self._createHandle()
    return


  property dbFinalSlip:
    def __set__(self, value):
      """
      Set database for final slip.
      """
      # create shim for method 'dbFinalSlip'
      #embed{ void LiuCosSlipFn_dbFinalSlip_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::LiuCosSlipFn*) objVptr)->dbFinalSlip(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      LiuCosSlipFn_dbFinalSlip_set(self.thisptr, ptrFromHandle(value))


  property dbSlipTime:
    def __set__(self, value):
      """
      Set database for slip initiation time.
      """
      # create shim for method 'dbSlipTime'
      #embed{ void LiuCosSlipFn_dbSlipTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::LiuCosSlipFn*) objVptr)->dbSlipTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      LiuCosSlipFn_dbSlipTime_set(self.thisptr, ptrFromHandle(value))


  property dbRiseTime:
    def __set__(self, value):
      """
      Set database for rise time.
      """
      # create shim for method 'dbRiseTime'
      #embed{ void LiuCosSlipFn_dbRiseTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::LiuCosSlipFn*) objVptr)->dbRiseTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      LiuCosSlipFn_dbRiseTime_set(self.thisptr, ptrFromHandle(value))


# ----------------------------------------------------------------------
cdef class ConstRateSlipFn(SlipTimeFn):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* ConstRateSlipFn_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::ConstRateSlipFn);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    SlipTimeFn.__init__(self)
    self.thisptr = ConstRateSlipFn_constructor()
    self.handle = self._createHandle()
    return


  property dbSlipRate:
    def __set__(self, value):
      """
      Set database for slip rate.
      """
      # create shim for method 'dbSlipRate'
      #embed{ void ConstRateSlipFn_dbSlipRate_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::ConstRateSlipFn*) objVptr)->dbSlipRate(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      ConstRateSlipFn_dbSlipRate_set(self.thisptr, ptrFromHandle(value))


  property dbSlipTime:
    def __set__(self, value):
      """
      Set database for slip initiation time.
      """
      # create shim for method 'dbSlipTime'
      #embed{ void ConstRateSlipFn_dbSlipTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::ConstRateSlipFn*) objVptr)->dbSlipTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      ConstRateSlipFn_dbSlipTime_set(self.thisptr, ptrFromHandle(value))


# ----------------------------------------------------------------------
cdef class StepSlipFn(SlipTimeFn):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* StepSlipFn_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::StepSlipFn);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (const ALE::Exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.msg().c_str()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    SlipTimeFn.__init__(self)
    self.thisptr = StepSlipFn_constructor()
    self.handle = self._createHandle()
    return


  property dbFinalSlip:
    def __set__(self, value):
      """
      Set database for slip rate.
      """
      # create shim for method 'dbFinalSlip'
      #embed{ void StepSlipFn_dbFinalSlip_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::StepSlipFn*) objVptr)->dbFinalSlip(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      StepSlipFn_dbFinalSlip_set(self.thisptr, ptrFromHandle(value))


  property dbSlipTime:
    def __set__(self, value):
      """
      Set database for slip initiation time.
      """
      # create shim for method 'dbSlipTime'
      #embed{ void StepSlipFn_dbSlipTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::StepSlipFn*) objVptr)->dbSlipTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (const ALE::Exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.msg().c_str()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      StepSlipFn_dbSlipTime_set(self.thisptr, ptrFromHandle(value))


# End of file 
