# -*- Pyrex -*-
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "pylith/faults/Fault.hh"
#include "pylith/faults/FaultCohesive.hh"
#include "pylith/faults/FaultCohesiveKin.hh"
#include "pylith/faults/EqKinSrc.hh"
#include "pylith/faults/SlipTimeFn.hh"
#include "pylith/faults/BruneSlipFn.hh"

#include "pylith/utils/array.hh"

#include <assert.h>
#include <stdexcept>
#include <Python.h>
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
  ctypedef unsigned long size_t
  void* malloc(size_t size)
  void free(void* mem)

cdef void Fault_destructor(void* obj):
  """
  Destroy Fault object.
  """
  # create shim for destructor
  #embed{ void Fault_destructor_cpp(void* objVptr)
  pylith::faults::Fault* pM = (pylith::faults::Fault*) objVptr;
  delete pM;
  #}embed
  Fault_destructor_cpp(obj)
  return

cdef void EqKinSrc_destructor(void* obj):
  """
  Destroy EqKinSrc object.
  """
  # create shim for destructor
  #embed{ void EqKinSrc_destructor_cpp(void* objVptr)
  pylith::faults::EqKinSrc* src = (pylith::faults::EqKinSrc*) objVptr;
  delete src;
  #}embed
  EqKinSrc_destructor_cpp(obj)
  return


cdef void SlipTimeFn_destructor(void* obj):
  """
  Destroy SlipTimeFn object.
  """
  # create shim for destructor
  #embed{ void SlipTimeFn_destructor_cpp(void* objVptr)
  pylith::faults::SlipTimeFn* f = (pylith::faults::SlipTimeFn*) objVptr;
  delete f;
  #}embed
  SlipTimeFn_destructor_cpp(obj)
  return


# ----------------------------------------------------------------------
cdef class Fault:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    self.handle = None
    self.thisptr = NULL
    self.name = "pylith_faults_Fault"
    return


  def adjustTopology(self, mesh):
    """
    Adjust mesh topology for fault implementation.
    """
    # create shim for method 'adjustTopology'
    #embed{ void Fault_adjustTopology(void* objVptr, void* meshVptr)
    try {
      assert(0 != objVptr);
      ALE::Obj<ALE::Mesh>* mesh = (ALE::Obj<ALE::Mesh>*) meshVptr;
      ((pylith::faults::Fault*) objVptr)->adjustTopology(*mesh);
    } catch (const std::exception& err) {
    PyErr_SetString(PyExc_RuntimeError,
                    const_cast<char*>(err.what()));
    } catch (...) {
    PyErr_SetString(PyExc_RuntimeError,
                    "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    Fault_adjustTopology(self.thisptr, ptrFromHandle(mesh))
    return


  def initialize(self, mesh, cs, upDir):
    """
    Initialize fault.
    """
    # create shim for method 'initialize'
    #embed{ void Fault_initialize(void* objVptr, void* meshVptr, void* csVptr, double* upDirPtr)
    try {
      assert(0 != objVptr);
      assert(0 != meshVptr);
      assert(0 != csVptr);
      ALE::Obj<ALE::Mesh>* mesh = (ALE::Obj<ALE::Mesh>*) meshVptr;
      spatialdata::geocoords::CoordSys* cs =
        (spatialdata::geocoords::CoordSys*) csVptr;
      pylith::double_array upDir(3);
      upDir[0] = upDirPtr[0];
      upDir[1] = upDirPtr[1];
      upDir[2] = upDirPtr[2];
      ((pylith::faults::Fault*) objVptr)->initialize(*mesh, cs, upDir);
      } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch      
    #}embed

    if not mesh.name == "pylith_topology_Mesh":
      raise TypeError, \
            "Argument must be extension module type " \
            "'pylith::topology::Mesh'."
    if not cs.name == "spatialdata_geocoords_CoordSys":
      raise TypeError, \
            "Argument must be extension module type " \
            "'spatialdata::geocoords::CoordSys'."
    if 3 != len(upDir):
      raise TypeError, \
            "Argument must be a 3 vector (list)."
    cdef double upDirCpp[3]
    upDirCpp[0] = upDir[0]
    upDirCpp[1] = upDir[1]
    upDirCpp[2] = upDir[2]    
    Fault_initialize(self.thisptr, ptrFromHandle(mesh), ptrFromHandle(cs),
                     upDirCpp)
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, Fault_destructor)


  property id:
    def __set__(self, value):
      """
      Set identifier of material.
      """
      # create shim for method 'id'
      #embed{ void Fault_id_set(void* objVptr, int value)
      try {
        assert(0 != objVptr);
        ((pylith::faults::Fault*) objVptr)->id(value);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      Fault_id_set(self.thisptr, value)

    def __get__(self):
      """
      Get identifier of material.
      """
      # create shim for method 'id'
      #embed{ int Fault_id_get(void* objVptr)
      int result = 0;
      try {
        assert(0 != objVptr);
        result = ((pylith::faults::Fault*) objVptr)->id();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return result;
      #}embed
      return Fault_id_get(self.thisptr)


  property label:
    def __set__(self, value):
      """
      Set label of material.
      """
      # create shim for method 'label'
      #embed{ void Fault_label_set(void* objVptr, char* value)
      try {
        assert(0 != objVptr);
        ((pylith::faults::Fault*) objVptr)->label(value);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      Fault_label_set(self.thisptr, value)


# ----------------------------------------------------------------------
cdef class FaultCohesive(Fault):

  def __init__(self):
    """
    Constructor.
    """
    Fault.__init__(self)
    return


# ----------------------------------------------------------------------
cdef class FaultCohesiveKin(FaultCohesive):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* FaultCohesiveKin_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::FaultCohesiveKin);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    FaultCohesive.__init__(self)
    self.thisptr = FaultCohesiveKin_constructor()
    self.handle = self._createHandle()
    return


# ----------------------------------------------------------------------
cdef class EqKinSrc:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* EqKinSrc_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::EqKinSrc);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    self.name = "pylith_faults_EqKinSrc"
    self.thisptr = EqKinSrc_constructor()
    self.handle = self._createHandle()
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, EqKinSrc_destructor)


  property slipfn:
    def __set__(self, value):
      """
      Set slip time function.
      """
      # create shim for method 'slipfn'
      #embed{ void EqKinSrc_slipfn_set(void* objVptr, void* fnVptr)
      try {
        assert(0 != objVptr);
        assert(0 != fnVptr);
        pylith::faults::SlipTimeFn* fn =
          (pylith::faults::SlipTimeFn*) fnVptr;
        ((pylith::faults::EqKinSrc*) objVptr)->slipfn(fn);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "pylith_faults_SlipTimeFn":
        raise TypeError, \
              "Argument must be extension module type " \
              "'pylith_faults_SlipTimeFn'."
      EqKinSrc_slipfn_set(self.thisptr, ptrFromHandle(value))


# ----------------------------------------------------------------------
cdef class SlipTimeFn:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    self.handle = None
    self.thisptr = NULL
    self.name = "pylith_faults_SlipTimeFn"
    return


  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, SlipTimeFn_destructor)


# ----------------------------------------------------------------------
cdef class BruneSlipFn(SlipTimeFn):

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* BruneSlipFn_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::faults::BruneSlipFn);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    SlipTimeFn.__init__(self)
    self.thisptr = BruneSlipFn_constructor()
    self.handle = self._createHandle()
    return


  property dbFinalSlip:
    def __set__(self, value):
      """
      Set database for final slip.
      """
      # create shim for method 'dbFinalSlip'
      #embed{ void BruneSlipFn_dbFinalSlip_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbFinalSlip(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbFinalSlip_set(self.thisptr, ptrFromHandle(value))


  property dbSlipTime:
    def __set__(self, value):
      """
      Set database for slip initiation time.
      """
      # create shim for method 'dbSlipTime'
      #embed{ void BruneSlipFn_dbSlipTime_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbSlipTime(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbSlipTime_set(self.thisptr, ptrFromHandle(value))


  property dbPeakRate:
    def __set__(self, value):
      """
      Set database for peak slip rate.
      """
      # create shim for method 'dbPeakRate'
      #embed{ void BruneSlipFn_dbPeakRate_set(void* objVptr, void* dbVptr)
      try {
        assert(0 != objVptr);
        assert(0 != dbVptr);
        spatialdata::spatialdb::SpatialDB* db =
          (spatialdata::spatialdb::SpatialDB*) dbVptr;
        ((pylith::faults::BruneSlipFn*) objVptr)->dbPeakRate(db);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      if not value.name == "spatialdata_spatialdb_SpatialDB":
        raise TypeError, \
              "Argument must be extension module type " \
              "'spatialdata::spatialdb::SpatialDB'."
      BruneSlipFn_dbPeakRate_set(self.thisptr, ptrFromHandle(value))


# End of file 
