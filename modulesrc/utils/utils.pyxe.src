# -*- Pyrex -*-
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "pylith/utils/EventLogger.hh"

#include <assert.h>
#include <stdexcept>
#include <Python.h>
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
  ctypedef unsigned long size_t
  void* malloc(size_t size)
  void free(void* mem)

cdef void EventLogger_destructor(void* obj):
  """
  Destroy EventLogger object.
  """
  # create shim for destructor
  #embed{ void EventLogger_destructor_cpp(void* objVptr)
  pylith::utils::EventLogger* logger = (pylith::utils::EventLogger*) objVptr;
  delete logger;
  #}embed
  EventLogger_destructor_cpp(obj)
  return


# ----------------------------------------------------------------------
cdef class EventLogger:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* EventLogger_constructor()
    void* result = 0;
    try {
      result = (void*)(new pylith::utils::EventLogger);
      assert(0 != result);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    self.thisptr = EventLogger_constructor()
    self.handle = self._createHandle()
    self.name = "pylith_utils_EventLogger"
    return


  def initialize(self):
    """
    Initialize event logger.
    """
    # create shim for method 'initialize'
    #embed{ void EventLogger_initialize(void* objVptr)
    try {
      assert(0 != objVptr);
      ((pylith::utils::EventLogger*) objVptr)->initialize();
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch      
    #}embed

    EventLogger_initialize(self.thisptr)
    return


  def registerEvent(self, name):
    """
    Register event.
    """
    # create shim for method 'registerEvent'
    #embed{ int EventLogger_registerEvent(void* objVptr, char* name)
    int result = 0;
    try {
      assert(0 != objVptr);
      result = ((pylith::utils::EventLogger*) objVptr)->registerEvent(name);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    return EventLogger_registerEvent(self.thisptr, name)


  def eventId(self, name):
    """
    Get event identifier.
    """
    # create shim for method 'eventId'
    #embed{ int EventLogger_eventId(void* objVptr, char* name)
    int result = 0;
    try {
      assert(0 != objVptr);
      result = ((pylith::utils::EventLogger*) objVptr)->eventId(name);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    return result;
    #}embed

    return EventLogger_eventId(self.thisptr, name)


  def eventBegin(self, id):
    """
    Log event begin.
    """
    # create shim for method 'eventBegin'
    #embed{ void EventLogger_eventBegin(void* objVptr, int id)
    try {
      assert(0 != objVptr);
      ((pylith::utils::EventLogger*) objVptr)->eventBegin(id);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed

    EventLogger_eventBegin(self.thisptr, id)
    return


  def eventEnd(self, id):
    """
    Log event end.
    """
    # create shim for method 'eventEnd'
    #embed{ void EventLogger_eventEnd(void* objVptr, int id)
    try {
      assert(0 != objVptr);
      ((pylith::utils::EventLogger*) objVptr)->eventEnd(id);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed

    EventLogger_eventEnd(self.thisptr, id)
    return
  

  def _createHandle(self):
    """
    Wrap pointer to C++ object in PyCObject.
    """
    return PyCObject_FromVoidPtr(self.thisptr, EventLogger_destructor)


  property className:
    def __set__(self, name):
      """
      Set name of logging class.
      """
      # create shim for method 'className'
      #embed{ void EventLogger_className_set(void* objVptr, char* name)
      try {
        assert(0 != objVptr);
        ((pylith::utils::EventLogger*) objVptr)->className(name);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      EventLogger_className_set(self.thisptr, name)

    def __get__(self):
      """
      Get name of logging class.
      """
      # create shim for method 'className'
      #embed{ char* EventLogger_className_get(void* objVptr)
      char* result = 0;
      try {
        assert(0 != objVptr);
        result = (char*)((pylith::utils::EventLogger*) objVptr)->className();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return result;
      #}embed
      return EventLogger_className_get(self.thisptr)


# End of file 
