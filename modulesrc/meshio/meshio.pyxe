#!/usr/bin/env python
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "pylith/meshio/MeshIO.hh"
#include "pylith/meshio/MeshIOAscii.hh"
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
    ctypedef unsigned long size_t
    void* malloc(size_t size)
    void free(void* mem)

#embed{ void ALEMesh_destructor(void* pObj)
  ALE::Obj<ALE::Mesh>* pMesh = (ALE::Obj<ALE::Mesh>*) pObj;
  delete pMesh;
#}embed

# ----------------------------------------------------------------------
cdef class MeshIO:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    self.handle = None
    self.thisptr = NULL
    self.name = "pylith_meshio_MeshIO"
    return


  def read(self, interpolate):
    """
    Read mesh from file.

    @param interpolate Flag indicating whether to build intermediate
      topology elements.
    """
    # create shim for method 'read'
    #embed{ void MeshIO_read(void* pObj, void** ppMeshObj, int interpolate)
    ALE::Obj<ALE::Mesh>* pMesh = new ALE::Obj<ALE::Mesh>;
    ((pylith::meshio::MeshIO*) pObj)->read(*pMesh, interpolate);
    *ppMeshObj = (void*) pMesh;
    #}embed

    cdef void* pMeshObj
    pMeshObj = NULL
    MeshIO_read(self.thisptr, &pMeshObj, interpolate)
    return PyCObject_FromVoidPtr(pMeshObj, ALEMesh_destructor)


  def write(self, mesh):
    """
    Read write to file.
    """
    # create shim for method 'write'
    #embed{ void MeshIO_write(void* pObj, void* pMeshObj)
    ALE::Obj<ALE::Mesh>* pMesh = (ALE::Obj<ALE::Mesh>*) pMeshObj;
    ((pylith::meshio::MeshIO*) pObj)->write(*pMesh);
    #}embed
    cdef void* pMeshObj
    pMeshObj = <void*> PyCObject_AsVoidPtr(mesh)
    MeshIO_write(self.thisptr, pMeshObj)
    return


  def _createHandle(self):
    """Wrap pointer to C++ object in PyCObject."""
    # create shim for destructor
    #embed{ void MeshIO_destructor(void* pObj)
    spatialdata::geocoords::MeshIO* pMesh =
      (spatialdata::geocoords::MeshIO*) pObj;
    delete pMesh;
    #}embed
    return PyCObject_FromVoidPtr(self.thisptr, MeshIO_destructor)


# ----------------------------------------------------------------------
cdef class MeshIOAscii(MeshIO):

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* MeshIOAscii_constructor()
    return (void*)(new pylith::meshio::MeshIOAscii);
    #}embed

    MeshIO.__init__(self)
    self.thisptr = MeshIOAscii_constructor()
    self.handle = self._createHandle()
    return


# End of file 
