June, 2004:
	Use parameter statements to define some things that were being
	done in python before.
	All small routines will now have the _ss suffix.
	Changes to bdeld_ss:
		Renamed routine to bdeld_ss.
		Fixed error where sh was passed rather than shd.
		Other bug fixes.
	Other bug fixes:
		Incorrect dimensions for lm and lmx in addstf.
	Updated bnmatrix to deal with different element types.
	Increased usage of error codes and strings to be used in
	python tracebacks.
	Reworked logic to determine when stiffness/material matrices
	should be reformed.
	Reworking of code logic to loop over material type, rather than
	just over elements.  Routine names are passed down to simulate
	object-oriented programming using f77.
	Material models have been broken down from a single type to
	many different types, giving greater efficiency and simplifying
	the user interface.
	Created all driver and computational routines to handle the new
	looping method and the new method of defining material models.
	All routines modified to deal with multiple element types (10
	are now available).
	New method of doing material histories.

July, 2004:
	Updated some examples for current code version.
	Added new material models (including dummies).
	Separated information between material type and material model.
	Increased indexing efficiency.
	Fixed routines to use dstate rather than state for
	stress computations.  Variables in state should only be updated
	after iteration convergence.
	Put in logic to compute global element type (including infinite
	element info) from primitive element type.
	Updated other routines to allow variable number of nodes per
	element.
	Changed element computation logic so that all
	geometry-independent shape function information is now
	precomputed.  This also resulted in changes throughout the code
	that provided much greater efficiency.
	For python drivers, updated all calls to reflect new
	argument lists, added import of 'os' to allow system-independent
	methods of specifying pathnames, and fixed things for usage of
	multiple element types.
	Added python routines to define material models for pyre.
	Updated bindings for new routines and argument lists.

August, 2004:
	Added applications directory to build list -- now separately
	build and install lithomop3dapp.py into $EXPORT_ROOT/bin/.
	Created Make.mm files for examples (SCEC benchmarks), allowing
	easy method for running benchmarks, and added/updated
	benchmarks.
	Solved problem of why quad tets weren't working.  It was bad
	meshes (produced by netgen) rather than a problem with the code.
	Netgen adds midside nodes to every element, which means that
	there are duplicate midside nodes.
	Fixed build procedure.
	New routines to estimate stiffness matrix size.
	Added option and routines to output Ascii AVS UCD files.  These
	are useful for plotting as well as comparing results.
	Major debugging to accommodate changes implemented in June and
	July.
	Improved output options.
	Fixed python parsing routines.
	Added tracking of f77 memory usage to python routines.
	Updated bindings.
	Added some utility routines to simplify usage of LithoMop,
	primarily for SCEC workshop participants.

September, 2004:
	Put python files in lithomop3d/pyre to serve as templates for
	revamped code version that will use SimulationController.

October, 2004:
	Some additional setup stuff and ideas for creating Mesh objects,
	faulted elements, etc.

November, 2004:
	Started creating UML class diagram showing proposed new code
	layout.
	Updated version number of code to 0.70.

December, 2004:
	Nothing other than coming up with new ideas for code structure
	and figuring out how to deal with prestresses.

January, 2005:
	Major revisions to setup and usage of force vectors.  Completely
	revised how these vectors are used, since previous method was
	unwieldy (and wrong in some cases).  This will also lay the
	groundwork for initial use of PETSc.
	Updated examples for SCEC BM 2 to allow testing of gravity and
	prestresses.
	Updated build procedure to work with revised config.
	Changed the way forces and Winkler forces are dealt with.
	Replaced bdiff routine with bsum routine to handle force
	updating.
	Came up with initial method for auto-computation of prestresses
	using bprestress force vector and implemented this.
	Added new driver and computation routines for automatic
	computation of gravitational prestresses.
	Also added new PCG solution vectors.
	Winkler forces are now added to internal force vector.
	External force vector is completely reformed during each
	iteration.
	Internal force vector uses stresses from previous step for
	first iteration, augmented by forces from kinematic BC.  After
	that, internal force vector corresponds to current stresses.
	Added prestress material matrix computation routines.
	Updated all python drivers to use new force and prestress
	vectors, arrays, and parameters.
	Updated bindings for new routines and arguments.

February, 2005:
	Set up test problems for prestresses.
	After examination, the initial method of dealing with
	prestresses was incorrect (due to the fact that new stresses
	are computed from total strains rather than incremental
	strains).  A new method has been implemented, which requires
	usage of a prestress array.  The new method also requires
	modifications at the material-model level.  Equations have
	been worked out and implemented for isotropic linear elastic
	and isotropic linear Maxwell viscoelastic materials.  The
	equations have been worked out but not yet implemented for
	power-law Maxwell viscoelastic materials.  The addition of new
	material models will be put off until the structure for
	material model routines has been firmly established.
	The new method of dealing with prestresses appears to work
	correctly for the test problems tried.  At present, the option
	of reading in prestresses (rather than having them be
	automatically computed) has not yet been reimplemented.
	Bug fixes.

March, 2005:
	Updated code to work with pythia-0.8 (previously used
	pythia-0.5).
	Updated UML diagram showing usage of element families.
	Initial PETSc version of code.  This required new indexing and
	sparse matrix setup methods, deletion of some arrays and
	addition of others, changes and additions to bindings, etc.
	Many changes involved in separating input from equation
	ordering, etc.
	Changed code logic so that looping is now performed over
	element families, currently defined by their material type.
	The definition can be extended in the future to be defined by
	material model (rather than specific type) and element type.
	At present, the ability to mix elements has been removed.
	The new method of using element families dramatically reduces
	the amount of indexing necessary, improving code structure,
	efficiency, and memory usage.
	Bug fixes in material matrix formation, where tensor strain
	was being assumed (should have been engineering strain).
	Changed shape function precomputation to only compute
	values for a single given element type, since element mixing is
	not allowed at present.
	New output options for state variables.
	Changed storage (stride) for state variables to be more general.
	Modified python drivers to handle PETSc and other code changes.
	Separation of tasks between python drivers has been improved.
	Updated bindings for new functions and argument lists.

April, 2005:
	Updated some examples to correspond to current code version.
	Added SCEC BM 5 as test of split nodes.
	Lots of PETSc debugging, particularly with interaction between
	split and slippery nodes and new sparse matrix routines using
	PETSc.
	Major reworking of python driver Lithomop3d_setup.py.  This
	routine has now been broken into a number of functions that
	completely separate the tasks of input (function read),
	equation numbering (function numberequations), sorting/
	renumbering into element families (function sortmesh), setting
	up sparse matrix storage (function sparsesetup), allocation
	of additional arrays required for computations (function
	allocateremaining), and output of mesh information (function
	meshwrite).  This also required breaking apart and rewriting a
	number of lower-level routines, as many of these tasks had
	previously been combined in TECTON/LithoMop.  These steps were
	necessary to allow for easier parallelization of LithoMop.
	Much debugging associated with other changes.
	Material histories have been removed for now.  Once the spatial
	database is being used for material info, a new method (using
	databases dependent on a time history) will be used to assign
	time-dependent material properties.
	Added some more PETSc instrumentation.
	Debugging of slippery nodes.

May, 2005:
	Added new test problems to test usage of time-varying Winkler
	elements to lock and unlock a slippery node fault.
	Fixed usage of Winkler elements, adding new force vectors to
	hold contributions for slippery and regular Winkler elements.
	Also fixed locking and unlocking using Winkler elements.
	Fixed problem where stiffness matrix was not being zeroed
	before being reformed (using PETSc routine).
	Fixed problem where Winkler coefficients were not being added
	to stiffness diagonals.
	Created new routine for unlocking Winkler forces.
	Fixed UCD output so filenames for different cycles don't
	conflict with each other.
	Fixed some output problems.
	Added option to output split and slippery node displacements
	to pseudo-UCD files for each time step.
	Updated python drivers and bindings to use new bwink and
	bwinkx arrays.
	Fixed PETSc bindings problem when trying to determine whether
	developer or release version is being used (function calls have
	changed).

June, 2005:
	Resolved major build problem that was preventing code from
	building at all on Mac, and caused some build problems on
	Linux as well.  This was to to changes in both the PETSc build
	system and the pythia build system, which then interacted
	badly with my build implementation.  I was able to solve most
	problems by simply changing Make.mm and local.def in
	liblithomop3d.  There is a remaining issue due to a conflict
	with libgcc.a installed by Apple and the one that is produced
	when g77 is installed separately.  For now, the extra libgcc.a
	must be moved out of the way, until this issue is resolved in
	the PETSc build system.
	Fixed problem where local coordinate rotations were not always
	being computed.  This seems to have finally resolved the
	problems of using slippery nodes with Winkler elements that
	were causing problems for Yaru.  More testing is probably
	needed.
	Fixed some output units.
	Fixed all bindings related to PETSc or MPI to resolve conflict
	between mpi.h and stdio.h when mpicxx.h is being used.  This
	involved a complete reworking of headers and include files.

	Hopefully also this month:
	Binary AVS UCD output (ascii files are huge).
	Initial parallel version of LithoMop (probably will be missing
	many features compared to serial version).


