// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(pylith_feassemble_integrator_hh)
#error "Integrator.icc must be included only from Integrator.hh"
#else

// Set time step for advancing from time t to time t+dt.
inline
void
pylith::feassemble::Integrator::timeStep(const double dt) {
  _dt = dt;
} // timeStep

// Check whether Jacobian needs to be recomputed.
inline
bool
pylith::feassemble::Integrator::needNewJacobian(void) const {
  return _needNewJacobian;
} // needNewJacobian

// Set flag for setting constraints for total field solution or
inline
void
pylith::feassemble::Integrator::useSolnIncr(const bool flag) {
  _useSolnIncr = flag;
} // useSolnIncr

// Integrate contributions to residual term (r) for operator.
inline
void
pylith::feassemble::Integrator::integrateResidual(
			           const topology::Field& residual,
				   const double t,
			           topology::SolutionFields* const fields) {
} // integrateResidual

// Integrate contributions to Jacobian matrix (A) associated with
// operator.
inline
void
pylith::feassemble::Integrator::integrateJacobian(
				       PetscMat* mat,
				       const double t,
				       topology::SolutionFields* const fields) {
  _needNewJacobian = false;
} // integrateJacobian

// Integrate contributions to residual term (r) for operator that
// do not require assembly over cells, vertices, or processors.
inline
void
pylith::feassemble::Integrator::integrateResidualAssembled(
				   const topology::Field& residual,
				   const double t,
				   topology::SolutionFields* const fields) {
  _needNewJacobian = false;
} // integrateResidualAssembled

// Integrate contributions to Jacobian matrix (A) associated with
// operator that do not require assembly over cells, vertices, or
// processors
inline
void
pylith::feassemble::Integrator::integrateJacobianAssembled(
					PetscMat* mat,
					const double t,
					topology::SolutionFields* const fields) {
} // integrateJacobianAssembled

// Update state variables as needed.
inline
void
pylith::feassemble::Integrator::updateState(
				     const double t,
				     topology::SolutionFields* const fields) {
} // updateState


#endif

// End of file
