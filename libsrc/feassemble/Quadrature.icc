// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(pylith_feassemble_quadrature_hh)
#error "Quadrature.icc must be included only from Quadrature.hh"
#else

#include <cassert> // USES assert()
#include "QuadratureEngine.hh" // USES QuadratureEngine

// Set flag for checking ill-conditioning.
template<typename mesh_type>
inline
void
pylith::feassemble::Quadrature<mesh_type>::checkConditioning(const bool flag) {
  _checkConditioning = flag;
}

// Get flag for checking ill-conditioning.
template<typename mesh_type>
inline
bool
pylith::feassemble::Quadrature<mesh_type>::checkConditioning(void) const {
  return _checkConditioning;
}

// Get coordinates of quadrature points in cell (NOT reference cell).
template<typename mesh_type>
inline
const pylith::double_array&
pylith::feassemble::Quadrature<mesh_type>::quadPts(void) const {
  assert(0 != _engine);
  return _engine->quadPts();
}

// Get derivatives of basis fns evaluated at quadrature points.
template<typename mesh_type>
inline
const pylith::double_array&
pylith::feassemble::Quadrature<mesh_type>::basisDeriv(void) const {
  assert(0 != _engine);
  return _engine->basisDeriv();
}

// Get Jacobians evaluated at quadrature points.
template<typename mesh_type>
inline
const pylith::double_array&
pylith::feassemble::Quadrature<mesh_type>::jacobian(void) const {
  assert(0 != _engine);
  return _engine->jacobian();
}

// Get determinants of Jacobian evaluated at quadrature points.
template<typename mesh_type>
inline
const pylith::double_array&
pylith::feassemble::Quadrature<mesh_type>::jacobianDet(void) const {
  assert(0 != _engine);
  return _engine->jacobianDet();
}

// Precompute geometric quantities for each cell.
template<typename mesh_type>
inline
void
pylith::feassemble::Quadrature<mesh_type>::computeGeometry(const double_array& coordinatesCell,
							   const int cell) {
  assert(0 != _engine);
  _engine->computeGeometry(coordinatesCell, cell);  
}

#endif


// End of file
