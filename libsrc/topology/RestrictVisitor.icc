// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(pylith_topology_restrictvisitor_hh)
#error "RestrictVisitor.icc must be included only from RestrictVisitor.hh"
#else

// Constructor with field and size.
template<typename field_type>
pylith::topology::RestrictVisitor<field_type>::RestrictVisitor(const field_type& field,
							       const int size) :
  _field(field),
  _visitor(field.section(), size)
{ // constructor
} // constructor

// Constructor with field and array.
template<typename field_type>
pylith::topology::RestrictVisitor<field_type>::RestrictVisitor(const field_type& field,
							       const double_array& values) :
  _field(field),
  _visitor(field.section(), &values[0], values.size()
{ // constructor
} // constructor

// Destructor.
template<typename field_type>
~RestrictVisitor(void)
{ // destructor
} // destructor

// Visit field for cell and retrieve values.
template<typename field_type>
inline
void
pylith::topology::RestrictVisitor<field_type>::visit(
		const typename field_type::Mesh::SieveMesh::point_type& cell)
{ // visit
  const ALE::Obj<SieveMesh>& sieveMesh = field.mesh().sieveMesh();
  mesh->restrictClosure(cell, _visitor);
} // visit

// Get field values previously retrieved for cell.
template<typename field_type>
inline
const double*
pylith::topology::RestrictVisitor<field_type>::values(void) const
{ // values
  return _visitor->getValues();
} // values

// Clear values associated with cell.
template<typename field_type>
void
pylith::topology::RestrictVisitor<field_type>::clear(void)
{ // clear
  return _visitor->clear();
} // clear


#endif


// End of file
