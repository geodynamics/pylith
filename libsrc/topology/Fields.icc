// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(pylith_topology_fields_hh)
#error "Fields.icc must be included only from Fields.hh"
#endif

#include <sstream> // USES std::ostringstream
#include <stdexcept> // USES std::runtime_error

// ----------------------------------------------------------------------
// Default constructor.
template<typename field_type>
pylith::topology::Fields<field_type>::Fields(const typename field_type::Mesh& mesh) :
  _mesh(mesh)
{ // constructor
} // constructor

// ----------------------------------------------------------------------
// Destructor.
template<typename field_type>
pylith::topology::Fields<field_type>::~Fields(void)
{ // destructor
  deallocate();
} // destructor

// ----------------------------------------------------------------------
// Deallocate PETSc and local data structures.
template<typename field_type>
void
pylith::topology::Fields<field_type>::deallocate(void)
{ // deallocate
  const typename map_type::iterator begin = _fields.begin();
  const typename map_type::iterator end = _fields.end();
  for (typename map_type::iterator iter=begin; iter != end; ++iter) {
    delete iter->second; iter->second = 0;
  } // for
} // deallocate

// ----------------------------------------------------------------------
// Check if fields contains a given field.
template<typename field_type>
bool
pylith::topology::Fields<field_type>::hasField(const char* name) const
{ // hasField
  typename map_type::const_iterator iter = _fields.find(name);
  return iter != _fields.end();
} // hasField

// ----------------------------------------------------------------------
// Add field.
template<typename field_type>
void
pylith::topology::Fields<field_type>::add(const char* name,
					  const char* label)
{ // add
  if (hasField(name)) {
    std::ostringstream msg;
    msg << "Could not add field '" << name
	<< "' to fields manager, because it already exists.";
    throw std::runtime_error(msg.str());
  } // if
  
  _fields[name] = new field_type(_mesh);
  _fields[name]->label(label);
} // add

// ----------------------------------------------------------------------
// Add field.
template<typename field_type>
void 
pylith::topology::Fields<field_type>::add(
			const char* name,
			const char* label,
			const pylith::topology::FieldBase::DomainEnum domain,
			const int fiberDim)
{ // add
  if (hasField(name)) {
    std::ostringstream msg;
    msg << "Could not add field '" << name
	<< "' to fields manager, because it already exists.";
    throw std::runtime_error(msg.str());
  } // if
  
  _fields[name] = new field_type(_mesh);
  _fields[name]->label(label);
  _fields[name]->newSection(domain, fiberDim);
} // add

// ----------------------------------------------------------------------
// Delete field.
template<typename field_type>
void
pylith::topology::Fields<field_type>::del(const char* name)
{ // del
  typename map_type::iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager to delete.";
    throw std::runtime_error(msg.str());
  } // if
  delete iter->second; iter->second = 0;
  _fields.erase(name);
} // del

// ----------------------------------------------------------------------
// Delete field.
template<typename field_type>
inline
void
pylith::topology::Fields<field_type>::delField(const char* name)
{ // delField
  del(name);
} // delField

// ----------------------------------------------------------------------
// Get field.
template<typename field_type>
const field_type&
pylith::topology::Fields<field_type>::get(const char* name) const
{ // get
  typename map_type::const_iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if
  return *iter->second;
} // get
	   
// ----------------------------------------------------------------------
// Get field.
template<typename field_type>
field_type&
pylith::topology::Fields<field_type>::get(const char* name)
{ // get
  typename map_type::iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if
  return *iter->second;
} // get

// ----------------------------------------------------------------------
// Copy layout to other fields.
template<typename field_type>
void
pylith::topology::Fields<field_type>::copyLayout(const char* name)
{ // copyLayout
  typename map_type::const_iterator src = _fields.find(name);
  if (src == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if

  const typename map_type::iterator begin = _fields.begin();
  const typename map_type::iterator end = _fields.end();
  for (typename map_type::iterator iter=begin; iter != end; ++iter)
    if (iter != src)
      iter->second->newSection(*src->second);
} // copyLayout

// ----------------------------------------------------------------------
// Get mesh associated with fields.
template<typename field_type>
const typename field_type::Mesh&
pylith::topology::Fields<field_type>::mesh(void) const
{ // mesh
  return _mesh;
} // mesh

// ----------------------------------------------------------------------
// Get names of all fields
template<typename field_type>
void
pylith::topology::Fields<field_type>::fieldNames(int *numNames, char ***outNames)
{ // fieldNames
  *numNames = _fields.size();
  PetscErrorCode ierr = PetscMalloc((*numNames) * sizeof(char *), outNames);
  const typename map_type::const_iterator namesEnd = _fields.end();
  int i = 0;
  for (typename map_type::const_iterator name = _fields.begin(); name != namesEnd; ++name) {
    char *newName;

    ierr = PetscStrallocpy(name->first.c_str(), &newName);
    (*outNames)[i++] = newName;
  }
} // fieldNames


// End of file 
