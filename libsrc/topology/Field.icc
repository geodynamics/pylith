// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(pylith_topology_field_hh)
#error "Field.icc must be included only from Field.hh"
#else

// Get Sieve section.
inline
const ALE::Obj<pylith::SieveMesh::real_section_type>&
pylith::topology::Field::section(void) const {
  return _section;
}

// Set name of field.
inline
void
pylith::topology::Field::name(const char* value) {
  _name = value;
}

// Get name of field.
inline
const char*
pylith::topology::Field::name(void) const {
  return _name.c_str();
}

// Set vector field type
inline
void
pylith::topology::Field::vectorFieldType(const VectorFieldEnum value) {
  _vecFieldType = value;
}

// Get vector field type
inline
pylith::topology::Field::VectorFieldEnum
pylith::topology::Field::vectorFieldType(void) const {
  return _vecFieldType;
}

// Set spatial dimension of domain.
inline
void
pylith::topology::Field::spaceDim(const int value) {
  _spaceDim = value;
}

// Get spatial dimension of domain.
inline
int
pylith::topology::Field::spaceDim(void) const {
  return _spaceDim;
}

// Set scale for dimensionalizing field.
inline
void
pylith::topology::Field::scale(const double value) {
  _scale = value;
}

// Get scale for dimensionalizing field.
inline
double
pylith::topology::Field::scale(void) const {
  return _scale;
}

// Set flag indicating whether it is okay to dimensionalize field.
inline
void
pylith::topology::Field::addDimensionOkay(const bool value) {
  _dimensionsOkay = value;
}

// Set flag indicating whether it is okay to dimensionalize field.
inline
bool
pylith::topology::Field::addDimensionOkay(void) const {
  return _dimensionsOkay;
}


#endif


// End of file
