// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_field_hh)
#error "Field.icc must be included only from Field.hh"
#else

// Get Sieve section.
template<typename mesh_type>
inline
const ALE::Obj<typename mesh_type::RealSection>&
pylith::topology::Field<mesh_type>::section(void) const {
  return _section;
}

// Get mesh associated with field.
template<typename mesh_type>
inline
const
mesh_type&
pylith::topology::Field<mesh_type>::mesh(void) const {
  return _mesh;
}

// Set label for field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::label(const char* value) {
  _label = value;
}

// Get label for field.
template<typename mesh_type>
inline
const char*
pylith::topology::Field<mesh_type>::label(void) const {
  return _label.c_str();
}

// Set vector field type
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::vectorFieldType(const VectorFieldEnum value) {
  _vecFieldType = value;
}

// Get vector field type
template<typename mesh_type>
inline
typename pylith::topology::Field<mesh_type>::VectorFieldEnum
pylith::topology::Field<mesh_type>::vectorFieldType(void) const {
  return _vecFieldType;
}

// Set scale for dimensionalizing field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::scale(const double value) {
  _scale = value;
}

// Get scale for dimensionalizing field.
template<typename mesh_type>
inline
double
pylith::topology::Field<mesh_type>::scale(void) const {
  return _scale;
}

// Set flag indicating whether it is okay to dimensionalize field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::addDimensionOkay(const bool value) {
  _dimensionsOkay = value;
}

// Set flag indicating whether it is okay to dimensionalize field.
template<typename mesh_type>
inline
bool
pylith::topology::Field<mesh_type>::addDimensionOkay(void) const {
  return _dimensionsOkay;
}

// Get PETSc vector associated with field.
template<typename mesh_type>
inline
PetscVec
pylith::topology::Field<mesh_type>::vector(void) {
  return _vector;
}

// Get PETSc vector associated with field.
template<typename mesh_type>
inline
const PetscVec
pylith::topology::Field<mesh_type>::vector(void) const {
  return _vector;
}

#endif


// End of file
