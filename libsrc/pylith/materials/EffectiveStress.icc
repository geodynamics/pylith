// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ----------------------------------------------------------------------
//

#include <portinfo>

#include "petsc.h" // USES PetscLogFlops

#include <cmath> // USES fabs()
#include <cassert> // USES assert()
#include <stdexcept> // USES std::runtime_error

// ----------------------------------------------------------------------
// Get effective stress from initial guess.
template<typename material_type>
PylithScalar
pylith::materials::EffectiveStress::calculate(
				 const PylithScalar effStressInitialGuess,
				 const PylithScalar stressScale,
				 material_type* const material)
{ // getEffStress
  // Check parameters
  assert(effStressInitialGuess >= 0.0);
  // If initial guess is too low, use stress scale instead.
  const PylithScalar xMin = 1.0e-10;

  // Bracket the root.
  PylithScalar x1 = 0.0;
  PylithScalar x2 = 0.0;
  if (effStressInitialGuess > xMin) {
    x1 = effStressInitialGuess - 0.5 * effStressInitialGuess;
    x2 = effStressInitialGuess + 0.5 * effStressInitialGuess;
  } else {
    x1 = stressScale - 0.5 * stressScale;
    x2 = stressScale + 0.5 * stressScale;
  } // else

  _bracket(&x1, &x2, material);

  // Find effective stress using Newton's method with bisection.
  const PylithScalar effStress = _search(x1, x2, material);

  PetscLogFlops(4); // Log flops

  return effStress;
} // getEffStress

// ----------------------------------------------------------------------
// Bracket effective stress.
template<typename material_type>
void
pylith::materials::EffectiveStress::_bracket(PylithScalar* px1,
					     PylithScalar* px2,
					     material_type* const material)
{ // _bracket
  // Arbitrary number of iterations to bracket the root
  const int maxIterations = 50;

  // Arbitrary factor by which to increase the brackets.
  const PylithScalar bracketFactor = 2;
  // Minimum allowed value for effective stress.
  const PylithScalar xMin = 0.0;
  PylithScalar x1 = *px1;
  PylithScalar x2 = *px2;

  PylithScalar funcValue1 = material->effStressFunc(x1);
  PylithScalar funcValue2 = material->effStressFunc(x2);

  int iteration = 0;
  bool bracketed = false;
  while (iteration < maxIterations) {
    if ((funcValue1 * funcValue2) < 0.0) {
      bracketed = true;
      break;
    } // if

    if (fabs(funcValue1) < fabs(funcValue2)) {
      x1 += bracketFactor * (x1 - x2);
      x1 = std::max(x1, xMin);
      funcValue1 = material->effStressFunc(x1);
    } else {
      x2 += bracketFactor * (x1 - x2);
      x2 = std::max(x2, xMin);
      funcValue2 = material->effStressFunc(x2);
    } // else
    ++iteration;
  } // while

  *px1 = x1;
  *px2 = x2;

  PetscLogFlops(5 * iteration);
  if (!bracketed)
    throw std::runtime_error("Unable to bracket effective stress.");
} // _bracket

// ----------------------------------------------------------------------
// Find root using Newton's method with bisection.
template<typename material_type>
PylithScalar
pylith::materials::EffectiveStress::_search(const PylithScalar x1,
					    const PylithScalar x2,
					    material_type* const material)
{ // _search
  // Arbitrary number of iterations to find the root
  const int maxIterations = 100;

  // Desired accuracy for root. This is a bit arbitrary for now.
  const PylithScalar accuracy = 1.0e-10;

  // Organize search so that effStressFunc(xLow) is less than zero.
  PylithScalar funcValueLow = material->effStressFunc(x1);
  PylithScalar funcValueHigh = material->effStressFunc(x2);
  assert(funcValueLow * funcValueHigh <= 0.0);

  PylithScalar effStress = 0.0;
  PylithScalar xLow = 0.0;
  PylithScalar xHigh = 0.0;
  bool converged = false;

  if (funcValueLow < 0.0) {
    xLow = x1;
    xHigh = x2;
  } else {
    xLow = x2;
    xHigh = x1;
  } // if/else

  effStress = 0.5 * (x1 + x2);
  PylithScalar dxPrevious = fabs(x2 - x1);
  PylithScalar dx = dxPrevious;
  PylithScalar funcValue = 0.0;
  PylithScalar funcDeriv = 0.0;
  PylithScalar funcXHigh = 0.0;
  PylithScalar funcXLow = 0.0;
  material->effStressFuncDerivFunc(&funcValue, &funcDeriv, effStress);
  int iteration = 0;

  while (iteration < maxIterations) {
    funcXHigh = (effStress - xHigh) * funcDeriv - funcValue;
    funcXLow = (effStress - xLow) * funcDeriv - funcValue;
    if (fabs(funcValue) < accuracy) {
      converged = true;
      break;
    } // if
    // Use bisection if solution goes out of bounds.
    if (funcXHigh * funcXLow >= 0.0) {
      dx = 0.5 * (xHigh - xLow);
      effStress = xLow + dx;
    } else {
      dxPrevious = dx;
      dx = funcValue / funcDeriv;
      effStress = effStress - dx;
    } // else
    material->effStressFuncDerivFunc(&funcValue, &funcDeriv, effStress);
    if (funcValue < 0.0) {
      xLow = effStress;
    } else {
      xHigh = effStress;
    } // else
    ++iteration;
  } // while

  if (converged == false)
    throw std::runtime_error("Cannot find root of effective stress function.");

  PetscLogFlops(5 + 15 * iteration); // Log flops

  return effStress;
} // _search


// End of file 
