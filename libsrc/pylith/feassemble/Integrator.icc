// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2013 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_feassemble_integrator_hh)
#error "Integrator.icc must be included only from Integrator.hh"
#else

// Set time step for advancing from time t to time t+dt.
inline
void
pylith::feassemble::Integrator::timeStep(const PylithScalar dt) {
  _dt = dt;
} // timeStep

// Check whether Jacobian needs to be recomputed.
inline
bool
pylith::feassemble::Integrator::needNewJacobian(void) const {
  return _needNewJacobian;
} // needNewJacobian

// Check whether integrator needs velocity.
inline
bool
pylith::feassemble::Integrator::isJacobianSymmetric(void) const {
  return _isJacobianSymmetric;
} // needsVelocity

// Initialize integrator.
inline
void
pylith::feassemble::Integrator::initialize(const topology::Mesh& mesh) {
} // initialize

// Split solution field for separate preconditioning.
inline
void
pylith::feassemble::Integrator::splitField(topology::Field* field) {
} // splitField
  
// Integrate contributions to residual term (r) for operator.
inline
void
pylith::feassemble::Integrator::integrateResidual(const topology::Field& residual,
						  const PylithScalar t,
						  topology::SolutionFields* const fields) {
} // integrateResidual

// Integrate contributions to residual term (r) for operator.
inline
void
pylith::feassemble::Integrator::integrateResidualLumped(const topology::Field& residual,
							const PylithScalar t,
							topology::SolutionFields* const fields) {
  integrateResidual(residual, t, fields);
} // integrateResidual

// Integrate contributions to Jacobian matrix (A) associated with
// operator.
inline
void
pylith::feassemble::Integrator::integrateJacobian(topology::Jacobian* jacobian,
						  const PylithScalar t,
						  topology::SolutionFields* const fields) {
  _needNewJacobian = false;
} // integrateJacobian

// Integrate contributions to Jacobian matrix (A) associated with
// operator.
inline
void
pylith::feassemble::Integrator::integrateJacobian(topology::Field* jacobian,
						  const PylithScalar t,
						  topology::SolutionFields* const fields) {
  _needNewJacobian = false;
} // integrateJacobian

// Integrate contributions to Jacobian matrix (A) associated with
// operator.
inline
void 
pylith::feassemble::Integrator::calcPreconditioner(PetscMat* const precondMatrix,
						   topology::Jacobian* const jacobian,
						   topology::SolutionFields* const fields) {
} // calcPreconditioner

// Update state variables as needed.
inline
void
pylith::feassemble::Integrator::updateStateVars(const PylithScalar t,
						topology::SolutionFields* const fields) {
} // updateState

// Constrain solution space.
inline
void
pylith::feassemble::Integrator::constrainSolnSpace(topology::SolutionFields* const fields,
						   const PylithScalar t,
						   const topology::Jacobian& jacobian) {
} // constrainSolnSpace

// Adjust solution from solver with lumped Jacobian to match Lagrange
//  multiplier constraints.
inline
void
pylith::feassemble::Integrator::adjustSolnLumped(topology::SolutionFields* fields,
						 const PylithScalar t,
						 const topology::Field& jacobian) {
} // adjustSolnLumped

// Verify constraints are acceptable.
inline
void
pylith::feassemble::Integrator::checkConstraints(const topology::Field& solution) const {
} // checkConstraints



#endif

// End of file
