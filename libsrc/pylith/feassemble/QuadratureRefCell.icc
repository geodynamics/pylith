// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_feassemble_quadraturerefcell_hh)
#error "QuadratureRefCell.icc must be included only from QuadratureRefCell.hh"
#else

// Get minimum allowable Jacobian.
inline
PylithScalar
pylith::feassemble::QuadratureRefCell::minJacobian(void) const {
  return _minJacobian;
}

// Set minimum allowable Jacobian.
inline
void
pylith::feassemble::QuadratureRefCell::minJacobian(const PylithScalar min) {
  _minJacobian = min;
}

// Get coordinates of quadrature points in reference cell.
inline
const pylith::scalar_array&
pylith::feassemble::QuadratureRefCell::quadPtsRef(void) const {
  return _quadPtsRef;
}

// Get weights of quadrature points.
inline
const pylith::scalar_array&
pylith::feassemble::QuadratureRefCell::quadWts(void) const {
  return _quadWts;
}

// Get basis fns evaluated at quadrature points.
inline
const pylith::scalar_array&
pylith::feassemble::QuadratureRefCell::basis(void) const {
  return _basis;
}

// Get derivates of basis fns evaluated at quadrature points.
inline
const pylith::scalar_array&
pylith::feassemble::QuadratureRefCell::basisDerivRef(void) const {
  return _basisDerivRef;
}

// Get number of dimensions in reference cell.
inline
int
pylith::feassemble::QuadratureRefCell::cellDim(void) const {
  return _cellDim;
}

// Get number of basis functions for cell.
inline
int
pylith::feassemble::QuadratureRefCell::numBasis(void) const {
  return _numBasis;
}

// Get number of quadrature points.
inline
int
pylith::feassemble::QuadratureRefCell::numQuadPts(void) const {
  return _numQuadPts;
}

// Get number of dimensions in coordinates of cell vertices.
inline
int
pylith::feassemble::QuadratureRefCell::spaceDim(void) const {
  return _spaceDim;
}

// Compute minimum width across cell.
inline
PylithScalar
pylith::feassemble::QuadratureRefCell::minCellWidth(const scalar_array& coordinatesCell) const {
  assert(_geometry);
  return _geometry->minCellWidth(coordinatesCell);
}

#endif

// End of file
