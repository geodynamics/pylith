// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ----------------------------------------------------------------------
//

#if !defined(pylith_friction_frictionmodel_hh)
#error "FrictionModel.icc can only be included from FrictionModel.hh"
#endif

// Set database for constitutive model parameters.
inline
void
pylith::friction::FrictionModel::dbProperties(spatialdata::spatialdb::SpatialDB* value) {
  _dbProperties = value;
}

// Set database for initial state variables.
inline
void
pylith::friction::FrictionModel::dbInitialState(spatialdata::spatialdb::SpatialDB* value) {
  _dbInitialState = value;
}

// Set name of frictionmodel.
inline
void
pylith::friction::FrictionModel::label(const char* value) {
  _label = value;
}

// Get label of friction model.
inline
const char*
pylith::friction::FrictionModel::label(void) const {
  return _label.c_str();
}

// Set current time step.
inline
void
pylith::friction::FrictionModel::timeStep(const double dt) {
  _dt = dt;
}

// Get current time step.
inline
double
pylith::friction::FrictionModel::timeStep(void) const {
  return _dt;
} // timeStep

// Compute initial state variables from values in spatial database.
inline
void
pylith::friction::FrictionModel::_dbToStateVars(double* const stateValues,
					    const double_array& dbValues) const
{}

// Nondimensionalize state variables.
inline
void
pylith::friction::FrictionModel::_nondimStateVars(double* const values,
					      const int nvalues) const
{}
  
// Dimensionalize state variables.
inline
void
pylith::friction::FrictionModel::_dimStateVars(double* const values,
					   const int nvalues) const
{}


// End of file 
