// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_meshvisitor_hh)
#error "MeshVisitor.icc must be included only from MeshVisitor.hh"
#else

#include "pylith/utils/petscerror.h" // USES CHECK_PETSC_ERROR

// ----------------------------------------------------------------------
// Default constructor.
template<typename field_type>
inline
pylith::topology::MeshVisitor<field_type>::MeshVisitor(const field_type& field) :
  _field(field)
{ // constructor
  initialize();
} // constructor

// ----------------------------------------------------------------------
// Default destructor
template<typename field_type>
inline
pylith::topology::MeshVisitor<field_type>::~MeshVisitor(void)
{ // destructor
  clear();
} // destructor

// ----------------------------------------------------------------------
// Initialized cached data members.
template<typename field_type>
inline
void
pylith::topology::MeshVisitor<field_type>::initialize(void)
{ // initialize
  _dm = _field.mesh().dmMesh();assert(_dm);
  _section = _field.petscSection();assert(_section);
  _localVec = _field.localVector();assert(_localVec);

  PetscErrorCode err = VecGetArray(_localVec, &_localArray);CHECK_PETSC_ERROR(err);
} // initialize

// ----------------------------------------------------------------------
// Default destructor
template<typename field_type>
inline
void
pylith::topology::MeshVisitor<field_type>::clear(void)
{ // clear
  assert(_localVec);
  PetscErrorCode err = VecRestoreArray(_localVec, &_localArray);CHECK_PETSC_ERROR(err);
  assert(!_localArray);

  _dm = NULL;
  _section = NULL;
  _localVec = NULL;
} // clear

// ----------------------------------------------------------------------
// Get the local coordinates array associated with the local PETSc Vec.
template<typename field_type>
inline
PetscScalar*
pylith::topology::MeshVisitor<field_type>::localArray(void) const
{ // localArray
  return _localArray;
} // localArray

// ----------------------------------------------------------------------
// Get fiber dimension of coordinates for point.
template<typename field_type>
inline
PetscInt
pylith::topology::MeshVisitor<field_type>::sectionDof(const PetscInt point) const
{ // sectionDof
  assert(_section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetDof(_section, point, &dof);CHECK_PETSC_ERROR(err);
  return dof;
} // sectionDof

// ----------------------------------------------------------------------
// Get offset into coordinates array for point.
template<typename field_type>
inline
PetscInt
pylith::topology::MeshVisitor<field_type>::sectionOffset(const PetscInt point) const
{ // sectionOffset
  assert(_section);
  PetscInt offset;
  PetscErrorCode err = PetscSectionGetOffset(_section, point, &offset);CHECK_PETSC_ERROR(err);
  return offset;
} // sectionOffset

// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
template<typename field_type>
void
pylith::topology::MeshVisitor<field_type>::getClosure(PetscScalar** valuesCell,
						      PetscInt* valuesSize,
						      const PetscInt cell) const
{ // getClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);CHECK_PETSC_ERROR(err);
} // getClosure

// ----------------------------------------------------------------------
/** Restore coordinates array associated with closure.
 *
 * @param coordsCell Array of coordinates for cell.
 * @param coordsSize Size of coordinates array.
 * @param cell Finite-element cell.
 */
template<typename field_type>
void
pylith::topology::MeshVisitor<field_type>::restoreClosure(PetscScalar** valuesCell,
							  PetscInt* valuesSize,
							  const PetscInt cell) const
{ // restoreClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);CHECK_PETSC_ERROR(err);
} // restoreClosure

// ----------------------------------------------------------------------
// Set values associated with closure.
template<typename field_type>
void
pylith::topology::MeshVisitor<field_type>::setClosure(const PetscScalar* valuesCell,
						      const PetscInt valuesSize,
						      const PetscInt cell,
						      const InsertMode mode) const
{ // setClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecSetClosure(_dm, _section, _localVec, cell, valuesCell, mode);CHECK_PETSC_ERROR(err);
} // setClosure

#endif


// End of file
