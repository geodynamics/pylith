// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_submesh_hh)
#error "SubMesh.icc must be included only from SubMesh.hh"
#else

// Get Sieve mesh.
inline
const ALE::Obj<pylith::topology::Mesh::SieveSubMesh>&
pylith::topology::SubMesh::sieveMesh(void) const {
  return _mesh;
}

// Get Sieve mesh.
inline
ALE::Obj<pylith::topology::Mesh::SieveSubMesh>&
pylith::topology::SubMesh::sieveMesh(void) {
  return _mesh;
}

// Get coordinate system.
inline
const spatialdata::geocoords::CoordSys*
pylith::topology::SubMesh::coordsys(void) const {
  return _coordsys;
}

// Set debug flag.
inline
void
pylith::topology::SubMesh::debug(const bool value) {
  _debug = value;
  if (!_mesh.isNull())
    _mesh->setDebug(value);
}

// Get debug flag.
inline
bool
pylith::topology::SubMesh::debug(void) const {
  return _debug;
}

// Get dimension of mesh.
inline
int
pylith::topology::SubMesh::dimension(void) const {
  return (!_mesh.isNull()) ? _mesh->getDimension() : 0;
}

// Get MPI communicator associated with mesh.
inline
const MPI_Comm
pylith::topology::SubMesh::comm(void) const {
  return (!_mesh.isNull()) ? _mesh->comm() : 0;
}
    
// Print mesh to stdout.
inline
void
pylith::topology::SubMesh::view(const char* label) const {
  _mesh->view(label);
}


#endif


// End of file
