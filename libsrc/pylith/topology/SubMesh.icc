// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_submesh_hh)
#error "SubMesh.icc must be included only from SubMesh.hh"
#else

#include "pylith/utils/petscerror.h" // USES CHECK_PETSC_ERROR

// Get Sieve mesh.
inline
const ALE::Obj<pylith::topology::Mesh::SieveSubMesh>&
pylith::topology::SubMesh::sieveMesh(void) const {
  return _mesh;
}

// Get Sieve mesh.
inline
ALE::Obj<pylith::topology::Mesh::SieveSubMesh>&
pylith::topology::SubMesh::sieveMesh(void) {
  return _mesh;
}

// Get DMComplex mesh.
inline
DM
pylith::topology::SubMesh::dmMesh(void) const {
  return _newMesh;
}

// Set DMComplex mesh.
inline
void
pylith::topology::SubMesh::setDMMesh(DM dm) {
  PetscErrorCode err;
  err = DMDestroy(&_newMesh);CHECK_PETSC_ERROR(err);
  _newMesh = dm;
  err = PetscObjectSetName((PetscObject) _newMesh, "domain");CHECK_PETSC_ERROR(err);
}

// Get point type sizes.
inline
void
pylith::topology::SubMesh::getPointTypeSizes(PetscInt *numNormalCells, PetscInt *numCohesiveCells, PetscInt *numNormalVertices, PetscInt *numShadowVertices, PetscInt *numLagrangeVertices) const {
  *numNormalCells      = 0;
  *numCohesiveCells    = 0;
  *numNormalVertices   = 0;
  *numShadowVertices   = 0;
  *numLagrangeVertices = 0;
}

// Get coordinate system.
inline
const spatialdata::geocoords::CoordSys*
pylith::topology::SubMesh::coordsys(void) const {
  return _coordsys;
}

// Set debug flag.
inline
void
pylith::topology::SubMesh::debug(const bool value) {
  _debug = value;
  if (!_mesh.isNull())
    _mesh->setDebug(value);
}

// Get debug flag.
inline
bool
pylith::topology::SubMesh::debug(void) const {
  return _debug;
}

// Get dimension of mesh.
inline
int
pylith::topology::SubMesh::dimension(void) const {
  return (!_mesh.isNull()) ? _mesh->getDimension() : 0;
}

// Get representative cone size for mesh.
inline
int
pylith::topology::SubMesh::coneSize(void) const {
  
  return (!_mesh.isNull() && numCells() > 0) ? 
    _mesh->getSieve()->getConeSize(*_mesh->heightStratum(1)->begin()) : 0;
}

// Get number of vertices in mesh.
inline
int
pylith::topology::SubMesh::numVertices(void) const {
  return (!_mesh.isNull() && _mesh->depth() > 0) ? _mesh->depthStratum(0)->size() : 0;
}

// Get number of cells in mesh.
inline
int
pylith::topology::SubMesh::numCells(void) const {
  return (!_mesh.isNull() && _mesh->height() > 0) ? _mesh->heightStratum(1)->size() : 0;
}

// Get MPI communicator associated with mesh.
inline
const MPI_Comm
pylith::topology::SubMesh::comm(void) const {
  return (!_mesh.isNull()) ? _mesh->comm() : 0;
}
    
// Print mesh to stdout.
inline
void
pylith::topology::SubMesh::view(const char* label) const {
  assert(_newMesh);
  PetscErrorCode err = DMView(_newMesh, PETSC_VIEWER_STDOUT_WORLD);CHECK_PETSC_ERROR(err);
}


#endif


// End of file
