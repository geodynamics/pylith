// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2013 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_visitormesh_hh)
#error "VisitorMesh.icc must be included only from VisitorMesh.hh"
#else

#include "Mesh.hh" // USES Mesh
#include "Field.hh" // USES Field

#include "pylith/utils/error.h" // USES PYLITH_CHECK_ERROR

// ----------------------------------------------------------------------
// Constructor with field over a mesh.
inline
pylith::topology::VecVisitorMesh::VecVisitorMesh(const Field& field) :
  _dm(NULL),
  _localVec(NULL),
  _section(NULL),
  _localArray(NULL)
{ // constructor
  _dm = field.mesh().dmMesh();assert(_dm);
  initialize(field);
} // constructor

// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::VecVisitorMesh::~VecVisitorMesh(void)
{ // destructor
  clear();
  _dm = NULL;
} // destructor

// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::VecVisitorMesh::initialize(const Field& field)
{ // initialize
  clear();

  _section = field.petscSection();assert(_section);
  _localVec = field.localVector();assert(_localVec);

  PetscErrorCode err = VecGetArray(_localVec, &_localArray);PYLITH_CHECK_ERROR(err);
} // initialize

// ----------------------------------------------------------------------
// Default destructor
inline
void
pylith::topology::VecVisitorMesh::clear(void)
{ // clear
  if (_localVec) {
    PetscErrorCode err = VecRestoreArray(_localVec, &_localArray);PYLITH_CHECK_ERROR(err);assert(!_localArray);
  } // if

  _section = NULL;
  _localVec = NULL;
} // clear

// ----------------------------------------------------------------------
// Get the PETSc section.
inline
PetscSection
pylith::topology::VecVisitorMesh::petscSection(void) const
{ // petscSection
  return _section;
} // petscSection

// ----------------------------------------------------------------------
// Get the local PETSc Vec.
inline
PetscVec
pylith::topology::VecVisitorMesh::localVec(void) const
{ // localVec
  return _localVec;
} // localVec

// ----------------------------------------------------------------------
// Get the local coordinates array associated with the local PETSc Vec.
inline
PetscScalar*
pylith::topology::VecVisitorMesh::localArray(void) const
{ // localArray
  return _localArray;
} // localArray

// ----------------------------------------------------------------------
// Get fiber dimension of values at point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionDof(const PetscInt point) const
{ // sectionDof
  assert(_section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetDof(_section, point, &dof);PYLITH_CHECK_ERROR(err);
  return dof;
} // sectionDof

// ----------------------------------------------------------------------
// Get fiber dimension for constraints at point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionConstraintDof(const PetscInt point) const
{ // sectionConstraintDof
  assert(_section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetConstraintDof(_section, point, &dof);PYLITH_CHECK_ERROR(err);
  return dof;
} // sectionConstraintDof

// ----------------------------------------------------------------------
// Get offset into values array for point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionOffset(const PetscInt point) const
{ // sectionOffset
  assert(_section);
  PetscInt offset;
  PetscErrorCode err = PetscSectionGetOffset(_section, point, &offset);PYLITH_CHECK_ERROR(err);
  return offset;
} // sectionOffset

// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorMesh::getClosure(PetscScalar** valuesCell,
					     PetscInt* valuesSize,
					     const PetscInt cell) const
{ // getClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // getClosure

// ----------------------------------------------------------------------
// Restore coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorMesh::restoreClosure(PetscScalar** valuesCell,
						 PetscInt* valuesSize,
						 const PetscInt cell) const
{ // restoreClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // restoreClosure

// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::VecVisitorMesh::setClosure(const PetscScalar* valuesCell,
					     const PetscInt valuesSize,
					     const PetscInt cell,
					     const InsertMode mode) const
{ // setClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecSetClosure(_dm, _section, _localVec, cell, valuesCell, mode);PYLITH_CHECK_ERROR(err);
} // setClosure

// ----------------------------------------------------------------------
// Default constructor.
inline
pylith::topology::MatVisitorMesh::MatVisitorMesh(const PetscMat mat,
						 const Field& field) :
  _mat(mat),
  _dm(NULL),
  _section(NULL)
{ // constructor
  _dm = field.mesh().dmMesh();assert(_dm);
  _section = field.petscSection();assert(_section);

  initialize();
} // constructor

// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::MatVisitorMesh::~MatVisitorMesh(void)
{ // destructor
  clear();

  _dm = NULL;
  _section = NULL;
} // destructor

// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::MatVisitorMesh::initialize(void)
{ // initialize
  clear();
} // initialize

// ----------------------------------------------------------------------
// Default destructor
inline
void
pylith::topology::MatVisitorMesh::clear(void)
{ // clear
} // clear

// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::MatVisitorMesh::setClosure(const PetscScalar* valuesCell,
					     const PetscInt valuesSize,
					     const PetscInt cell,
					     const InsertMode mode) const
{ // setClosure
  assert(_dm);
  assert(_mat);
  assert(_section);
  PetscErrorCode err = DMPlexMatSetClosure(_dm, _section, NULL, _mat, cell, valuesCell, mode);PYLITH_CHECK_ERROR(err);
} // setClosure


#endif


// End of file
