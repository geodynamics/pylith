// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_multifield_hh)
#error "MultiField.icc must be included only from MultiField.hh"
#else

#include "pylith/utils/petscerror.h" // USES CHECK_PETSC_ERROR

// ----------------------------------------------------------------------
// Get mesh associated with field.
template<typename mesh_type, typename section_type>
inline
const
mesh_type&
pylith::topology::MultiField<mesh_type, section_type>::mesh(void) const {
  return _mesh;
}

// ----------------------------------------------------------------------
// Get Sieve section.
template<typename mesh_type, typename section_type>
inline
const ALE::Obj<section_type>&
pylith::topology::MultiField<mesh_type, section_type>::section(void) const {
  return _section;
}

// ----------------------------------------------------------------------
// Check if fields contains a given field.
template<typename mesh_type>
inline
bool
pylith::topology::PackedFields<mesh_type>::hasField(const char* name) const
{ // hasField
  typename map_type::const_iterator iter = _fields.find(name);
  return iter != _fields.end();
} // hasField


#endif


// End of file
