// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_coordsvisitor_hh)
#error "CoordsVisitor.icc must be included only from CoordsVisitor.hh"
#else

#include "pylith/utils/petscerror.h" // USES CHECK_PETSC_ERROR

// ----------------------------------------------------------------------
// Default constructor.
template<typename mesh_type>
inline
pylith::topology::CoordsVisitor<mesh_type>::CoordsVisitor(const mesh_type& mesh) :
  _mesh(mesh),
  _section(NULL),
  _localVec(NULL),
  _localArray(NULL)
{ // constructor
  _dm = mesh.dmMesh();assert(_dm);
  PetscErrorCode err;
  err = DMPlexGetCoordinateSection(_dm, &_section);CHECK_PETSC_ERROR(err);assert(_section);
  err = DMGetCoordinatesLocal(_dm, &_localVec);CHECK_PETSC_ERROR(err);assert(_localVec);
  err = VecGetArray(_localVec, &_localArray);CHECK_PETSC_ERROR(err);assert(_localArray);
} // constructor

// ----------------------------------------------------------------------
// Default destructor
template<typename mesh_type>
inline
pylith::topology::CoordsVisitor<mesh_type>::~CoordsVisitor(void)
{ // destructor
  if (_localArray) {
    assert(_localVec);
    PetscErrorCode err = VecRestoreArray(_localVec, &_localArray);CHECK_PETSC_ERROR(err);
  } // if

  _localVec = NULL;
  _section = NULL;
} // destructor

// ----------------------------------------------------------------------
// Get the local coordinates array associated with the local PETSc Vec.
template<typename mesh_type>
inline
PetscScalar*
pylith::topology::CoordsVisitor<mesh_type>::localArray(void) const
{ // localArray
  return _localArray;
} // localArray

// ----------------------------------------------------------------------
// Get fiber dimension of coordinates for point.
template<typename mesh_type>
inline
PetscInt
pylith::topology::CoordsVisitor<mesh_type>::sectionDof(const PetscInt point) const
{ // sectionDof
  assert(_section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetDof(_section, point, &dof);CHECK_PETSC_ERROR(err);
  return dof;
} // sectionDof

// ----------------------------------------------------------------------
// Get offset into coordinates array for point.
template<typename mesh_type>
inline
PetscInt
pylith::topology::CoordsVisitor<mesh_type>::sectionOffset(const PetscInt point) const
{ // sectionOffset
  assert(_section);
  PetscInt offset;
  PetscErrorCode err = PetscSectionGetOffset(_section, point, &offset);CHECK_PETSC_ERROR(err);
  return offset;
} // sectionOffset

// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
template<typename mesh_type>
void
pylith::topology::CoordsVisitor<mesh_type>::getClosure(PetscScalar** coordsCell,
						       PetscInt* coordsSize,
						       const PetscInt cell) const
{ // getClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, coordsSize, coordsCell);CHECK_PETSC_ERROR(err);
} // getClosure

// ----------------------------------------------------------------------
  /** Restore coordinates array associated with closure.
   *
   * @param coordsCell Array of coordinates for cell.
   * @param coordsSize Size of coordinates array.
   * @param cell Finite-element cell.
   */
template<typename mesh_type>
void
pylith::topology::CoordsVisitor<mesh_type>::restoreClosure(PetscScalar** coordsCell,
							   PetscInt* coordsSize,
							   const PetscInt cell) const
{ // restoreClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, coordsSize, coordsCell);CHECK_PETSC_ERROR(err);
} // restoreClosure

#endif


// End of file
