// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_fields_hh)
#error "Fields.icc must be included only from Fields.hh"
#endif

#include <sstream> // USES std::ostringstream
#include <stdexcept> // USES std::runtime_error
#include <pylith/utils/petscerror.h> // USES CHECK_PETSC_ERROR

// ----------------------------------------------------------------------
// Default constructor.
template<typename field_type>
pylith::topology::Fields<field_type>::Fields(const typename field_type::Mesh& mesh) :
  _mesh(mesh)
{ // constructor
} // constructor

// ----------------------------------------------------------------------
// Destructor.
template<typename field_type>
pylith::topology::Fields<field_type>::~Fields(void)
{ // destructor
  deallocate();
} // destructor

// ----------------------------------------------------------------------
// Deallocate PETSc and local data structures.
template<typename field_type>
void
pylith::topology::Fields<field_type>::deallocate(void)
{ // deallocate
  const typename map_type::iterator begin = _fields.begin();
  const typename map_type::iterator end = _fields.end();
  for (typename map_type::iterator iter=begin; iter != end; ++iter) {
    delete iter->second; iter->second = 0;
  } // for
  const typename dm_map_type::iterator dmBegin = _dmFields.begin();
  const typename dm_map_type::iterator dmEnd = _dmFields.end();
  for (typename dm_map_type::iterator iter=dmBegin; iter != dmEnd; ++iter) {
    PetscErrorCode err = DMDestroy(&iter->second);CHECK_PETSC_ERROR(err);
  } // for
} // deallocate

// ----------------------------------------------------------------------
// Check if fields contains a given field.
template<typename field_type>
bool
pylith::topology::Fields<field_type>::hasField(const char* name) const
{ // hasField
  typename dm_map_type::const_iterator dmIter = _dmFields.find(name);
  typename map_type::const_iterator iter = _fields.find(name);
  assert((dmIter != _dmFields.end()) == (iter != _fields.end()));
  return iter != _fields.end();
} // hasField

// ----------------------------------------------------------------------
// Add field.
template<typename field_type>
void
pylith::topology::Fields<field_type>::add(const char* name,
					  const char* label)
{ // add
  if (hasField(name)) {
    std::ostringstream msg;
    msg << "Could not add field '" << name
	<< "' to fields manager, because it already exists.";
    throw std::runtime_error(msg.str());
  } // if
  
  _fields[name] = new field_type(_mesh);
  _fields[name]->label(label);
  if (_mesh.dmMesh()) {
    PetscErrorCode err = PetscObjectReference((PetscObject) _mesh.dmMesh());CHECK_PETSC_ERROR(err);
    _dmFields[name] = _mesh.dmMesh();
  }
} // add

// ----------------------------------------------------------------------
// Add field.
template<typename field_type>
void 
pylith::topology::Fields<field_type>::add(
			const char* name,
			const char* label,
			const pylith::topology::FieldBase::DomainEnum domain,
			const int fiberDim)
{ // add
  if (hasField(name)) {
    std::ostringstream msg;
    msg << "Could not add field '" << name
	<< "' to fields manager, because it already exists.";
    throw std::runtime_error(msg.str());
  } // if
  
  _fields[name] = new field_type(_mesh);
  _fields[name]->label(label);
  _fields[name]->newSection(domain, fiberDim);
  if (_mesh.dmMesh()) {
    DM             dm = _mesh.dmMesh(), dmNew;
    PetscSection   sectionNew;
    PetscInt       pStart, pEnd, p;
    PetscErrorCode err;

    err = DMComplexClone(dm, &dmNew);CHECK_PETSC_ERROR(err);
    err = PetscSectionCreate(_mesh.comm(), &sectionNew);CHECK_PETSC_ERROR(err);
    switch(domain) {
    case pylith::topology::FieldBase::VERTICES_FIELD:
      err = DMComplexGetDepthStratum(dmNew, 0, &pStart, &pEnd);CHECK_PETSC_ERROR(err);
      break;
    case pylith::topology::FieldBase::CELLS_FIELD:
      err = DMComplexGetHeightStratum(dmNew, 0, &pStart, &pEnd);CHECK_PETSC_ERROR(err);
      break;
    default:
      throw std::runtime_error("Invalid domain type");
    }
    for(PetscInt p = pStart; p < pEnd; ++p) {
      PetscInt value;

      err = DMComplexGetLabelValue(dmNew, label, p, &value);CHECK_PETSC_ERROR(err);
      if (value) {
        err = PetscSectionSetDof(sectionNew, p, fiberDim);CHECK_PETSC_ERROR(err);
      }
    }
    err = PetscSectionSetUp(sectionNew);CHECK_PETSC_ERROR(err);
    err = DMSetDefaultSection(dmNew, sectionNew);CHECK_PETSC_ERROR(err);
    _dmFields[name] = dmNew;
  }
} // add

// ----------------------------------------------------------------------
// Add field.
template<typename field_type>
void 
pylith::topology::Fields<field_type>::add(
			const char* name,
			const int numFields,
			const int fields[])
{ // add
  if (hasField(name)) {
    std::ostringstream msg;
    msg << "Could not add field '" << name
	<< "' to fields manager, because it already exists.";
    throw std::runtime_error(msg.str());
  } // if
  
  if (_mesh.dmMesh()) {
    DM             dm = _mesh.dmMesh(), dmNew;
    PetscSection   sectionNew;
    PetscInt       pStart, pEnd, p;
    PetscErrorCode err;

    err = DMCreateSubDM(dm, numFields, fields, PETSC_NULL, &dmNew);CHECK_PETSC_ERROR(err);
    _dmFields[name] = dmNew;
  }
} // add

// ----------------------------------------------------------------------
// Delete field.
template<typename field_type>
void
pylith::topology::Fields<field_type>::del(const char* name)
{ // del
  typename map_type::iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager to delete.";
    throw std::runtime_error(msg.str());
  } // if
  delete iter->second; iter->second = 0;
  _fields.erase(name);
  _dmFields.erase(name);
} // del

// ----------------------------------------------------------------------
// Delete field.
template<typename field_type>
inline
void
pylith::topology::Fields<field_type>::delField(const char* name)
{ // delField
  del(name);
} // delField

// ----------------------------------------------------------------------
// Get field.
template<typename field_type>
const field_type&
pylith::topology::Fields<field_type>::get(const char* name) const
{ // get
  typename map_type::const_iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if
  return *iter->second;
} // get
	   
// ----------------------------------------------------------------------
// Get field.
template<typename field_type>
field_type&
pylith::topology::Fields<field_type>::get(const char* name)
{ // get
  typename map_type::iterator iter = _fields.find(name);
  if (iter == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if
  return *iter->second;
} // get
	   
// ----------------------------------------------------------------------
// Get field.
template<typename field_type>
DM
pylith::topology::Fields<field_type>::getDM(const char* name)
{ // get
  typename dm_map_type::iterator iter = _dmFields.find(name);
  if (iter == _dmFields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if
  return *iter->second;
} // get

// ----------------------------------------------------------------------
// Copy layout to other fields.
template<typename field_type>
void
pylith::topology::Fields<field_type>::copyLayout(const char* name)
{ // copyLayout
  typename map_type::const_iterator src = _fields.find(name);
  if (src == _fields.end()) {
    std::ostringstream msg;
    msg << "Could not find field '" << name
	<< "' in fields manager for retrieval.";
    throw std::runtime_error(msg.str());
  } // if

  const typename map_type::iterator begin = _fields.begin();
  const typename map_type::iterator end = _fields.end();
  for (typename map_type::iterator iter=begin; iter != end; ++iter)
    if (iter != src)
      iter->second->cloneSection(*src->second);
} // copyLayout

// ----------------------------------------------------------------------
// Get mesh associated with fields.
template<typename field_type>
const typename field_type::Mesh&
pylith::topology::Fields<field_type>::mesh(void) const
{ // mesh
  return _mesh;
} // mesh

// ----------------------------------------------------------------------
// Get names of all fields
template<typename field_type>
void
pylith::topology::Fields<field_type>::fieldNames(int* numNames, 
						 char*** names) const
{ // fieldNames
  assert(numNames);
  assert(names);

  *numNames = _fields.size();
  *names = new char*[_fields.size()];
  assert(*names);
  const typename map_type::const_iterator namesEnd = _fields.end();
  int i = 0;
  for (typename map_type::const_iterator name = _fields.begin(); 
       name != namesEnd;
       ++name) {
    const char len = name->first.length();
    char* newName = 0;
    if (len > 0) {
      newName = new char[len+1];
      strncpy(newName, name->first.c_str(), len+1);
    } else {
      newName = new char[1];
      newName[0] ='\0';
    } // if/else
    (*names)[i++] = newName;
  } // for
} // fieldNames


// End of file 
