// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2013 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_visitorsubmesh_hh)
#error "VisitorSubMesh.icc must be included only from VisitorSubMesh.hh"
#else

#include "pylith/utils/error.h" // USES PYLITH_CHECK_ERROR

// ----------------------------------------------------------------------
// Default constructor.
inline
pylith::topology::VecVisitorSubMesh::VecVisitorSubMesh(const Field& field,
						       const SubMeshIS& submeshIS) :
  _field(field),
  _dm(NULL),
  _section(NULL),
  _localVec(NULL)
{ // constructor
  initialize(submeshIS);
} // constructor

// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::VecVisitorSubMesh::~VecVisitorSubMesh(void)
{ // destructor
  clear();
} // destructor

// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::VecVisitorSubMesh::initialize(const SubMeshIS& submeshIS)
{ // initialize
  clear();

  _dm = submeshIS.submesh().dmMesh();assert(_dm);

  _localVec = _field.localVector();assert(_localVec);

  PetscErrorCode err;
  PetscSection section = _field.petscSection();assert(section);
  const PetscIS subpointIS = submeshIS.indexSet();
  err = PetscSectionCreateSubmeshSection(section, subpointIS, &_section);PYLITH_CHECK_ERROR(err);assert(_section);
} // initialize

// ----------------------------------------------------------------------
// Clear cached data members.
inline
void
pylith::topology::VecVisitorSubMesh::clear(void)
{ // clear
  PetscErrorCode err = 0;

  if (_section) {
    err = PetscSectionDestroy(&_section);assert(!_section);
  } // if

  _dm = NULL;
  _localVec = NULL;
} // clear

// ----------------------------------------------------------------------
// Get fiber dimension of coordinates for point.
inline
PetscInt
pylith::topology::VecVisitorSubMesh::sectionDof(const PetscInt point) const
{ // sectionDof
  assert(_section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetDof(_section, point, &dof);PYLITH_CHECK_ERROR(err);
  return dof;
} // sectionDof

// ----------------------------------------------------------------------
// Get offset into coordinates array for point.
inline
PetscInt
pylith::topology::VecVisitorSubMesh::sectionOffset(const PetscInt point) const
{ // sectionOffset
  assert(_section);
  PetscInt offset;
  PetscErrorCode err = PetscSectionGetOffset(_section, point, &offset);PYLITH_CHECK_ERROR(err);
  return offset;
} // sectionOffset

// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorSubMesh::getClosure(PetscScalar** valuesCell,
						PetscInt* valuesSize,
						const PetscInt cell) const
{ // getClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // getClosure

// ----------------------------------------------------------------------
// Restore coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorSubMesh::restoreClosure(PetscScalar** valuesCell,
						    PetscInt* valuesSize,
						    const PetscInt cell) const
{ // restoreClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // restoreClosure

// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::VecVisitorSubMesh::setClosure(const PetscScalar* valuesCell,
						const PetscInt valuesSize,
						const PetscInt cell,
						const InsertMode mode) const
{ // setClosure
  assert(_dm);
  assert(_section);
  assert(_localVec);
  PetscErrorCode err = DMPlexVecSetClosure(_dm, _section, _localVec, cell, valuesCell, mode);PYLITH_CHECK_ERROR(err);
} // setClosure

// ----------------------------------------------------------------------
// Default constructor.
inline
pylith::topology::MatVisitorSubMesh::MatVisitorSubMesh(const PetscMat mat,
						       const Field& field,
						       const SubMeshIS& submeshIS) :
  _mat(mat),
  _dm(NULL),
  _subsection(NULL),
  _globalSection(NULL),
  _globalSubsection(NULL)
{ // constructor
  _dm = submeshIS.submesh().dmMesh();assert(_dm);

  PetscIS subpointIS = submeshIS.indexSet();
  PetscSection section = field.petscSection();assert(section);
  PetscSF sf = NULL;
  PetscErrorCode err;
  err = PetscSectionCreateSubmeshSection(section, subpointIS, &_subsection);PYLITH_CHECK_ERROR(err);assert(_subsection);
  err = DMGetPointSF(_dm, &sf);PYLITH_CHECK_ERROR(err);assert(sf);
  err = PetscSectionCreateGlobalSection(section, sf, PETSC_FALSE, &_globalSection);PYLITH_CHECK_ERROR(err);assert(_globalSection);
  err = PetscSectionCreateSubmeshSection(_globalSection, subpointIS, &_globalSubsection);PYLITH_CHECK_ERROR(err);assert(_globalSubsection);

  initialize();
} // constructor

// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::MatVisitorSubMesh::~MatVisitorSubMesh(void)
{ // destructor
  clear();
  
  PetscErrorCode err;
  err = PetscSectionDestroy(&_subsection);assert(!_subsection);
  err = PetscSectionDestroy(&_globalSubsection);assert(!_globalSubsection);
  err = PetscSectionDestroy(&_globalSection);assert(!_globalSection);
} // destructor

// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::MatVisitorSubMesh::initialize(void)
{ // initialize
} // initialize

// ----------------------------------------------------------------------
// Default destructor
inline
void
pylith::topology::MatVisitorSubMesh::clear(void)
{ // clear
} // clear

// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
inline
void
pylith::topology::MatVisitorSubMesh::getClosure(PetscScalar** valuesCell,
						PetscInt* valuesSize,
						const PetscInt cell) const
{ // getClosure
  assert(_dm);
  assert(_subsection);
  assert(_globalSection);
  assert(_globalSubsection);
#if 0 // NOT IMPLEMENTED
  PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
#else
  assert(false);
#endif
} // getClosure

// ----------------------------------------------------------------------
// Restore coordinates array associated with closure.
inline
void
pylith::topology::MatVisitorSubMesh::restoreClosure(PetscScalar** valuesCell,
						    PetscInt* valuesSize,
						    const PetscInt cell) const
{ // restoreClosure
  assert(_dm);
  assert(_subsection);
  assert(_globalSection);
  assert(_globalSubsection);
#if 0 // NOT IMPLEMENTED
  PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
#else
  assert(false);
#endif
} // restoreClosure

// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::MatVisitorSubMesh::setClosure(const PetscScalar* valuesCell,
						const PetscInt valuesSize,
						const PetscInt cell,
						const InsertMode mode) const
{ // setClosure
  assert(_dm);
  assert(_subsection);
  assert(_globalSubsection);
  PetscErrorCode err = DMPlexMatSetClosure(_dm, _subsection, _globalSubsection, _mat, cell, valuesCell, ADD_VALUES);PYLITH_CHECK_ERROR(err);
} // setClosure

// ----------------------------------------------------------------------
// Default constructor.
inline
pylith::topology::SubMeshIS::SubMeshIS(const Mesh& submesh) :
  _submesh(submesh),
  _indexSet(NULL),
  _size(0),
  _points(0)
{ // constructor
  PetscDM dmMesh = submesh.dmMesh();assert(dmMesh);
  PetscErrorCode err;
  err = DMPlexCreateSubpointIS(dmMesh, &_indexSet);PYLITH_CHECK_ERROR(err);
  if (_indexSet) {
    err = ISGetSize(_indexSet, &_size);PYLITH_CHECK_ERROR(err);assert(_size >= 0);
    err = ISGetIndices(_indexSet, &_points);PYLITH_CHECK_ERROR(err);
  } // if
} // constructor

// ----------------------------------------------------------------------
// Default destructor.
inline
pylith::topology::SubMeshIS::~SubMeshIS(void)
{ // destructor
  deallocate();
} // destructor

// ----------------------------------------------------------------------
// Deallocate.
inline
void
pylith::topology::SubMeshIS::deallocate(void)
{ // deallocate
  PetscErrorCode err;
  if (_indexSet) {
    err = ISRestoreIndices(_indexSet, &_points);PYLITH_CHECK_ERROR(err);_points=NULL;
    err = ISDestroy(&_indexSet);PYLITH_CHECK_ERROR(err);assert(!_indexSet);
  } // if
} // deallocate

// ----------------------------------------------------------------------
// Get the submesh.
inline
const pylith::topology::Mesh&
pylith::topology::SubMeshIS::submesh(void) const
{ // submesh
  return _submesh;
} // submesh

// ----------------------------------------------------------------------
// Get PETSc index set.
inline
PetscIS
pylith::topology::SubMeshIS::indexSet(void) const
{ // indexSet
  return _indexSet;
} // indexSet

// ----------------------------------------------------------------------
// Get array of points in index set.
inline
const PetscInt*
pylith::topology::SubMeshIS::points(void) const
{ // points
  return _points;
} // points

// ----------------------------------------------------------------------
// Get number of points in index set.
inline
PetscInt
pylith::topology::SubMeshIS::size(void) const
{ // size
  return _size;
} // size


#endif


// End of file
