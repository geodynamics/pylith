// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University of Chicago
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2011 University of California, Davis
//
// See COPYING for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_field_hh)
#error "Field.icc must be included only from Field.hh"
#else

#include "pylith/utils/petscerror.h" // USES CHECK_PETSC_ERROR

// Get PetscSection.
template<typename mesh_type>
inline
PetscSection
pylith::topology::Field<mesh_type>::petscSection(void) const {
  PetscSection s = PETSC_NULL;
  if (_dm) {
    PetscErrorCode err = DMGetDefaultSection(_dm, &s);CHECK_PETSC_ERROR(err);
  }
  return s;
}

// Get local vector.
template<typename mesh_type>
inline
PetscVec
pylith::topology::Field<mesh_type>::localVector(void) const {
  return _localVec;
}

// Get global vector.
template<typename mesh_type>
inline
PetscVec
pylith::topology::Field<mesh_type>::globalVector(void) const {
  return _globalVec;
}

// Get the local array associated with the local PETSc Vec.
template<typename mesh_type>
inline
PetscScalar*
pylith::topology::Field<mesh_type>::getLocalArray(void) const
{ // getLocalArray
  PetscScalar* localArray = NULL;
  PetscErrorCode err = VecGetArray(_localVec, &localArray);CHECK_PETSC_ERROR(err);
  assert((_localVec && localArray) || (!_localVec && !localArray));

  return localArray;
} // getLocalArray

// Restore local array associated with the local PETSc Vec.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::restoreLocalArray(PetscScalar** localArray) const
{ // restoreLocalArray
  PetscErrorCode err = VecRestoreArray(_localVec, localArray);CHECK_PETSC_ERROR(err);
  assert(!(*localArray));
} // restoreLocalArray

// Get fiber dimension for point.
template<typename mesh_type>
inline
PetscInt
pylith::topology::Field<mesh_type>::sectionDof(const PetscInt point) const
{ // sectionDof
  PetscSection section = petscSection();assert(section);
  PetscInt dof;
  PetscErrorCode err = PetscSectionGetDof(section, point, &dof);CHECK_PETSC_ERROR(err);
  return dof;
} // sectionDof

// Get offset into array for point.
template<typename mesh_type>
inline
PetscInt
pylith::topology::Field<mesh_type>::sectionOffset(const PetscInt point) const
{ // sectionOffset
  PetscSection section = petscSection();assert(section);
  PetscInt offset;
  PetscErrorCode err = PetscSectionGetOffset(section, point, &offset);CHECK_PETSC_ERROR(err);
  return offset;
} // sectionOffset

// Get mesh associated with field.
template<typename mesh_type>
inline
const
mesh_type&
pylith::topology::Field<mesh_type>::mesh(void) const {
  return _mesh;
}

template<typename mesh_type>
inline
PetscDM
pylith::topology::Field<mesh_type>::dmMesh(void) const {
  return _dm;
}

// Get label for field.
template<typename mesh_type>
inline
const char*
pylith::topology::Field<mesh_type>::label(void) const {
  return const_cast<Field*>(this)->_metadata["default"].label.c_str();
}

// Set vector field type
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::vectorFieldType(const VectorFieldEnum value) {
  _metadata["default"].vectorFieldType = value;
}

// Set vector field type
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::vectorFieldType(const std::string& name, const VectorFieldEnum value) {
  const_cast<Field *>(this)->_metadata[name].vectorFieldType = value;
}

// Get vector field type
template<typename mesh_type>
inline
typename pylith::topology::Field<mesh_type>::VectorFieldEnum
pylith::topology::Field<mesh_type>::vectorFieldType(void) const {
  return const_cast<Field *>(this)->_metadata["default"].vectorFieldType;
}

// Set scale for dimensionalizing field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::scale(const PylithScalar value) {
  _metadata["default"].scale = value;
}

// Set scale for dimensionalizing field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::scale(const std::string& name, const PylithScalar value) {
  _metadata[name].scale = value;
}

// Get scale for dimensionalizing field.
template<typename mesh_type>
inline
PylithScalar
pylith::topology::Field<mesh_type>::scale(void) const {
  return const_cast<Field *>(this)->_metadata["default"].scale;
}

// Set flag indicating whether it is okay to dimensionalize field.
template<typename mesh_type>
inline
void
pylith::topology::Field<mesh_type>::addDimensionOkay(const bool value) {
  _metadata["default"].dimsOkay = value;
}

// Set flag indicating whether it is okay to dimensionalize field.
template<typename mesh_type>
inline
bool
pylith::topology::Field<mesh_type>::addDimensionOkay(void) const {
  return const_cast<Field*>(this)->_metadata["default"].dimsOkay;
}

#endif


// End of file
