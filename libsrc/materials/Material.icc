// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ----------------------------------------------------------------------
//

#if !defined(pylith_materials_material_hh)
#error "Material.icc can only be included from Material.hh"
#endif

// Get spatial dimension of material.
inline
int
pylith::materials::Material::dimension(void) const {
  return _dimension;
}

// Set database for material parameters.
inline
void
pylith::materials::Material::dbProperties(spatialdata::spatialdb::SpatialDB* value) {
  _dbProperties = value;
}

// Set database for initial state variables.
inline
void
pylith::materials::Material::dbInitialState(spatialdata::spatialdb::SpatialDB* value) {
  _dbInitialState = value;
}

// Set identifier of material.
inline
void
pylith::materials::Material::id(const int value) {
  _id = value;
}

// Get identifier of material.
inline
int
pylith::materials::Material::id(void) const {
  return _id;
}

// Set name of material.
inline
void
pylith::materials::Material::label(const char* value) {
  _label = value;
}

// Get label of material.
inline
const std::string&
pylith::materials::Material::label(void) const {
  return _label;
}

// Set current time step.
inline
void
pylith::materials::Material::timeStep(const double dt) {
  _dt = dt;
}

// Get current time step.
inline
double
pylith::materials::Material::timeStep(void) const {
  return _dt;
} // timeStep

// Get flag indicating whether Jacobian matrix must be reformed for
// current state.
inline
bool
pylith::materials::Material::needNewJacobian(void) const {
  return _needNewJacobian;
} // needNewJacobian

// Reset flag indicating whether Jacobian matrix must be reformed for
// current state.
inline
void
pylith::materials::Material::resetNeedNewJacobian(void) {
  _needNewJacobian = false;
} // resetNeedNewJacobian

// Compute initial state variables from values in spatial database.
inline
void
pylith::materials::Material::_dbToStateVars(double* const stateValues,
					    const double_array& dbValues) const
{}

// Nondimensionalize state variables.
inline
void
pylith::materials::Material::_nondimStateVars(double* const values,
					      const int nvalues) const
{}
  
// Dimensionalize state variables.
inline
void
pylith::materials::Material::_dimStateVars(double* const values,
					   const int nvalues) const
{}


// End of file 
