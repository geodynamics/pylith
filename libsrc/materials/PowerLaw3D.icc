// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ----------------------------------------------------------------------
//

#if !defined(pylith_materials_powerlaw3d_hh)
#error "PowerLaw3D.icc can only be included from PowerLaw3D.hh"
#endif

#include <cassert> // USES assert()
#include "pylith/utils/macrodefs.h" // USES CALL_MEMBER_FN

// Set current time step.
inline
void
pylith::materials::PowerLaw3D::timeStep(const double dt) {
  // Not sure what to do here.  If we are using full Newton the Jacobian will
  // always need reforming, but SNES may opt not to reform it sometimes.
  _needNewJacobian = true;
  _dt = dt;
} // timeStep

// Compute stress tensor from parameters.
inline
void
pylith::materials::PowerLaw3D::_calcStress(double* const stress,
					   const int stressSize,
					   const double* properties,
					   const int numProperties,
					   const double* stateVars,
					   const int numStateVars,
					   const double* totalStrain,
					   const int strainSize,
					   const double* initialStress,
					   const int initialStressSize,
					   const double* initialStrain,
					   const int initialStrainSize,
					   const bool computeStateVars)
{
  assert(0 != _calcStressFn);
  CALL_MEMBER_FN(*this, _calcStressFn)(stress, stressSize, 
				       properties, numProperties,
				       stateVars, numStateVars,
				       totalStrain, strainSize,
				       initialStress, initialStressSize,
				       initialStrain, initialStrainSize,
				       computeStateVars);
} // _calcStress

// Compute derivatives of elasticity matrix from parameters.
inline
void
pylith::materials::PowerLaw3D::_calcElasticConsts(
					double* const elasticConsts,
					const int numElasticConsts,
					const double* properties,
					const int numProperties,
					const double* stateVars,
					const int numStateVars,
					const double* totalStrain,
					const int strainSize,
					const double* initialStress,
					const int initialStressSize,
					const double* initialStrain,
					const int initialStrainSize)
{
  assert(0 != _calcElasticConstsFn);
  CALL_MEMBER_FN(*this, _calcElasticConstsFn)(elasticConsts, numElasticConsts,
					      properties, numProperties,
					      stateVars, numStateVars,
					      totalStrain, strainSize,
					      initialStress, initialStressSize,
					      initialStrain, initialStrainSize);
} // _calcElasticConsts

// Update state variables after solve.
inline
void
pylith::materials::PowerLaw3D::_updateProperties(double* const stateVars,
						 const int numStateVars,
						 const double* properties,
						 const int numProperties,
						 const double* totalStrain,
						 const int strainSize,
						 const double* initialStress,
						 const int initialStressSize,
						 const double* initialStrain,
						 const int initialStrainSize)
{
  assert(0 != _updatePropertiesFn);
  CALL_MEMBER_FN(*this, _updatePropertiesFn)(stateVars, numStateVars,
					     properties, numProperties,
					     totalStrain, strainSize,
					     initialStress, initialStressSize,
					     initialStrain, initialStrainSize);
} // _updateStateVars

// Compute scalar product, assuming vector form of a tensor.
inline
double
pylith::materials::PowerLaw3D::_scalarProduct(const double* tensor1,
					      const double* tensor2)
{
  const double scalarProduct = tensor1[0] * tensor2[0] +
    tensor1[1] * tensor2[1] +
    tensor1[2] * tensor2[2] +
    2.0 * (tensor1[3] * tensor2[3] +
	   tensor1[4] * tensor2[4] +
	   tensor1[5] * tensor2[5]);
  return scalarProduct;
} // _scalarProduct

// End of file 
