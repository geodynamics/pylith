// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ----------------------------------------------------------------------
//

#if !defined(pylith_materials_elasticmaterial_hh)
#error "ElasticMaterial.icc can only be included from ElasticMaterial.hh"
#endif

#include <cassert>

// Set database for initial stress state.
inline
void
pylith::materials::ElasticMaterial::dbInitialStress(spatialdata::spatialdb::SpatialDB* db) {
  _dbInitialStress = db;
}

// Set database for initial strain state.
inline
void
pylith::materials::ElasticMaterial::dbInitialStrain(spatialdata::spatialdb::SpatialDB* db) {
  _dbInitialStrain = db;
}

// Set whether elastic or inelastic constitutive relations are used.
inline
void
pylith::materials::ElasticMaterial::useElasticBehavior(const bool flag) {
} // useElasticBehavior

// Get flag indicating whether material implements an empty
// _updateProperties() method.
inline
bool
pylith::materials::ElasticMaterial::hasStateVars(void) const {
  return _numVarsQuadPt > 0;
} // usesUpdateProperties

// Get initial stress/strain fields.
inline
const pylith::topology::Fields<pylith::topology::Field<pylith::topology::Mesh> >*
pylith::materials::ElasticMaterial::initialFields(void) const {
  return _initialFields;
} // initialFields

// ----------------------------------------------------------------------
// Compute density for cell at quadrature points.
inline
const pylith::double_array&
pylith::materials::ElasticMaterial::calcDensity(void)
{ // calcDensity
  const int numQuadPts = _numQuadPts;
  const int numPropsQuadPt = _numPropsQuadPt;
  const int numVarsQuadPt = _numVarsQuadPt;
  assert(_propertiesCell.size() == numQuadPts*numPropsQuadPt);
  assert(_stateVarsCell.size() == numQuadPts*numVarsQuadPt);
  assert(_densityCell.size() == numQuadPts*1);

  for (int iQuad=0; iQuad < numQuadPts; ++iQuad)
    _calcDensity(&_densityCell[iQuad],
     &_propertiesCell[iQuad*numPropsQuadPt], numPropsQuadPt,
     &_stateVarsCell[iQuad*numVarsQuadPt], numVarsQuadPt);

  return _densityCell;
} // calcDensity


// End of file 
