[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [example, 2D]
features = [
    Triangular cells,
    pylith.meshio.MeshIOPetsc,
    pylith.problems.TimeDependent,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    spatialdata.spatialdb.ZeroDB,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiopetsc = 1
isotropiclinearelasticity = 1
dirichlettimedependent = 1
faultcohesivekin = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOPetsc
reader.filename = mesh_tri.msh
reader.coordsys.space_dim = 2

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
# Use nonlinear solver to ensure residual and Jacobian are consistent.
solver = nonlinear

# Set the default quadrature order for all subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
defaults.quadrature_order = 1

[pylithapp.problem.solution.subfields.displacement]
# Set the discretization for each of the solution subfields.
basis_order = 1

[pylithapp.problem]
solution_observers = [domain, boundary]
solution_observers.boundary = pylith.meshio.OutputSolnBoundary

[pylithapp.problem.solution_observers.boundary]
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
label = boundary_ypos
label_value = 13

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Create an array of three materials, matching the number of material physical groups we
# used in Gmsh Python script.
[pylithapp.problem]
materials = [slab, crust, wedge]

# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).
# We define properties and the basis order here, since they are the same for all
# examples.
#
# We vary the bulk rheologies, so we use the `SimpleDB` spatial database.
# To specify material properties for a different bulk rheology, we just use
# a different spatial database file.
#
# The `label_value` must match the tag for the physical group in the Gmsh Python script.
[pylithapp.problem.materials.slab]
description = Slab material below main fault
label_value = 0

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Elastic properties for slab
db_auxiliary_field.iohandler.filename = mat_elastic.spatialdb

auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 1
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem.materials.crust]
description = Crust material above main fault
label_value = 1

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Elastic properties for crust
db_auxiliary_field.iohandler.filename = mat_elastic.spatialdb

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem.materials.wedge]
description = Wedge material between main fault and splay
label_value = 2

db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Elastic properties for wedge
db_auxiliary_field.iohandler.filename = mat_elastic.spatialdb

auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.bulk_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.basis_order = 0

derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# For all simulations except Step 4, we have only Dirichlet BC applied along 3 edges.
[pylithapp.problem]
bc = [bc_xneg, bc_xpos, bc_yneg]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent

# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
#
# We apply roller boundary conditions (constrain the displacement component
# perpendicular to the boundary) on the +x, -x, and -y boundaries.
[pylithapp.problem.bc.xpos]
label = boundary_xpos
label_value = 11
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC +x edge

auxiliary_subfields.initial_amplitude.basis_order = 0


[pylithapp.problem.bc.bc_xneg]
label = boundary_xneg
label_value = 10
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -x edge

auxiliary_subfields.initial_amplitude.basis_order = 0


[pylithapp.problem.bc.bc_yneg]
label = boundary_yneg
label_value = 12
constrained_dof = [1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -y edge

auxiliary_subfields.initial_amplitude.basis_order = 0


# End of file
