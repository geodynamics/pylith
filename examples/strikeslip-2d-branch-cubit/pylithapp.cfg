[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [example, 2D, strike slip]
features = [
    Triangular cells,
    pylith.meshio.MeshIOPetsc,
    pylith.problems.TimeDependent,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicLinearElasticity,
    pylith.faults.FaultCohesiveKin,
    pylith.faults.KinSrcStep,
    field split preconditioner,
    Schur complement preconditioner,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.UniformDB,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiopetsc = 1
isotropiclinearelasticity = 1
dirichlettimedependent = 1
faultcohesivekin = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOPetsc
reader.filename = 2D_branch_mesh_tri.exo
reader.coordsys.space_dim = 2

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem]
# Output the solution over the domain and on the +y and -y boundaries.
solution_observers = [domain, top_boundary, bot_boundary]
solution_observers.top_boundary = pylith.meshio.OutputSolnBoundary
solution_observers.bot_boundary = pylith.meshio.OutputSolnBoundary

# `label` and `label_value` correspond to the name and tag of the 
# physical groups marking the boundaries in the Gmsh Python script.
[pylithapp.problem.solution_observers.top_boundary]
label = boundary_ypos
label_value = 23

[pylithapp.problem.solution_observers.bot_boundary]
label = boundary_yneg
label_value = 24

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Create an array of three materials, matching the number of physical groups
# of materials we created in the Gmsh Python script.
[pylithapp.problem]
materials = [elastic_xneg, elastic_xpos,elastic_wedge]

# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).

[pylithapp.problem.materials.elastic_xneg]
# `label_value` must match the tag for the physical group in the Gmsh Python script.
description = Material to on the -x side of the fault
label_value = 1

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties xneg
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 1
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem.materials.elastic_xpos]
description = Material to on the +x side of the fault
label_value = 2

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties xpos
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 4.24*km/s, 5.29*km/s]


# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 0
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0

[pylithapp.problem.materials.elastic_wedge]
description = Material on the wedge
label_value = 3

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties wedge
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 4.24*km/s, 5.29*km/s]
#db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 0
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
# Set the interfaces array to 2 faults.
[pylithapp.problem]
interfaces = [main_fault,branch]


### Define the main fault ###
[pylithapp.problem.interfaces.main_fault]
# The `label` and `label_value` correspond to the name and tag of the
# physical group in the cubit
label = main_fault
label_value = 30

# Output `slip` on the fault.
observers.observer.data_fields = [slip]

### Define the branch fault and the buried edge ###
[pylithapp.problem.interfaces.branch]
# The `label` and `label_value` correspond to the name and tag of the
# physical group in cubit.
label =  branch
label_value = 31
edge = buried_edge
edge_value = 32

# Output `slip` on the fault.
observers.observer.data_fields = [slip]


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Create an array of 2 boundary conditions for the +x and -x boundaries.
[pylithapp.problem]
bc = [bc_xneg, bc_xpos]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent

# The `label` and `label_value` correspond to the name and tag of the
# physical group in the Gmsh Python script.
#
# We constrain both the x and y displacement components on the +x and -x
# boundaries, so we set `constrained_dof=[0,1]`.
# We use the specialized `ZeroDB` to specify zero values for the Dirichlet
# BC. We will override this parameter in some of the .cfg files to specify
# nonzero values.
[pylithapp.problem.bc.bc_xpos]
label = bc_xpos
label_value = 21
constrained_dof = [0, 1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC +x boundary

[pylithapp.problem.bc.bc_xneg]
label = bc_xneg
label_value = 22
constrained_dof = [0, 1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -x boundary


# End of file
