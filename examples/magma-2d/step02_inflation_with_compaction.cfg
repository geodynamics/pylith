[pylithapp.metadata]
base = [pylithapp.cfg]
keywords = [quadrilateral cells]
arguments = [step02_inflation_with_compaction.cfg]

[pylithapp]
dump_parameters.filename = output/step02_inflation_with_compaction-parameters.json
problem.progress_monitor.filename = output/step02_inflation_with_compaction-progress.txt

problem.defaults.name = step02_inflation_with_compaction

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
# For time-dependent problems, we specify start and end times and an initial
# time step. With an initial time step of 0.2 yr, we use a start time of
# -0.2 yr so that the first solution occurs at 0 days.
[pylithapp.timedependent]
start_time = -0.2*year
initial_dt = 0.2*year
end_time = 10.0*year

# ----------------------------------------------------------------------
# initial conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
ic = [domain]
ic.domain = pylith.problems.InitialConditionDomain

# As we enable the auxiliary field update, the formulation switches to
# six fields
solution = pylith.problems.SolnDispPresTracStrainVelPdotTdot

[pylithapp.problem.solution.subfields]
displacement.basis_order = 2
pressure.basis_order = 1
trace_strain.basis_order = 1
velocity.basis_order = 2
pressure_t.basis_order = 1
trace_strain_t.basis_order = 1


[pylithapp.problem.ic.domain]
db = spatialdata.spatialdb.UniformDB
db.description = Initial conditions for domain
db.values = [displacement_x, displacement_y, pressure, trace_strain]
db.data = [0.0*m, 0.0*m, 5.0*MPa, 0.0]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_flow]

bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.DirichletTimeDependent
bc.bc_ypos = pylith.bc.DirichletTimeDependent
bc.bc_flow = pylith.bc.DirichletTimeDependent

# The `label` corresponds to the name of the nodeset in the Cubit `bc.jou` file.
#
# We constrain the displacement component perpendicular to the boundary on the
# +x, -x, and -y boundaries.
[pylithapp.problem.bc.bc_xneg]
constrained_dof = [0]
label = boundary_xneg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -x

[pylithapp.problem.bc.bc_xpos]
constrained_dof = [0]
label = boundary_xpos
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC +x

[pylithapp.problem.bc.bc_yneg]
constrained_dof = [1]
label = boundary_yneg
field = displacement
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC -y

# Constrain the pressure to be zero on the +y boundary (free surface)
[pylithapp.problem.bc.bc_ypos]
constrained_dof = [0]
label = boundary_ypos
field = pressure
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC +z

# Set the flow on the external boundary of the conduit 
[pylithapp.problem.bc.bc_flow]
constrained_dof = [0]
label = boundary_flow
field = pressure
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Flow into external boundary of conduit
db_auxiliary_field.values = [initial_amplitude]
db_auxiliary_field.data = [10.0*MPa]

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# We return to the materials setup as we enable update of the auxiliary fields.


[pylithapp.problem]
# We have two different poroelastic materials each with a linear bulk rheology.
materials = [crust, intrusion]
materials.crust = pylith.materials.Poroelasticity
materials.intrusion = pylith.materials.Poroelasticity

[pylithapp.problem.materials]
crust.bulk_rheology = pylith.materials.IsotropicLinearPoroelasticity
intrusion.bulk_rheology = pylith.materials.IsotropicLinearPoroelasticity

crust.use_state_variables = True
intrusion.use_state_variables = True


[pylithapp.problem.materials.crust]

# `label_value` must match the blocks in `bc.jou` Cubit Journal file.
description = crust
label_value = 1

# We will use uniform material properties, so we use the UniformDB
# spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Poroelastic properties for the crust
# We dial back the biot coefficient to make use of compaction
db_auxiliary_field.values = [solid_density, fluid_density, fluid_viscosity, porosity, shear_modulus, drained_bulk_modulus, biot_coefficient, fluid_bulk_modulus, solid_bulk_modulus, isotropic_permeability]
db_auxiliary_field.data   = [ 2500*kg/m**3,  1000*kg/m**3,      0.001*Pa*s,     0.01,        6e9*Pa,              10e9*Pa,              0.9,             2e9*Pa,            20e9*Pa,             1e-15*m**2]

# Set basis order to 0 for uniform properties and a basis order of 1 for Cauchy stress and strain.
auxiliary_subfields.body_force.basis_order = 0
auxiliary_subfields.solid_density.basis_order = 0
auxiliary_subfields.fluid_density.basis_order = 0
auxiliary_subfields.fluid_viscosity.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.porosity.basis_order = 0
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1
derived_subfields.porosity.basis_order = 0

[pylithapp.problem.materials.crust.bulk_rheology]
# Set basis order to 0 for uniform properties
auxiliary_subfields.drained_bulk_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.biot_coefficient.basis_order = 0
auxiliary_subfields.biot_modulus.basis_order = 0
auxiliary_subfields.isotropic_permeability.basis_order = 0


[pylithapp.problem.materials.intrusion]
# `label_value` must match the blocks in `bc.jou` Cubit Journal file.
description = Intrusion
label_value = 2

# We will use uniform material properties, so we use the UniformDB
# spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Poroelastic properties
db_auxiliary_field.values = [solid_density, fluid_density, fluid_viscosity, porosity, shear_modulus, drained_bulk_modulus, biot_coefficient, fluid_bulk_modulus, solid_bulk_modulus, isotropic_permeability]
db_auxiliary_field.data   = [ 2500*kg/m**3,  1000*kg/m**3,      0.001*Pa*s,     0.1,        6e9*Pa,              10e9*Pa,              0.8,             2e9*Pa,            20e9*Pa,             1e-13*m**2]


# Set basis order to 0 for uniform properties and a basis order of 1 for Cauchy stress and strain.
auxiliary_subfields.body_force.basis_order = 0
auxiliary_subfields.solid_density.basis_order = 0
auxiliary_subfields.fluid_density.basis_order = 0
auxiliary_subfields.fluid_viscosity.basis_order = 0
auxiliary_subfields.gravitational_acceleration.basis_order = 0
auxiliary_subfields.porosity.basis_order = 0
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1
derived_subfields.porosity.basis_order = 0


[pylithapp.problem.materials.intrusion.bulk_rheology]
# Set basis order to 0 for uniform properties
auxiliary_subfields.drained_bulk_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.biot_coefficient.basis_order = 0
auxiliary_subfields.biot_modulus.basis_order = 0
auxiliary_subfields.isotropic_permeability.basis_order = 0

# End of file
