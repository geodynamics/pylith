#!/usr/bin/env python
#
# ----------------------------------------------------------------------
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# <LicenseText>
#
# ----------------------------------------------------------------------
#

## Template for user-defined faults container.
##
## Copy this file to your working directory and rename it as
## appropriate. Note: the extension MUST rename ".odb" for PyLith to
## find it.
##
## To use this container, in your .cfg file, bind this component to
## the interfaces facility of the problem:
##
## [pylithapp.timedependent]
## interfaces = MyFaults
##
## You can then set the properties of the facilities in this container
## just as you would any other Pyre component.
##
## For example:
##
## [pylithapp.timedependent.interfaces.san_andreas]
## label = San Andreas Fault
## id = 2

# Parent class
from pylith.utils.ObjectBin import ObjectBin

# Define new faults container class
#
# You can change the name of this class, but the name here MUST match
# the one in the object_bin() function at the bottom of this file.
class TwoFaults(ObjectBin):
  """
  User-defined boundary conditions container.

  Factory: object_bin
  """

  # INVENTORY //////////////////////////////////////////////////////////

  class Inventory(ObjectBin.Inventory):
    """
    Python object for managing MyBC facilities and properties.
    """

    # Define the facilities in this faults container.
    #
    # You must import any Python objects that are bound to the
    # facilities.
    #
    # Synopsis:
    #
    # facilityName = pyre.inventory.facility("facility_name",
    #   family="fault", factory=ClassNameOfComponent)
    #
    # where ClassNameOfComponent is the class name of the default
    # component to bind to the facility 'facility_name'.

    import pyre.inventory
    
    from pylith.faults.FaultCohesiveKin import FaultCohesiveKin

    fault1 = pyre.inventory.facility("fault_1", family="fault",
                                   factory=FaultCohesiveKin)
    fault1.meta['tip'] = "First fault."
    
    fault2 = pyre.inventory.facility("fault_2", family="fault",
                                   factory=FaultCohesiveKin)
    fault2.meta['tip'] = "Second fault."
    

  # PUBLIC METHODS /////////////////////////////////////////////////////

  # The 'name' argument on the next line defines the default name used
  # to configure this component. Generally, we use the class name in
  # lowercase.
  def __init__(self, name="twofaults"):
    """
    Constructor.
    """
    ObjectBin.__init__(self, name)
    return


  # PRIVATE METHODS ////////////////////////////////////////////////////

  def _configure(self):
    """
    Set attributes from inventory.
    """
    ObjectBin._configure(self)

    # Define how the components are ordered in the container.
    #
    # Synopsis:
    #
    # self.bin = [self.inventory.facilityName1,
    #             self.inventory.facilityName2]
    #
    # Replace the names of the facilities as desired. The names MUST
    # match the VARIABLES in the inventory, as opposed to the names
    # used to bind the components to the facilities, which is the
    # first arugment in the calls to pyre.inventory.facility()).
    #
    # DO NOT change the name 'self.bin'.
    self.bin = [self.inventory.fault1,
                self.inventory.fault2]
    return

  
# FACTORIES ////////////////////////////////////////////////////////////

def object_bin():
  """
  Factory associated with MyFaults.
  """
  # The class name for the container used above MUST match the name
  # used on the next line.
  return TwoFaults()


# End of file 
