// Global mesh object.
// This defines a sqare mesh cut by two fault segments.
mesh = {

  // This is a two-dimensional mesh.
  dimension = 2

  // We are using one-indexing.
  use-index-zero = false

  // Describe the vertices (nodes) defining the mesh.
  vertices = {

    // The vertices are defined in a 2D coordinate system.
    dimension = 2

    // There are 169 vertices.
    count = 169

    // List the coordinates as:
    // Vertex number (starting from zero), x-coord, y-coord
    // Use coordinate units that are consistent with the other units used.
    coordinates = {
      1    0.000000  0.000000
      2    1.500000  0.000000
      3    3.000000  0.000000
      4    4.500000  0.000000
      5    6.000000  0.000000
      6    7.500000  0.000000
      7    9.000000  0.000000
      8   10.500000  0.000000
      9   12.000000  0.000000
      10    0.000000  1.500000
      11    1.500000  1.500000
      12    3.000000  1.500000
      13    4.500000  1.500000
      14    6.000000  1.500000
      15    7.500000  1.500000
      16    9.000000  1.500000
      17   10.500000  1.500000
      18   12.000000  1.500000
      19    0.000000  3.000000
      20    1.500000  3.000000
      21    3.000000  3.000000
      22    4.500000  3.000000
      23    6.000000  3.000000
      24    7.500000  3.000000
      25    9.000000  3.000000
      26   10.500000  3.000000
      27   12.000000  3.000000
      28    0.000000  4.500000
      29    1.500000  4.500000
      30    3.000000  4.500000
      31    4.500000  4.500000
      32    6.000000  4.500000
      33    7.500000  4.500000
      34    9.000000  4.500000
      35   10.500000  4.500000
      36   12.000000  4.500000
      37    0.000000  6.000000
      38    1.500000  6.000000
      39    3.000000  6.000000
      40    4.500000  6.000000
      41    6.000000  6.000000
      42    7.500000  6.000000
      43    9.000000  6.000000
      44   10.500000  6.000000
      45   12.000000  6.000000
      46    0.000000  7.500000
      47    1.500000  7.500000
      48    3.000000  7.500000
      49    4.500000  7.500000
      50    6.000000  7.500000
      51    7.500000  7.500000
      52    9.000000  7.500000
      53   10.500000  7.500000
      54   12.000000  7.500000
      55    0.000000  9.000000
      56    1.500000  9.000000
      57    3.000000  9.000000
      58    4.500000  9.000000
      59    6.000000  9.000000
      60    7.500000  9.000000
      61    9.000000  9.000000
      62   10.500000  9.000000
      63   12.000000  9.000000
      64    0.000000 10.500000
      65    1.500000 10.500000
      66    3.000000 10.500000
      67    4.500000 10.500000
      68    6.000000 10.500000
      69    7.500000 10.500000
      70    9.000000 10.500000
      71   10.500000 10.500000
      72   12.000000 10.500000
      73    0.000000 12.000000
      74    1.500000 12.000000
      75    3.000000 12.000000
      76    4.500000 12.000000
      77    6.000000 12.000000
      78    7.500000 12.000000
      79    9.000000 12.000000
      80   10.500000 12.000000
      81   12.000000 12.000000
      82    0.000000 13.000000
      83    1.375000 13.000000
      84    2.750000 13.000000
      85    4.125000 13.000000
      86    5.500000 13.000000
      87    6.875000 13.000000
      88    8.250000 13.000000
      89    9.625000 13.000000
      90   11.000000 13.000000
      91    0.000000 14.000000
      92    1.250000 14.000000
      93    2.500000 14.000000
      94    3.750000 14.000000
      95    5.000000 14.000000
      96    6.250000 14.000000
      97    7.500000 14.000000
      98    8.750000 14.000000
      99   10.000000 14.000000
      100    0.000000 15.000000
      101    1.125000 15.000000
      102    2.250000 15.000000
      103    3.375000 15.000000
      104    4.500000 15.000000
      105    5.625000 15.000000
      106    6.750000 15.000000
      107    7.875000 15.000000
      108    9.000000 15.000000
      109    0.000000 16.000000
      110    1.000000 16.000000
      111    2.000000 16.000000
      112    3.000000 16.000000
      113    4.000000 16.000000
      114    5.000000 16.000000
      115    6.000000 16.000000
      116    7.000000 16.000000
      117    8.000000 16.000000
      118   13.000000  0.000000
      119   14.000000  0.000000
      120   15.000000  0.000000
      121   16.000000  0.000000
      122   13.000000  1.500000
      123   14.000000  1.500000
      124   15.000000  1.500000
      125   16.000000  1.500000
      126   13.000000  3.000000
      127   14.000000  3.000000
      128   15.000000  3.000000
      129   16.000000  3.000000
      130   13.000000  4.500000
      131   14.000000  4.500000
      132   15.000000  4.500000
      133   16.000000  4.500000
      134   13.000000  6.000000
      135   14.000000  6.000000
      136   15.000000  6.000000
      137   16.000000  6.000000
      138   13.000000  7.500000
      139   14.000000  7.500000
      140   15.000000  7.500000
      141   16.000000  7.500000
      142   13.000000  9.000000
      143   14.000000  9.000000
      144   15.000000  9.000000
      145   16.000000  9.000000
      146   13.000000 10.500000
      147   14.000000 10.500000
      148   15.000000 10.500000
      149   16.000000 10.500000
      150   13.000000 12.000000
      151   14.000000 12.000000
      152   15.000000 12.000000
      153   16.000000 12.000000
      154   16.000000 13.000000
      155   16.000000 14.000000
      156   16.000000 15.000000
      157   16.000000 16.000000
      158   14.750000 13.000000
      159   14.500000 14.000000
      160   14.250000 15.000000
      161   14.000000 16.000000
      162   13.500000 13.000000
      163   13.000000 14.000000
      164   12.500000 15.000000
      165   12.000000 16.000000
      166   12.250000 13.000000
      167   11.500000 14.000000
      168   10.750000 15.000000
      169   10.000000 16.000000
    }
  }

  // Describe the cells (elements) composing the mesh.
  cells = {

    // There are 144 cells.
    count = 144

    // These are bilinear quadrilateral cells, so there are 4 corners per cell.
    num-corners = 4

    // List the vertices composing each cell,
    // moving counter-clockwise around the cell.
    // List the information as:
    // Cell number (starting from zero), vertex 0, vertex 1, vertex 2, vertex 3
    simplices = {
      1    1    2   11   10
      2    2    3   12   11
      3    3    4   13   12
      4    4    5   14   13
      5    5    6   15   14
      6    6    7   16   15
      7    7    8   17   16
      8    8    9   18   17
      9   10   11   20   19
      10   11   12   21   20
      11   12   13   22   21
      12   13   14   23   22
      13   14   15   24   23
      14   15   16   25   24
      15   16   17   26   25
      16   17   18   27   26
      17   19   20   29   28
      18   20   21   30   29
      19   21   22   31   30
      20   22   23   32   31
      21   23   24   33   32
      22   24   25   34   33
      23   25   26   35   34
      24   26   27   36   35
      25   28   29   38   37
      26   29   30   39   38
      27   30   31   40   39
      28   31   32   41   40
      29   32   33   42   41
      30   33   34   43   42
      31   34   35   44   43
      32   35   36   45   44
      33   37   38   47   46
      34   38   39   48   47
      35   39   40   49   48
      36   40   41   50   49
      37   41   42   51   50
      38   42   43   52   51
      39   43   44   53   52
      40   44   45   54   53
      41   46   47   56   55
      42   47   48   57   56
      43   48   49   58   57
      44   49   50   59   58
      45   50   51   60   59
      46   51   52   61   60
      47   52   53   62   61
      48   53   54   63   62
      49   55   56   65   64
      50   56   57   66   65
      51   57   58   67   66
      52   58   59   68   67
      53   59   60   69   68
      54   60   61   70   69
      55   61   62   71   70
      56   62   63   72   71
      57   64   65   74   73
      58   65   66   75   74
      59   66   67   76   75
      60   67   68   77   76
      61   68   69   78   77
      62   69   70   79   78
      63   70   71   80   79
      64   71   72   81   80
      65   73   74   83   82
      66   74   75   84   83
      67   75   76   85   84
      68   76   77   86   85
      69   77   78   87   86
      70   78   79   88   87
      71   79   80   89   88
      72   80   81   90   89
      73   82   83   92   91
      74   83   84   93   92
      75   84   85   94   93
      76   85   86   95   94
      77   86   87   96   95
      78   87   88   97   96
      79   88   89   98   97
      80   89   90   99   98
      81   91   92  101  100
      82   92   93  102  101
      83   93   94  103  102
      84   94   95  104  103
      85   95   96  105  104
      86   96   97  106  105
      87   97   98  107  106
      88   98   99  108  107
      89  100  101  110  109
      90  101  102  111  110
      91  102  103  112  111
      92  103  104  113  112
      93  104  105  114  113
      94  105  106  115  114
      95  106  107  116  115
      96  107  108  117  116
      97    9  118  122   18
      98  118  119  123  122
      99  119  120  124  123
      100  120  121  125  124
      101   18  122  126   27
      102  122  123  127  126
      103  123  124  128  127
      104  124  125  129  128
      105   27  126  130   36
      106  126  127  131  130
      107  127  128  132  131
      108  128  129  133  132
      109   36  130  134   45
      110  130  131  135  134
      111  131  132  136  135
      112  132  133  137  136
      113   45  134  138   54
      114  134  135  139  138
      115  135  136  140  139
      116  136  137  141  140
      117   54  138  142   63
      118  138  139  143  142
      119  139  140  144  143
      120  140  141  145  144
      121   63  142  146   72
      122  142  143  147  146
      123  143  144  148  147
      124  144  145  149  148
      125   72  146  150   81
      126  146  147  151  150
      127  147  148  152  151
      128  148  149  153  152
      129  153  154  158  152
      130  154  155  159  158
      131  155  156  160  159
      132  156  157  161  160
      133  152  158  162  151
      134  158  159  163  162
      135  159  160  164  163
      136  160  161  165  164
      137  151  162  166  150
      138  162  163  167  166
      139  163  164  168  167
      140  164  165  169  168
      141  150  166   90   81
      142  166  167   99   90
      143  167  168  108   99
      144  168  169  117  108
    }

    // List the material ID's associated with each cell.
    // Different ID's may be used to specify a different material type, or
    // to use a different spatial database for each material ID.
    material-ids = {
      1    1
      2    1
      3    1
      4    1
      5    1
      6    1
      7    1
      8    1
      9    1
      10    1
      11    1
      12    1
      13    1
      14    1
      15    1
      16    1
      17    1
      18    1
      19    1
      20    1
      21    1
      22    1
      23    1
      24    1
      25    1
      26    1
      27    1
      28    1
      29    1
      30    1
      31    1
      32    1
      33    1
      34    1
      35    1
      36    1
      37    1
      38    1
      39    1
      40    1
      41    1
      42    1
      43    1
      44    1
      45    1
      46    1
      47    1
      48    1
      49    1
      50    1
      51    1
      52    1
      53    1
      54    1
      55    1
      56    1
      57    1
      58    1
      59    1
      60    1
      61    1
      62    1
      63    1
      64    1
      65    1
      66    1
      67    1
      68    1
      69    1
      70    1
      71    1
      72    1
      73    1
      74    1
      75    1
      76    1
      77    1
      78    1
      79    1
      80    1
      81    1
      82    1
      83    1
      84    1
      85    1
      86    1
      87    1
      88    1
      89    1
      90    1
      91    1
      92    1
      93    1
      94    1
      95    1
      96    1
      97    2
      98    2
      99    2
      100    2
      101    2
      102    2
      103    2
      104    2
      105    2
      106    2
      107    2
      108    2
      109    2
      110    2
      111    2
      112    2
      113    2
      114    2
      115    2
      116    2
      117    2
      118    2
      119    2
      120    2
      121    2
      122    2
      123    2
      124    2
      125    2
      126    2
      127    2
      128    2
      129    2
      130    2
      131    2
      132    2
      133    2
      134    2
      135    2
      136    2
      137    2
      138    2
      139    2
      140    2
      141    2
      142    2
      143    2
      144    2
    }
  }

  // Here we list different groups (cells or vertices) that we want to associate
  // with a particular name (ID).

  // This group of vertices may be used to define a fault.
  group = {
    name = fault_1
    type = vertices
    count = 5
    indices = {
      117
      108
      99
      90
      81
    }
  }

  // This group of vertices may be used to define a fault.
  group = {
    name = fault_2
    type = vertices
    count = 8
    indices = {
      72
      63
      54
      45
      36
      27
      18
      9
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  group = {
    name = y_neg
    type = vertices
    count = 13
    indices = {
      1
      2
      3
      4
      5
      6
      7
      8
      9
      118
      119
      120
      121
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  group = {
    name = x_neg
    type = vertices
    count = 13
    indices = {
      1
      10
      19
      28
      37
      46
      55
      64
      73
      82
      91
      100
      109
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  group = {
    name = x_pos
    type = vertices
    count = 13
    indices = {
      121
      125
      129
      133
      137
      141
      145
      149
      153
      154
      155
      156
      157
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  group = {
    name = y_pos
    type = vertices
    count = 13
    indices = {
      109
      110
      111
      112
      113
      114
      115
      116
      117
      169
      165
      161
      157
    }
  }
}
