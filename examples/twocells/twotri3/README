This directory contains a set of 3 elastic plane strain example
problems. All problems share the same mesh and material properties,
with the only differences being in the boundary conditions.  The mesh
consists of two triangles forming a square.  The information describing
the examples may be divided into four groups:

1.  Global mesh information:  described in file twotri3.mesh

2.  Parameter settings common to all examples:  described in file
pylithapp.cfg.

3.  Material properties common to all examples:  described in the
database file matprops.cfg.

4.  Example-specific parameters and boundary condition specifications.

The examples and associated files are:

1.  axialdisp:  Axial displacements are applied to the lower left and
upper right corners of the square.
  a.  axialdisp.cfg:  Parameter settings for this problem.
  b.  axialdisp.spatialdb:  Boundary condition database for this
      problem.

2.  sheardisp:  The left edge of the square is pinned in the x-direction
and moved downward in the y-direction, while the right edge is moved
upward in the y-direction.
  a.  sheardisp.cfg:  Parameter settings for this problem.
  b.  sheardisp.spatialdb:  Boundary condition database for this
      problem.

3.  dislocation:  Fault displacements are applied between the two
triangles, while the lower left and upper right corners are fixed in
x and y.
  a.  dislocation.cfg:  Parameter settings for this problem.
  b.  dislocation.spatialdb:  Boundary condition database for this
      problem.
  c.  dislocation_disp.spatialdb:  Fault slip database for this problem.
  d.  dislocation_sliprate.spatialdb:  Fault slip rate database for this
      problem.
  e.  dislocation_sliptime.spatialdb:  Fault slip time database for this
      problem.

All of the files are documented.  The 'pylithapp.cfg' file is read
automatically when running PyLith.  To add to or override these
settings, you may place an additional .cfg file on the command line.
To run the examples, you can type:
pylith axialdisp.cfg
pylith sheardisp.cfg
pylith dislocation.cfg

Each of these commands will produce a corresponding VTK file, which may be viewed with visualization packages such as ParaView or Mayavi.
