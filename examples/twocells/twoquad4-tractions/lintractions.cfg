# -*- Python -*-

# The settings in this file (axialdisp.cfg) will be read if it is
# specified on the command line:
# 'pylith axialdisp.cfg'

# If this file is given, the settings in this file will override all
# others except for parameters specified directly on the command line.

# These setting define an implicit problem with Dirichlet (displacement)
# boundary conditions extending the rectangular mesh along the x-axis.

[pylithapp]

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
# Specify the problem settings.
# This is a time-dependent problem so we use that facility.
[pylithapp.timedependent]

# We want an implicit formulation.
formulation = pylith.problems.Implicit

# This is a container for a boundary condition specified on four sides
# of a rectangular domain.
bc = pylith.bc.BCFourSides
bc.y_neg = pylith.bc.Neumann

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Provide information on the boundary conditions.

# Boundary conditions to be applied to the top (+y) of the mesh.
[pylithapp.timedependent.bc.y_pos]

# We are fixing the 1 (y) degree of freedom.
fixed_dof = [1]

# The nodes associated with this boundary condition have the name
# 'all_top' in the mesh file.
label = top_corners

# We are assigning the label 'Dirichlet x BC +y edge' to the database.
db.label = Dirichlet BC +y edge

# The name of the file containing the spatial database for the BC
# specification.
db.iohandler.filename = fixed_disp.spatialdb
db.query_type = nearest


# Boundary conditions to be applied to the positive x-side of the mesh.
# Note that this is a kludge -- this is really just a single node at
# the top of the mesh that we are pinning in the x-direction.
[pylithapp.timedependent.bc.x_pos]

# We are fixing the 0 (x) and 1 (y) degrees of freedom.
fixed_dof = [0, 1]

# The nodes associated with this boundary condition have the name
# 'mid_top' in the mesh file.
label = mid_top

# We are assigning the label 'Dirichlet x BC +y edge' to the database.
db.label = Dirichlet x BC +y edge

# The name of the file containing the spatial database for the BC
# specification.
db.iohandler.filename = fixed_disp.spatialdb
db.query_type = nearest


# Traction BC to be applied to the bottom of the mesh.
[pylithapp.timedependent.bc.y_neg]

# The nodes associated with this boundary condition have the name
# 'all_bottom' in the mesh file.
label = all_bottom

# We are assigning the label 'Neumann BC -y edge' to the database.
db.label = Neumann BC -y edge

# The name of the file containing the spatial database for the BC
# specification.
db.iohandler.filename = lintractions.spatialdb
db.query_type = linear
quadrature = pylith.feassemble.quadrature.Quadrature1Din2D
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for vtk output.
[pylithapp.problem.formulation.output.output]
filename = lintractions.vtk
