# -*- Python -*-

# This is a simple problem to demonstrate the usage of Neumann
# (traction) boundary conditions. 
#
# >----------------------- ->
#  |                     |
#  |                     | ->
# >|                     |
#  |                     | ->
#  |                     |
# >----------------------- ->
#  ^          ^          ^
#
# Left boundary is pinned in the horizontal direction (x direction).
# Bottom boundary is pinned in the vertical direction (y direction).
# Right side has a uniform horizontal (x) traction of 4.0e+08 Pa
#
# The uniform normal traction generates a uniform stress field within
# the domain, where the xx-component is equal to the applied
# traction. The yy and xy components are both zero. The corresponding
# strain field is:
#
# exx = (1 - nu^2) * N/E
# eyy = -nu * (1 + nu) * N/E
# exy = 0
#
# where nu is Poisson's ratio (0.25 for this problem), E is Young's modulus
# (75 GPa for this problem), and N is the applied normal traction (400 MPa
# for this problem). Integrating the strain-displacement relations and using
# the applied displacement BC, the corresponding displacement field is:
#
# u = (1 - nu^2) * N * (x - x0)/E
# v = nu * (1 + nu) * N * (y0 - y)/E
#
# where x0 and y0 are the minimum x and y-values respectively, along which
# displacements are fixed. Using the mesh, properties, and boundary conditions
# for this problem, the solution should be:
#
# exx = 5.0e-3
# eyy = -1.66667e-3
# exy = 0.0
#
# (-2,-1): u = 0.0,  v = -0.003333
# (-2, 1): u = 0.0,  v =  0.0
# ( 0,-1): u = 0.01, v = -0.003333
# ( 0, 1): u = 0.01, v =  0.0
# ( 2,-1): u = 0.02, v = -0.003333
# ( 2, 1): u = 0.02, v =  0.0
#
# To run this problem, type "pylith axialtract.cfg". The settings in
# pylithapp.cfg will be read by default. See the README for how to run
# other problems in this directory.
#

[pylithapp]
# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
# Specify the problem settings.
# This is a time-dependent problem so we use that facility.
[pylithapp.timedependent]

# We want an implicit formulation.
formulation = pylith.problems.Implicit

# Set bc to an array with 3 boundary conditions: 'x_neg', 'x_pos', 'y_neg'.
bc = [x_neg,x_pos,y_neg]

# Change the BC on the +x side of the domain to a Neumann (traction) BC.
bc.x_pos = pylith.bc.Neumann

# Set interfaces to an array with 1 fault: 'fault'.
interfaces = [fault]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------

# BC for the left (-x) side of the domain.
[pylithapp.timedependent.bc.x_neg]

# We are fixing the 0 (x) degree of freedom.
fixed_dof = [0]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'x_neg'.
label = x_neg

# Boundary conditions to be applied to the positive x-side of the mesh.
[pylithapp.timedependent.bc.x_pos]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'x_pos'.
label = x_pos

db = spatialdata.spatialdb.SimpleDB

# We are assigning the label 'Dirichlet BC +x edge' to the database.
db.label = Neumann BC +x edge

# The name of the file containing the spatial database for the BC
# specification.
db.iohandler.filename = axialtract.spatialdb
db.query_type = nearest

quadrature = pylith.feassemble.quadrature.Quadrature1Din2D
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

# Boundary conditions to be applied to the bottom boundary of the mesh.
[pylithapp.timedependent.bc.y_neg]

# We are fixing the 1 (y) degree of freedom.
fixed_dof = [1]

# The group of vertices in the mesh file associated with this boundary
# condition have the name 'y_neg'.
label = y_neg

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
# Provide information on the fault (interface).
[pylithapp.timedependent.interfaces]

# Define fault properties.
[pylithapp.timedependent.interfaces.fault]

# The nodes associated with this fault have the name 'fault' in the mesh file.
label = fault

# NOTE: It is possible to assign an ID number to a fault (e.g.,
# 'id = 10').  Care must be taken when doing this, however, because the
# assigned ID will become the material ID for the cohesive element.
# This ID must not conflict with any of the material ID numbers for
# volume elements.  The default ID for a fault is 100.  If you have a
# fault in your mesh you must:
# 1.  If you create your own fault ID, make sure it does not conflict
#     with any of you material ID's.
# 2.  If you use the default fault ID, make sure that none of your
#     material ID's are equal to 100.

# We need the material database for the fault to properly condition the
# system of equations.

mat_db.iohandler.filename = matprops.spatialdb

# The quadrature for a 2D fault is 1D with a linear shape.
quadrature = pylith.feassemble.quadrature.Quadrature1Din2D
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1

# Give the spatial databases specifying the fault slip.
[pylithapp.timedependent.interfaces.fault.eq_srcs.rupture.slip_function]

# Database specifying zero fault slip.
slip.iohandler.filename = dislocation_slip_zero.spatialdb

# Database specifying time at which fault slips (0.0 s).
slip_time.iohandler.filename = dislocation_sliptime.spatialdb

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK output of solution over domain.
[pylithapp.problem.formulation.output.output.writer]
filename = axialtract.vtk

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.material.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = axialtract-statevars.vtk

# Give basename for VTK output of traction BC information.
[pylithapp.timedependent.bc.x_pos.output]
cell_info_fields = [tractions]
writer.filename = axialtract-tractions.vtk

# Give basename for VTK fault output.
[pylithapp.timedependent.interfaces.fault.output.writer]
filename = axialtract-fault.vtk
