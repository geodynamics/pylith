[pylithapp]

# This is not a self-contained simulation configuration file. This
# file only specifies parameters specific to the boundary and
# interface conditions. The general parameters are specificed in the
# pylithapp.cfg file which is read by default.
#
# To run the simulation:
# pylith step04.cfg

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Set the BC to an array with 2 boundary conditions.
bc = x_pos,x_neg

# Set the interfaces to an array with 1 fault.
interfaces = fault

[pylithapp.timedependent.implicit]
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (subset of domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
# Refine mesh by a factor of 2
refiner = pylith.topology.RefineUniform

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------

# We use the default spatial database for the Dirichlet BC which sets
# the displacements to zero for all time.
#
# Set the parameters for the desired boundary conditions. Note that we
# only use a subset of the boundary conditions provided in the 6 BC
# container.
#
# Note: A more natural set of boundary conditions involves pinning the
# z-DOF on the bottom (-z) face. Howver, the current release of PyLith
# does not permit overlapping fault interfaces and Dirichlet boundary
# conditions with the block Jacobi preconditioner.

# The label corresponds to the label in LaGriT.

[pylithapp.timedependent.bc.x_pos]
bc_dof = [0, 1, 2]
label = boundary_xp
db_initial.label = Dirichlet BC on +x

[pylithapp.timedependent.bc.x_neg]
bc_dof = [0, 1, 2]
label = boundary_xm
db_initial.label = Dirichlet BC on -x

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent.interfaces]
# Set the type of fault interface condition.
fault = pylith.faults.FaultCohesiveKin

# Set the parameters for the fault interface condition.

[pylithapp.timedependent.interfaces.fault]
label = fault
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

[pylithapp.timedependent.interfaces.fault.eq_srcs.rupture.slip_function]
slip.label = Final slip
slip.iohandler.filename = spatialdb/finalslip.spatialdb
slip_time.label = Slip time
slip_time.iohandler.filename = spatialdb/sliptime.spatialdb


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Set the root name for output.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/step04.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
label = boundary_zp
writer.filename = output/step04-groundsurf.vtk

# Give basename for vtk fault output.
[pylithapp.timedependent.interfaces.fault.output]
writer.filename = output/step04-fault.vtk

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.elastic.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/step04-elastic.vtk

[pylithapp.timedependent.materials.viscoelastic.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/step04-viscoelastic.vtk

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]

# Field split preconditioning. As in step02, we use an algebraic
# multigrid preconditioner from Trilinos/ML built via PETSc on each
# component of the displacement field. We also apply a custom
# preconditioner for the Lagrange multiplier vertices. In this way, we
# split the fields.
[pylithapp.timedependent.formulation]
split_fields = True
# Use custom preconditioning for the Lagrange multiplier vertices
use_custom_constraint_pc = True
matrix_type = aij

[pylithapp.petsc]
# Note that with 3 displacement components plus the Lagrange
# multiplier vertices, we have split the fields into 2.
fs_pc_type = fieldsplit
fs_pc_fieldsplit_real_diagonal = true
fs_pc_fieldsplit_type = multiplicative
fs_fieldsplit_0_pc_type = ml
fs_fieldsplit_1_pc_type = jacobi
fs_fieldsplit_0_ksp_type = preonly
fs_fieldsplit_1_ksp_type = preonly
