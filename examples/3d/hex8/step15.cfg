# -*- Python -*-
[pylithapp]

# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------

#
# This problem demonstrates the use of gravitational body forces for an
# elastic problem. The boundary conditions are extremely simple, and are
# applied to the -x, +x, -y, +y, and -z faces. For each of these faces,
# displacements are pinned in the direction normal to the face.
# The gravity field is specified using spatialdata.spatialdb.GravityField,
# which can be used for either Cartesian or projected coordinate systems.
# For Cartesian coordinate systems, users can also specify gravity_dir
# (the default is [0.0,0.0,-1.0]).
# The resulting stress field should be rho*g*h for Stress_zz, and should
# be rho*g*h*pr/(1-pr), for Stress_xx and Stress_yy, where pr is Poisson's
# ratio.
# We make the lower_crust material generalized Maxwell viscoelastic, and
# allow the stresses to relax for 200 years, so they begin approaching and
# isotropic stress state in the lower crust.

# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------

# This is not a self-contained simulation configuration file. This
# file only specifies parameters specific to tutorial step15.
# The general parameters are specificed in the pylithapp.cfg
# file which PyLith reads by default.
#
# To run the simulation:
# pylith step15.cfg
#
# Output will be directed to the directory step15.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Set bc to an array of 5 boundary conditions: 'x_pos','x_neg', 'y_pos',
# 'y_neg', and 'z_neg'.
bc = [x_pos,x_neg,y_pos,y_neg,z_neg]

# Set gravity field (default is None)
gravity_field = spatialdata.spatialdb.GravityField

[pylithapp.timedependent.implicit]
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (subset of domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# Change time stepping algorithm from uniform time step, to adaptive
# time stepping.
time_step = pylith.problems.TimeStepAdapt

# Change the total simulation time to 200 years, and set the maximum time
# step size to 10 years.
[pylithapp.timedependent.implicit.time_step]
total_time = 200.0*year
max_dt = 10.0*year
stability_factor = 1.0 ; use time step equal to stable value from materials

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Change material type of lower crust to generalized Maxwell viscoelastic.
[pylithapp.timedependent]
materials.lower_crust = pylith.materials.GenMaxwellIsotropic3D

# Provide a spatial database from which to obtain property values.
# Since there are additional properties and state variables for the
# generalized Maxwell model, we explicitly request that they be output.
# Properties are named in cell_info_fields and state variables are named in
# cell_data_fields.
[pylithapp.timedependent.materials.lower_crust]
db_properties.iohandler.filename = spatialdb/mat_genmaxwell.spatialdb
output.cell_info_fields = [density,mu,lambda,shear_ratio,maxwell_time]
output.cell_data_fields = [total_strain,stress,viscous_strain_1,viscous_strain_2,viscous_strain_3]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# We use the default ZeroDispDB for all boundaries, since we just want
# zero displacements in the direction normal to each face.

# The label corresponds to the name of the nodeset in CUBIT.

[pylithapp.timedependent.bc.x_pos]
bc_dof = [0]
label = face_xpos
db_initial.label = Dirichlet BC on +x

[pylithapp.timedependent.bc.x_neg]
bc_dof = [0]
label = face_xneg
db_initial.label = Dirichlet BC on -x

[pylithapp.timedependent.bc.y_pos]
bc_dof = [1]
label = face_ypos
db_initial.label = Dirichlet BC on +y

[pylithapp.timedependent.bc.y_neg]
bc_dof = [1]
label = face_yneg
db_initial.label = Dirichlet BC on -y

[pylithapp.timedependent.bc.z_neg]
bc_dof = [2]
label = face_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain]
# We specify that output occurs in terms of a given time frequency, and
# ask for output every 40 years. The time stamps of the output files are
# in years (rather than the default of seconds), and we give a format for
# the time stamp.
output_freq = time_step
time_step = 40.0*year
writer.filename = output/step15.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for ground surface.
label = face_zpos
# We keep the default output frequency behavior (skip every n steps), and
# ask to skip 0 steps between output, so that we get output every time step.
skip = 0
writer.filename = output/step15-groundsurf.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK output of upper_crust state variables.
[pylithapp.timedependent.materials.upper_crust.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvgMesh
output_freq = time_step
time_step = 40.0*year
writer.filename = output/step15-upper_crust.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK output of lower_crust state variables.
[pylithapp.timedependent.materials.lower_crust.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvgMesh
output_freq = time_step
time_step = 40.0*year
writer.filename = output/step15-lower_crust.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year
