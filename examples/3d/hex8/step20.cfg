[pylithapp]
#
# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------
#
# This is a pure elastic static problem that demonstrates how to use
# initial tractions with the FaultCohesiveDyn object to create fault
# opening consistent with a fluid intrusion, such as a dike.
#
# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------
#
# This is not a self-contained simulation configuration file. This
# file only specifies parameters specific to tutorial step20.
# The general parameters are specificed in the pylithapp.cfg
# file which PyLith reads by default.
#
# To run the simulation:
# pylith step20.cfg
#
# Output will be directed to directory output.
#
# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent.formulation.time_step]
# Define the total time for the simulation and the default time step size.
total_time = 0.0*s ; total time of simulation
# Define an appropriat time step for simulations. Important for
# nondimensionalization of velocities and slip rates.
dt = 1.0*year

[pylithapp.timedependent]
# Set bc to an array of 3 boundary conditions: 'x_pos','x_neg', and 'z_neg'.
bc = [x_pos,x_neg,z_neg]

# Set interfaces to an array of 1 fault: 'fault'.
interfaces = [fault]

[pylithapp.timedependent.implicit]
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (boundary of the domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# Fault friction is a nonlinear problem so we need to use the nonlinear
# solver.
solver = pylith.problems.SolverNonlinear

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Set the parameters for Dirichlet boundary conditions applied on the
# -x, +x, and -z faces of the box.
#
# We fix the x and y degrees of freedom on the -x and +x faces, and
# fix the z degree of freedom on the bottom (-z) face.
#
# For all boundaries, we retain the default ZeroDispDB, which specifies
# a zero value.
#

# The label corresponds to the name of the nodeset in CUBIT.

# +x face
[pylithapp.timedependent.bc.x_pos]
bc_dof = [0,1]
label = face_xpos
db_initial.label = Dirichlet BC on +x

# -x face
[pylithapp.timedependent.bc.x_neg]
bc_dof = [0,1]
label = face_xneg
db_initial.label = Dirichlet BC on -x

# -z face
[pylithapp.timedependent.bc.z_neg]
bc_dof = [2]
label = face_zneg_nofault
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent.interfaces]
# Change fault to dynamic fault interface.
fault = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault

# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 0.0 Pa.
friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.1,0.0*Pa]

db_initial_tractions = spatialdata.spatialdb.SimpleDB
db_initial_tractions.label = Initial fault tractions
db_initial_tractions.iohandler.filename = spatialdb/tractions_opening.spatialdb
db_initial_tractions.query_type = nearest

# ----------------------------------------------------------------------
# PETSc settings
# ----------------------------------------------------------------------
# NOTE: There are additional settings specific to fault friction.
[pylithapp.petsc]

# Friction sensitivity solve used to compute the increment in slip
# associated with changes in the Lagrange multiplier imposed by the
# fault constitutive model.
friction_pc_type = asm
friction_sub_pc_factor_shift_type = nonzero
friction_ksp_max_it = 25
friction_ksp_gmres_restart = 30
# Uncomment to view details of friction sensitivity solve.
#friction_ksp_monitor = true
#friction_ksp_view = true
friction_ksp_converged_reason = true

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/step20.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for ground surface.
label = face_zpos
writer.filename = output/step20-groundsurf.vtk

# Give basename for VTK fault output.
[pylithapp.problem.interfaces.fault.output]
vertex_info_fields = [initial_traction]
writer.filename = output/step20-fault.vtk

# Give basename for VTK output of upper_crust state variables.
[pylithapp.timedependent.materials.upper_crust.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = output/step20-upper_crust.vtk

# Give basename for VTK output of lower_crust state variables.
[pylithapp.timedependent.materials.lower_crust.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = output/step20-lower_crust.vtk
