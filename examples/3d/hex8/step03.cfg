# -*- Python -*-
[pylithapp]

# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------

#
# This is a purely elastic static problem using Dirichlet (displacement)
# boundary conditions and slip on a vertical fault, where the amount of
# slip increases with depth. On the +x and -x boundaries, the x and
# y-displacements are held fixed, while on the -z boundary, the
# z-displacements are held fixed. The fault slip is predominantly
# left-lateral, with 2 m of slip applied between 0 and 2 km depth,
# tapering linearly to 0 m at the base of the model (4 km depth).
# A small amount of reverse slip (0.25 m) is applied at the surface,
# tapering to 0 m at 2 km depth.

# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------

# This is not a self-contained simulation configuration file. This
# file only specifies parameters specific to tutorial step03.
# The general parameters are specificed in the pylithapp.cfg
# file which PyLith reads by default.
#
# To run the simulation:
# pylith step03.cfg
#
# Output will be directed to directory output.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# Set bc to an array of 3 boundary conditions: 'x_pos','x_neg', and 'z_neg'.
bc = [x_pos,x_neg,z_neg]

# Set interfaces to an array of 1 fault: 'fault'.
interfaces = [fault]

[pylithapp.timedependent.implicit]
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (subset of domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Set the parameters for Dirichlet boundary conditions applied on the
# -x, +x, and -z faces of the box.
#
# We fix the x and y degrees of freedom on the -x and +x faces, and
# fix the z degree of freedom on the bottom (-z) face.
#
# For all boundaries, we retain the default ZeroDispDB, which specifies
# a zero value.
#

# The label corresponds to the name of the nodeset in CUBIT.

# +x face
[pylithapp.timedependent.bc.x_pos]
bc_dof = [0, 1]
label = face_xpos
db_initial.label = Dirichlet BC on +x

# -x face
[pylithapp.timedependent.bc.x_neg]
bc_dof = [0, 1]
label = face_xneg
db_initial.label = Dirichlet BC on -x

# -z face
[pylithapp.timedependent.bc.z_neg]
bc_dof = [2]
label = face_zneg_nofault
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
# Set the type of fault interface condition.
[pylithapp.timedependent.interfaces]
fault = pylith.faults.FaultCohesiveKin

# Set the parameters for the fault interface condition.
[pylithapp.timedependent.interfaces.fault]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 2

# The slip time and final slip are defined in spatial databases.
[pylithapp.timedependent.interfaces.fault.eq_srcs.rupture.slip_function]
slip.iohandler.filename = spatialdb/finalslip.spatialdb
slip.query_type = linear
slip_time.iohandler.filename = spatialdb/sliptime.spatialdb

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/step03.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
label = face_zpos ; Name of nodeset for ground surface.
writer.filename = output/step03-groundsurf.vtk

# Give basename for VTK fault output.
[pylithapp.problem.interfaces.fault.output]
writer.filename = output/step03-fault.vtk

# Give basename for VTK output of upper_crust state variables.
[pylithapp.timedependent.materials.upper_crust.output]
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = output/step03-upper_crust.vtk

# Give basename for VTK output of lower_crust state variables.
[pylithapp.timedependent.materials.lower_crust.output]
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = output/step03-lower_crust.vtk
