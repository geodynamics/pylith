[pylithapp]

# ----------------------------------------------------------------------
# PROBLEM DESCRIPTION
# ----------------------------------------------------------------------

#
# This is a purely elastic static problem using both Dirichlet
# (displacement) boundary conditions and Neumann (traction) boundary
# conditions. The lower (minimum z) boundary is held fixed in the
# z-direction. On the negative x-boundary, displacements are held fixed in
# the x and y-directions.  On the positive x-boundary, tractions
# corresponding to 1 MPa of shear in the +y direction and 1 MPa of normal
# stress in the -x direction are applied.

# ----------------------------------------------------------------------
# RUNNING THE SIMULATON
# ----------------------------------------------------------------------

# This is not a self-contained simulation configuration file. This
# file only specifies parameters specific to tutorial step02.
# The general parameters are specificed in the pylithapp.cfg
# file which PyLith reads by default.
#
# To run the simulation:
# pylith step02.cfg
#
# Output will be directed to directory output.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent.formulation.time_step]
# Define the total time for the simulation and the default time step size.
total_time = 0.0*s ; total time of simulation
# Define an appropriat time step for simulations. Important for
# nondimensionalization of velocities and slip rates.
dt = 5.0*year

[pylithapp.timedependent]
# Set bc to an array of 3 boundary conditions: 'x_pos','x_neg', and 'z_neg'.
bc = [x_pos,x_neg,z_neg]

[pylithapp.timedependent.implicit]
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (subset of domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Set the parameters for Dirichlet boundary conditions applied on the
# -x and -z faces of the box, and the Neumann boundary conditions
# applied on the +x face of the box.
#
# We fix the x and y degrees of freedom on the -x face, and
# fix the z degree of freedom on the bottom (-z) face.
#
# We apply axial and shear tractions on the +x face.
#
# For x_pos, we change the database from ZeroDispDB (which
# specifies a zero value) to SimpleDB (which uses a data file to
# specify a spatial variation), and we change the boundary condition type
# to Neumann (traction).
#
# For x_neg and z_neg, we keep the default ZeroDispDB, since we just want zero
# displacements on those boundaries.
#

# The label corresponds to the name of the nodeset in CUBIT.

# +x face -- first change bc type to Neumann
[pylithapp.timedependent.bc]
x_pos = pylith.bc.Neumann

# +x face
[pylithapp.timedependent.bc.x_pos]
label = face_xpos
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Neumann BC on +x
db_initial.iohandler.filename = spatialdb/tractions_axial_shear.spatialdb

output.cell_info_fields = [initial_value]
output.writer.filename = output/step02-traction.vtk
output.cell_filter = pylith.meshio.CellFilterAvg

# We must specify quadrature information for the cell faces.
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 2
quadrature.cell.quad_order = 2

# -x face
[pylithapp.timedependent.bc.x_neg]
bc_dof = [0, 1]
label = face_xneg
db_initial.label = Dirichlet BC on -x

# -z face
[pylithapp.timedependent.bc.z_neg]
bc_dof = [2]
label = face_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain.writer]
filename = output/step02.vtk

# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
label = face_zpos ; Name of nodeset for subdomain
writer.filename = output/step02-groundsurf.vtk

# Give basename for VTK output of upper_crust state variables.
[pylithapp.timedependent.materials.upper_crust.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/step02-upper_crust.vtk

# Give basename for VTK output of lower_crust state variables.
[pylithapp.timedependent.materials.lower_crust.output]
cell_filter = pylith.meshio.CellFilterAvg
writer.filename = output/step02-lower_crust.vtk
