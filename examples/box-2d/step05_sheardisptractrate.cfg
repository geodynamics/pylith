[pylithapp.metadata]
# We add a uniform rate starting at time 1.0*year to the initial values for the
# Dirichlet and Neumann time-dependent boundary conditions in Step 3.
#
#  y
#  ^
#  |
#   --> x
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg:
#   Ux(-6*km,y) = a*y + a*y/4*H(t-1.0*year)
#   Uy(-6*km,y) = a*x + a*x/4*H(t-1.0*year)
# boundary_yneg:
#   Ux(x,-16*km) = a*y + a*y/4*H(t-1.0*year)
#   Uy(x,-16*km) = a*x + z*y/4*H(t-1.0*year)
#
# Neumann boundary conditions
#
# Note that the components are given in terms of the the tangential
# (t = z x n) and (outward) normal directions.
#
# boundary_xpos:
#   Tt(+6*km,y) = +b + b/4*H(t-1.0*year)
#   Tn(+6*km,y) = 0
# boundary_ypos:
#   Tt(x,0) = -b + b/4*H(t-1.0*year)
#   Tn(x,0) = 0
base = [pylithapp.cfg]
description = Quasi-static simulation with time-dependent simple shear using Dirichlet and Neumann boundary conditions.
authors = [Brad Aagaard]
keywords = [simple shear, time depenent, Dirichlet BC, Neumann BC]
arguments = [step05_sheardisptractrate.cfg]
version = 1.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Quasi-static simulation,
    backward Euler time stepping,
    LU preconditioner,
    pylith.bc.DirichletTimeDependent,
    pylith.bc.NeumannTimeDependent,
    spatialdata.spatialdb.SimpleDB
    ]

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step05_sheardisptractrate-parameters.json
problem.progress_monitor.filename = output/step05_sheardisptractrate-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step05_sheardisptractrate

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# For time-dependent problems, we specify start and end times and an initial
# time step.
start_time = -1.0*year
end_time = 5.0*year
initial_dt = 1.0*year

[pylithapp.problem.normalizer]
# We specify a time scale using a fake relaxation time that corresponds
# to the time scale of the simulation.
relaxation_time = 10.0*year

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [bc_xneg, bc_yneg, bc_xpos, bc_ypos]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.NeumannTimeDependent
bc.bc_ypos = pylith.bc.NeumannTimeDependent

# For each boundary condition, `label` must match the name of the group
# of vertices in the MeshIOAscii file.

# Dirichlet boundary conditions
#
# The displacement field varies along the -x and -y boundaries, so we use
# a `SimpleDB`.
# We use both an initial amplitude (use_initial=True) and
# a constrant rate (use_rate=True). With the addition of the constrant
# rate, our spatial databases for the auxiliary fields contains more values.
[pylithapp.problem.bc.bc_xneg]
# Degrees of freedom (dof) 0 and 1 correspond to the x and y displacements. 
constrained_dof = [0, 1]
label = boundary_xneg
use_initial = True
use_rate = True
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC -x boundary
db_auxiliary_field.iohandler.filename = sheardisprate_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_xpos]
# Degrees of freedom (dof) 0 and 1 correspond to the x and y displacements. 
constrained_dof = [0, 1]
label = boundary_xpos
use_initial = True
use_rate = True
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC +x boundary
db_auxiliary_field.iohandler.filename = sheardisprate_bc_xpos.spatialdb
db_auxiliary_field.query_type = linear


# Neumann boundary conditions
#
# The tractions are uniform, so we use a UniformDB.
# We use both an initial amplitude (use_initial=True) and
# a constrant rate (use_rate=True). With the addition of the constrant
# rate, our spatial databases for the auxiliary fields contains more values.
[pylithapp.problem.bc.bc_yneg]
label = boundary_yneg
use_initial = True
use_rate = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Neumann BC -y boundary
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal, rate_start_time, rate_amplitude_tangential, rate_amplitude_normal]
db_auxiliary_field.data = [-4.5*MPa, 0.0*MPa, 1.0*year, -1.125*MPa/year, 0.0]

[pylithapp.problem.bc.bc_ypos]
label = boundary_ypos
use_initial = True
use_rate = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Neumann BC +y boundary
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal, rate_start_time, rate_amplitude_tangential, rate_amplitude_normal]
db_auxiliary_field.data = [-4.5*MPa, 0.0*MPa, 1.0*year, -1.125*MPa/year, 0.0]


# End of file
