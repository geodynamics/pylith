[pylithapp.metadata]
# We replace the Dirichlet boundary conditions on the +x and +y
# boundaries in step02 with Neumann boundary conditions with uniform
# tangential (shear) tractions.
#
#  y
#  ^
#  |
#   --> x
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux(-6*km,y) = a*y, Uy(-6*km,y) = a*x
# boundary_yneg: Ux(x,-16*km) = a*y, Uy(x,-16*km) = a*x
#
# Neumann boundary conditions
#
# Note that the components are given in terms of the tangential (t = z
# x n) and (outward) normal directions.
#
# boundary_xpos: Tt(+6*km,y) = +b, Tn(+6*km,y) = 0
# boundary_ypos: Tt(x,0) = -b, Tn(x,0) = 0
base = [pylithapp.cfg]
description = Simple shear using Dirichlet and Neumann boundary conditions.
authors = [Brad Aagaard]
keywords = [simple shear, Neumann BC, Dirichlet BC]
arguments = [step03_sheardisptract.cfg]
version = 1.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Static simulation,
    LU preconditioner,
    pylith.bc.DirichletTimeDependent,
    pylith.bc.NeumannTimeDependent,
    spatialdata.spatialdb.SimpleDB
    ]

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step03_sheardisptract-parameters.json
problem.progress_monitor.filename = output/step03_sheardisptract-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step03_sheardisptract

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [bc_xneg, bc_yneg, bc_xpos, bc_ypos]
bc.bc_xneg = pylith.bc.DirichletTimeDependent
bc.bc_xpos = pylith.bc.DirichletTimeDependent
bc.bc_yneg = pylith.bc.NeumannTimeDependent
bc.bc_ypos = pylith.bc.NeumannTimeDependent

# For each boundary condition, `label` must match the name of the group
# of vertices in the MeshIOAscii file.

# Dirichlet boundary conditions
#
# The displacement field varies along the -x and +x boundaries, so we use
# a `SimpleDB`.
[pylithapp.problem.bc.bc_xneg]
# Degrees of freedom (dof) 0 and 1 correspond to the x and y displacements. 
constrained_dof = [0, 1]
label = boundary_xneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC -x boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

[pylithapp.problem.bc.bc_xpos]
# Degrees of freedom (dof) 0 and 1 correspond to the x and y displacements. 
constrained_dof = [0, 1]
label = boundary_xpos
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Dirichlet BC +x boundary
db_auxiliary_field.iohandler.filename = sheardisp_bc_xpos.spatialdb
db_auxiliary_field.query_type = linear


# Neumann boundary conditions
#
# The tractions are uniform on the -y and +y boundaries, so we use a `UniformDB`.
[pylithapp.problem.bc.bc_yneg]
label = boundary_yneg
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Neumann BC -y boundary
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [-4.5*MPa, 0*MPa]

[pylithapp.problem.bc.bc_ypos]
label = boundary_ypos
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Neumann BC +y boundary
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [-4.5*MPa, 0*MPa]


# End of file
