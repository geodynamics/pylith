**********************************************************************
This example is obsolete. Please see examples/2d/greensfns for an
up-to-date example.
**********************************************************************


In this directory are files that allow a primitive method of generating
Green's functions using PyLith.  The impulses are specified amounts of
strike-slip applied on the vertices of a fault, and the responses are
displacements at the vertices on the ground surface. The method used is as
follows:

The entire problem is treated as a time-dependent elastic problem with
time-varying slip. At each time step, a specified slip is applied for the
desired impulse. For time step zero, this is all that needs to be done.
For subsequent time steps, it is necessary to remove the applied impulse
from the previous step. This is done by applying a unit negative impulse.
It is necessary to generate a sequence of spatial databases to specify the
slip at each time step. A Python application has been provided that
generates these spatial databases, as well as a .cfg file to be used by
PyLith and a file describing the impulses (metadata).

Before the impulses can be generated, we first require a .vtk file
containing fault information.  There are thus three steps required to
generate the Green's functions:

1.  Run PyLith once to generate the fault information file
(gftest-initial-fault_info.vtk).  This may be done as follows:
pylith initial-run.cfg

2.  Edit the gfgen.cfg file as needed to provide the parameters for
gfgen.py, then simply run gfgen.py:
./gfgen.py

3.  Finally, run PyLith again using the generated gftest.cfg file along
with the spatial databases in gfspatialdb:
pylith gftest.cfg gfoutput.cfg

The gfoutput.cfg file simply contains output information, so that the
impulse and response files end up in gfimpulses and gfresponses.

When it has finished running, you will have a number of VTK files in the
gfimpulses directory that show what the applied fault slip was for each
time step. In the gfresponses directory you will have all of the resulting
displacements on the ground surface. The time step number for each of these
files indicates the impulse number to which they correspond. There will also
be a metadata file that defines the location and fault orientation for each
applied impulse.

This method is not very sophisticated, but it provides a simple method for
generating Green's functions without too much work. The main shortcoming at
present is that the responses are only generated at the specified set of
vertices. If users need responses at locations that do not correspond to one
of the vertices in the mesh, they will need to do their own interpolation.
In the future, we plan to provide a method that will allow PyLith to do the
interpolation.  Also, this method does not provide a method for determining
the seismic moment for each impulse. To do this it would be necessary to
integrate over the fault elements attached to each impulse vertex. At
present, it is probably easiest to do this by postprocessing using the
fault mesh. Note that for problems involving variations in elastic
properties, you will require property information for the entire mesh to
compute seismic moment. Seismic potency may be a better quantity to use,
since it is independent of material properties.
