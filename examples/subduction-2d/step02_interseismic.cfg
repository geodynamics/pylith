[pylithapp.metadata]
base = [pylithapp.cfg]
description = Aseismic creep along the interfaces between the subducting oceanic crust and the mantle.
authors = [Brad Aagaard]
keywords = [prescribed slip, aseismic creep]
arguments = [step02_interseismic.cfg]
version = 2.0.0
pylith_version = [>=3.0, <4.0]

features = [
    Static simulation,
    pylith.faults.FaultCohesiveKin,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.SimpleDB,
    spatialdata.spatialdb.UniformDB,
    pylith.faults.KinSrcConstRate,
    pylith.bc.ZeroDB
    ]

# ----------------------------------------------------------------------
# Monitoring and parameter viewing.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/step02_interseismic-parameters.json
problem.progress_monitor.filename = output/step02_interseismic-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step02_interseismic

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
# For time-dependent problems, we specify start and end times and an initial
# time step. With an initial time step of 5 years, we use a start time of
# -5 years so that the first solution occurs at 0 years.
initial_dt = 5.0*year
start_time = -5.0*year
end_time = 150.0*year

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.problem]
# We specify creep on the top and bottom of the slab, so we set the
# interfaces array to include both the top and bottom interfaces.
interfaces = [fault_slabtop, fault_slabbot]

# Slab top --------------------
[pylithapp.problem.interfaces.fault_slabtop]
# The `label` and `label_value` correspond to the name and tag of the physical
# group in the Gmsh Python script.
label = fault_slabtop
label_value = 21
edge = fault_slabtop_edge
edge_value = 31

observers.observer.data_fields = [slip]

[pylithapp.problem.interfaces.fault_slabtop.eq_ruptures]
# Switch to constant slip rate time function.
rupture = pylith.faults.KinSrcConstRate

[pylithapp.problem.interfaces.fault_slabtop.eq_ruptures.rupture]
# We specify slip as a function of depth, so we use a SimpleDB with
# linear interpolation.
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.description = Fault rupture auxiliary field spatial database
db_auxiliary_field.iohandler.filename = fault_slabtop_creep.spatialdb
db_auxiliary_field.query_type = linear


# Slab bottom --------------------
[pylithapp.problem.interfaces.fault_slabbot]
# The `label` and `label_value` correspond to the name and tag of the physical
# group in the Gmsh Python script.
label = fault_slabbot
label_value = 22
edge = fault_slabbot_edge
edge_value = 32

observers.observer.data_fields = [slip]

# Switch to constant slip rate time function.
[pylithapp.problem.interfaces.fault_slabbot.eq_ruptures]
rupture = pylith.faults.KinSrcConstRate

[pylithapp.problem.interfaces.fault_slabbot.eq_ruptures.rupture]
# The creep rate and slip time are uniform, so use UniformDB for simplicity.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Fault rupture auxiliary field spatial database
db_auxiliary_field.values = [initiation_time, slip_rate_left_lateral, slip_rate_opening]
db_auxiliary_field.data = [0.0*year, 8.0*cm/year, 0.0*cm/year]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set bc to an array of 3 boundary conditions:
#   'bc_east_mantle'
#   'bc_west'
#   'bc_bottom'
#
# On each boundary we fix the displacement normal to the boundary
# (roller boundary condition).
#
# The `label` and `label_value` correspond to the name and tag of the physical
# group in the Gmsh Python script.
bc = [bc_east_mantle, bc_west, bc_bottom]

# East boundary (mantle only)
[pylithapp.problem.bc.bc_east_mantle]
label = bndry_east_mantle
label_value = 13
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on east boundary (mantle)


# West boundary
[pylithapp.problem.bc.bc_west]
label = bndry_west
label_value = 11
constrained_dof = [0]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on west boundary


# Bottom boundary
[pylithapp.problem.bc.bc_bottom]
label = bndry_bot
label_value = 14
constrained_dof = [1]
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on bottom boundary


# End of file
