[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [example, 3D, box]
features = [
    Tetrahedral cells,
    pylith.meshio.MeshIOPetsc,
    pylith.problems.TimeDependent,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicLinearElasticity,
    spatialdata.spatialdb.UniformDB,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
# Turn on some journals to show progress.
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiopetsc = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
# We use PETSc to read Gmsh files.
reader = pylith.meshio.MeshIOPetsc

# Set the filename and the dimension of the default Cartesian coordinate system.
reader.filename = mesh_hex.msh
reader.coordsys.space_dim = 3

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
solution_observers = [domain, ground_surface]
solution_observers.ground_surface = pylith.meshio.OutputSolnBoundary

[pylithapp.problem.solution_observers.ground_surface]
# The `label` and `label_value` match the name and tag in the Gmsh Python script.
label = boundary_zpos
label_value = 15

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem]
# Create an array of one material
materials = [elastic]

[pylithapp.problem.materials.elastic]
# `label_value` must match the physical group tag in the Gmsh file.
description = Elastic material
label_value = 1

# We will use the default material (elasticity) and rheology
# (isotropic, linearly elastic).
#
# We will use uniform material properties, so we use the UniformDB
# spatial database.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500*kg/m**3, 3.0*km/s, 5.2915026*km/s]

# Set the discretization of the material auxiliary fields (properties).
# We have uniform material properties, so we can use a basis order of 0.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0


# End of file
