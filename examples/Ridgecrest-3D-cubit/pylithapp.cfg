[pylithapp.metadata]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.
keywords = [example, 3D, strike slip]
features = [
    Triangular cells,
    pylith.meshio.MeshIOPetsc,
    pylith.problems.TimeDependent,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicLinearElasticity,
    pylith.faults.FaultCohesiveKin,
    pylith.faults.KinSrcStep,
    field split preconditioner,
    Schur complement preconditioner,
    pylith.bc.DirichletTimeDependent,
    spatialdata.spatialdb.UniformDB,
    pylith.meshio.OutputSolnBoundary,
    pylith.meshio.DataWriterHDF5
    ]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
pylithapp = 1
timedependent = 1
solution = 1
meshiopetsc = 1
isotropiclinearelasticity = 1
dirichlettimedependent = 1
faultcohesivekin = 1
petscoptions = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOPetsc
reader.filename = 3D_Ridgecrest_mesh_tri.exo
reader.coordsys.space_dim = 3

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem]
# Output the solution over the domain and on the +z (groundsurf).
solution_observers = [domain, groundsurf]
solution_observers.groundsurf = pylith.meshio.OutputSolnBoundary

# `label` and `label_value` correspond to the name and tag of the 
# physical groups marking the boundaries in the Cubit script.
[pylithapp.problem.solution_observers.groundsurf]
label = boundary_zpos
label_value = 84


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Create an array of three materials, matching the number of physical groups
# of materials we created in the Gmsh Python script.
[pylithapp.problem]
materials = [elastic_xneg,elastic_xpos,elastic_yneg,elastic_ypos]

# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).

[pylithapp.problem.materials.elastic_xneg]
# `label_value` must match the tag for the physical group in the Gmsh Python script.
description = Material to on the -x quadrant
label_value = 4

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties xneg
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 1
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem.materials.elastic_xpos]
description = Material to on the +x quadrant
label_value = 2

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties xpos
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]


# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 0
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0

[pylithapp.problem.materials.elastic_yneg]
description = Material in the y- quadrant
label_value = 3

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties wedge
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 0
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem.materials.elastic_ypos]
description = Material in the y+ quadrant
label_value = 1

# The properties are uniform within the material, so we use a UniformDB.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Elastic properties wedge
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500.0*kg/m**3, 3.00*km/s, 5.29*km/s]

# The properties are uniform, so we use a basis order of 0, corresponding
# to uniform properties within a cell.
auxiliary_subfields.density.basis_order = 0
bulk_rheology.auxiliary_subfields.bulk_modulus.basis_order = 0
bulk_rheology.auxiliary_subfields.shear_modulus.basis_order = 0

# We discretize the displacement field with a basis order of 0
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower. Consequently, we use
# a basis order of 0.
derived_subfields.cauchy_strain.basis_order = 0
derived_subfields.cauchy_stress.basis_order = 0


[pylithapp.problem]
# The generic setup is roller boundary conditions on the lateral and
# bottom boundaries. That is, we have zero displacements for the DOF
# normal to the boundary. We can use the default DirichletTimeDependent BC
# with a ZeroDB spatial database to specify zero displacementsfor the
# boundary values.
#
# Array of boundary conditions (defaults to DirichletTimeDependent):
#   bc_xneg (ZeroDB to specify zero x-displacement)
#   bc_xpos (ZeroDB to specify zero x-displacement)
#   bc_yneg (ZeroDB to specify zero y-displacement)
#   bc_ypos (ZeroDB to specify zero y-displacement)
#   bc_zneg (ZeroDB to specify zero z-displacement)
bc = [bc_xneg, bc_xpos, bc_yneg, bc_ypos, bc_zneg]

# -x face
[pylithapp.problem.bc.bc_xneg]
constrained_dof = [0]
label = boundary_xneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -x

# +x face
[pylithapp.problem.bc.bc_xpos]
constrained_dof = [0]
label = boundary_xpos
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on +x

# -y face
[pylithapp.problem.bc.bc_yneg]
constrained_dof = [1]
label = boundary_yneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -y

# +y face
[pylithapp.problem.bc.bc_ypos]
constrained_dof = [1]
label = boundary_ypos
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on +y

# -z face
[pylithapp.problem.bc.bc_zneg]
constrained_dof = [2]
label = boundary_zneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.description = Dirichlet BC on -z

#-----------------------
# Faults
#------------------------

[pylithapp.problem]
interfaces = [main,branch1,branch2]


[pylithapp.problem.interfaces.main]
label = main
label_value = 1
edge = buried_main
edge_value = 1

# Output `slip` on the fault.
observers.observer.data_fields = [slip]


[pylithapp.problem.interfaces.branch1]
label = branch1
label_value = 1
edge = buried_branch1
edge_value = 1

# Output `slip` on the fault.
observers.observer.data_fields = [slip]


[pylithapp.problem.interfaces.branch2]
label = branch2
label_value = 1
edge = buried_branch2
edge_value = 1


# Output `slip` on the fault.
observers.observer.data_fields = [slip]

