[pylithapp.metadata]
#  y
#  ^
#  |
#   --> x
#
#
#         ----------
#         |        |
# Ux= 0   |        | Ux= 0
#         |        |
#         |        |
#         ----------
#            Uy=0
#
# Dirichlet boundary conditions
#
# boundary_yneg: Uy(x,-100*km) = 0
# boundary_xneg: Ux(-126*km,y) = 0
# boundary_xpos: Uy(+74*km,y) =  0
base = [pylithapp.cfg]
description = Reverse prescribed slip on main and splay fault with power-law viscoelastic bulk rheology and zero displacement Dirichlet boundary condition.
authors = [Charles Williams, Brad Aagaard]
keywords = [reverse slip, prescribed slip, multiple faults, power-law viscoelastic bulk rheology]
arguments = [step08_twofaults_powerlaw.cfg]
version = 1.0.0
pylith_version = [>=4.0, <6.0]

features = [
    Quasi-static simulation,
    pylith.materials.Elasticity,
    pylith.materials.IsotropicPowerLaw,
    pylith.faults.FaultCohesiveKin,
    pylith.faults.KinSrcStep,
    spatialdata.spatialdb.UniformDB,
    spatialdata.spatialdb.CompositeDB
    ]


# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
[pylithapp.problem]
# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
defaults.name = step08_twofaults_powerlaw

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# Simulation time of 100 years with 4 year timesteps.
initial_dt = 4.0*year
start_time = -4.0*year
end_time = 100.0*year

# Use a relaxation time of 20 years to nondimensionalize time.
scales.time_scale = 20.0*year

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
refiner = pylith.topology.RefineUniform

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
# Problem involves a fault.
[pylithapp.problem]
solution = pylith.problems.SolnDispLagrange
defaults.quadrature_order = 2

[pylithapp.problem.solution.subfields]
displacement.basis_order = 2
lagrange_multiplier_fault.basis_order = 2

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# We switch to a isotropic powerlaw viscoelastic bulk rheology for
# the slab.
[pylithapp.problem.materials]
slab.bulk_rheology = pylith.materials.IsotropicPowerLaw

[pylithapp.problem.materials.slab]
# We use a composite spatial database with elastic properties from `mat_elastic.spatialdb`
# and the power-law properties from `mat_powerlaw.spatialdb`.
db_auxiliary_field = spatialdata.spatialdb.CompositeDB
db_auxiliary_field.description = Power law material properties

bulk_rheology.auxiliary_subfields.power_law_reference_strain_rate.basis_order = 0
bulk_rheology.auxiliary_subfields.power_law_reference_stress.basis_order = 0
bulk_rheology.auxiliary_subfields.power_law_exponent.basis_order = 0

[pylithapp.problem.materials.slab.db_auxiliary_field]
# Elastic properties
values_A = [density, vs, vp]
db_A = spatialdata.spatialdb.SimpleDB
db_A.description = Elastic properties for slab
db_A.iohandler.filename = mat_elastic.spatialdb

# Power law properties
values_B = [
	 power_law_reference_stress,  power_law_reference_strain_rate,  power_law_exponent,
	 viscous_strain_xx, viscous_strain_yy, viscous_strain_zz, viscous_strain_xy,
	 reference_stress_xx, reference_stress_yy, reference_stress_zz, reference_stress_xy,
	 reference_strain_xx, reference_strain_yy, reference_strain_zz, reference_strain_xy,
	 deviatoric_stress_xx,  deviatoric_stress_yy,  deviatoric_stress_zz,  deviatoric_stress_xy
	 ]
db_B = spatialdata.spatialdb.SimpleDB
db_B.description = Material properties specific to power law bulk rheology for the slab
db_B.iohandler.filename = mat_powerlaw.spatialdb
db_B.query_type = linear

# We discretize the displacement field with a basis order of 2
# so the stress and strain computed from the displacement field
# will have an accuracy of one order lower.
[pylithapp.problem.materials.slab]
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1

[pylithapp.problem.materials.crust]
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1

[pylithapp.problem.materials.wedge]
derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_stress.basis_order = 1


# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
# We keep the same fault settings as in Step 6.
[pylithapp.problem]
interfaces = [fault, splay]

[pylithapp.problem.interfaces.fault]
label = fault
label_value = 20
edge = fault_end
edge_value = 21

observers.observer.data_fields = [slip, traction_change]

[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
origin_time = 0.0*year
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Fault rupture for main fault
db_auxiliary_field.values = [initiation_time, final_slip_left_lateral, final_slip_opening]
db_auxiliary_field.data = [0.0*s, -2.0*m, 0.0*m]

[pylithapp.problem.interfaces.splay]
label = splay
label_value = 22
edge = splay_end
edge_value = 23

observers.observer.data_fields = [slip, traction_change]

[pylithapp.problem.interfaces.splay.eq_ruptures.rupture]
origin_time = 39.99*year
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.description = Fault rupture for splay fault
db_auxiliary_field.values = [initiation_time, final_slip_left_lateral, final_slip_opening]
db_auxiliary_field.data = [0.0*s, -1.0*m, 0.0*m]


# End of file
