// Finite-element mesh with two quad4 cells.
//
//
//  1 ----- 3 ----- 5
//  |       |       |
//  |       |       |
//  |       |       |
//  0 ----- 2 ----- 4
//
// Each edge has a length of 2.0.
//
mesh = {

  // Dimenion associated with topology of mesh.
  dimension = 2

  // We are using zero-based indexing (default, C style) rather than 
  // one-based (Fortran style) indexing.
  use-index-zero = true

  // Vertices in the mesh.
  vertices = {

    // Dimension of coordinate system for vertices.
    dimension = 2

    // Number of vertices in mesh.
    count = 6

    // Coordinates are listed as:
    // Vertex number (starting from zero), x-coord, y-coord
    // Use coordinate units that are consistent with the other units used.
    coordinates = {
             0     -2.0 -1.0
             1     -2.0  1.0
             2      0.0 -1.0
             3      0.0  1.0
             4      2.0 -1.0
             5      2.0  1.0
    }
  }

  // Finite-element cells in the mesh.
  cells = {

    // There are 2 cells.
    count = 2

    // These are bilinear quadrilateral cells, so there are 4 corners per cell.
    num-corners = 4

    // List the vertices composing each cell, moving counter-clockwise 
    // around the cell.
    // List the information as:
    // Cell number (starting from zero), vertex 0, vertex 1, vertex 2, vertex 3
    simplices = {
             0       0  2  3  1
             1       4  5  3  2
    }

    // List the material ID's associated with each cell.
    // Different ID's may be used to specify a different material type, or
    // to use a different spatial database for each material ID.
    // In this example, cells 0 and 1 both are associated with material ID 0.
    material-ids = {
             0   0
             1   0
    }
  }

  // Here we list different groups (cells or vertices) that we want to 
  // associate with a particular name.

  // This group of vertices may be used to define a fault.
  // There are 2 vertices corresponding to indices 2 and 3.
  group = {
    name = fault
    type = vertices
    count = 2
    indices = {
      2
      3
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 1 vertices corresponding to indices 0.
  group = {
    name = y_neg
    type = vertices
    count = 3
    indices = {
      0 
      2
      4
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 2 vertices corresponding to indices 0 and 1.
  group = {
    name = x_neg
    type = vertices
    count = 2
    indices = {
      0
      1
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There are 2 vertices corresponding to indices 4 and 5.
  group = {
    name = x_pos
    type = vertices
    count = 2
    indices = {
      4
      5
    }
  }

  // This group of vertices may be used to specify boundary conditions.
  // There is 1 vertex corresponding to index 3.
  group = {
    name = y_pos
    type = vertices
    count = 1
    indices = {
      3
    }
  }
}
