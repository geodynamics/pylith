# -*- Python -*-

[pylithapp]

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]

formulation = pylith.problems.Explicit
formulation.solver = pylith.problems.SolverNonlinear
#formulation = pylith.problems.ExplicitLumped

# Nondimensionalize problem using wave propagation parameters.
normalizer = spatialdata.units.NondimElasticDynamic
#normalizer.mass_density = 1000.0*kg/m**3
#normalizer.shear_wave_speed = 1.0*m/s
#normalizer.wave_period = 1.0*s

bc = [x_pos,x_neg,all_nofault]

# Change the DirichletPoints BC to the AbsorbingDampers BC
bc.x_pos = pylith.bc.AbsorbingDampers
bc.x_neg = pylith.bc.AbsorbingDampers

[pylithapp.timedependent.formulation.time_step]
total_time = 0.25*s
dt = 0.05*s

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.timedependent.bc.x_pos]
# Absorbing BC on +x face of bar

# Nodeset id from CUBIT
label = 11

# Specify label and filename for spatial database with physical properties
db.label = Absorbing BC +x
db.iohandler.filename = matprops.spatialdb

# Specify the basis functions and quadrature:
# 1-D Lagrange cell in 2-D space with 2nd order quadrature
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

[pylithapp.timedependent.bc.x_neg]
# Absorbing BC on -x face of bar

# Nodeset id from CUBIT
label = 12

# Specify label and filename for spatial database with physical properties
db.label = Absorbing BC -x
db.iohandler.filename = matprops.spatialdb

# Specify the basis functions and quadrature:
# 1-D Lagrange cell in 2-D space with 2nd order quadrature
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

[pylithapp.timedependent.bc.all_nofault]
# Dirichlet BC on all vertices except fault vertices

# Pin x and z degrees of freedom
bc_dof = [0]

# Nodeset id from CUBIT
label = 13

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------

# Provide information on the fault (interface).
[pylithapp.timedependent.interfaces]

fault = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault]

# Material id
id = 100

# Nodeset id from CUBIT
label = 10

# Specify the basis functions and quadrature:
# 1-D Lagrange cell in 2-D space with 2nd order quadrature
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

db_initial_tractions = spatialdata.spatialdb.UniformDB
db_initial_tractions.label = Initial fault tractions
db_initial_tractions.values = [traction-shear,traction-normal]
db_initial_tractions.data = [-6001.0*MPa, -10000.0*MPa]

friction = pylith.friction.StaticFriction

friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.6*m,0.0*Pa]

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.output]
writer.filename = output/shearwave.vtk

# Give basename for VTK fault output.
[pylithapp.timedependent.interfaces.fault.output]
writer.filename = output/shearwave-fault.vtk

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.elastic.output]
writer.filename = output/shearwave-statevars.vtk
