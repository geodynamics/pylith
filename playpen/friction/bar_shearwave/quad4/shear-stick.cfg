# -*- Python -*-

[pylithapp]

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]

# Change to an explicit time stepping formulation
formulation = pylith.problems.Implicit
formulation.solver = pylith.problems.SolverNonlinear

# Set bc to an array with 3 boundary conditions: 'x_neg', 'x_pos', and 'y_pos'.
bc = [x_pos,x_neg,all_nofault]

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.timedependent.bc.x_pos]
# Dirichlet BC on +x face of bar

# Nodeset id from CUBIT
label = 11

bc_dof = [1]
db_initial = spatialdata.spatialdb.UniformDB
db_initial.label = Dirichlet BC +x edge
db_initial.values = [displacement-x,displacement-y]
db_initial.data = [0.0*m,10.0*km]


[pylithapp.timedependent.bc.x_neg]
# Dirichlet BC on -x face of bar

# Nodeset id from CUBIT
label = 12

bc_dof = [1]

[pylithapp.timedependent.bc.all_nofault]
# Dirichlet BC on all vertices except fault vertices

# Pin x and z degrees of freedom
bc_dof = [0]

# Nodeset id from CUBIT
label = 13

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------

# Provide information on the fault (interface).
[pylithapp.timedependent.interfaces]

fault = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault]

# Material id
id = 100

# Nodeset id from CUBIT
label = 10

# Specify the basis functions and quadrature:
# 1-D Lagrange cell in 2-D space with 2nd order quadrature
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 2

db_initial_tractions = spatialdata.spatialdb.UniformDB
db_initial_tractions.label = Initial fault tractions
db_initial_tractions.values = [traction-shear,traction-normal]
db_initial_tractions.data = [0.0*MPa, -10000.0*MPa]

friction = pylith.friction.StaticFriction

friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient]
friction.db_properties.data = [0.6*m] ; units required (use SI so not scaled)

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------

# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.output]
writer.filename = output/shear-stick.vtk

# Give basename for VTK fault output.
[pylithapp.timedependent.interfaces.fault.output]
writer.filename = output/shear-stick-fault.vtk

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.elastic.output]
writer.filename = output/shear-stick-statevars.vtk
