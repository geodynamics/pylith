# -*- Python -*-
[pylithapp]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
timedependent = 1
implicit = 1
petsc = 1
solvernonlinear = 1
meshioascii = 1
homogeneous = 1
elasticityimplicit = 1
fiatlagrange = 1
quadrature1d = 1
faultcohesivedyn = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
debug = 0

[pylithapp.mesh_generator.reader]
filename = twotri3.mesh
coordsys.space_dim = 2

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
dimension = 2
normalizer.length_scale = 1.0*m
formulation = pylith.problems.Implicit
formulation.solver = pylith.problems.SolverNonlinear

# Set bc to an array with 3 boundary conditions: 'x_neg', 'y_neg' and 'x_pos'.
bc = [x_neg,y_neg,x_pos]
bc.x_pos = pylith.bc.Neumann

# Set interfaces to an array with 1 fault: 'fault'.
interfaces = [fault]


[pylithapp.timedependent.formulation.time_step]
total_time = 0.0*s
dt = 1.0*s


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Specify the material information for the problem.
# The material type is isotropic elastic formulated for plane strain.
[pylithapp.timedependent.materials]
material = pylith.materials.ElasticPlaneStrain

[pylithapp.timedependent.materials.material]

# We give a label of 'elastic material' to this material.
label = elastic material

# The cells associated with this material are given a material ID of 0
# in the mesh file.
id = 0

# The properties for this material are given in the spatial database file
# 'matelastic2D.spatialdb'.
db_properties.iohandler.filename = matelastic2D.spatialdb

# We are doing 2D quadrature for a triangle.
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = triangle

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
# Provide information on the boundary conditions.

# Boundary conditions to be applied to the negative x-side of the mesh.
[pylithapp.timedependent.bc.x_neg]

# We are fixing the 0 (x) degree of freedom.
bc_dof = [0]

# The nodes associated with this boundary condition have the name
# 'x_neg' in the mesh file.
label = x_neg

# Boundary conditions to be applied to the negative y-side of the mesh.
[pylithapp.timedependent.bc.y_neg]

# We are fixing the 1 (y) degree of freedom.
bc_dof = [1]

# The nodes associated with this boundary condition have the name
# 'x_pos' in the mesh file.
label = y_neg

# Boundary conditions to be applied to the positive x-side of the mesh.
[pylithapp.timedependent.bc.x_pos]

# The nodes associated with this boundary condition have the name
# 'x_pos' in the mesh file.
label = x_pos

db_initial = spatialdata.spatialdb.UniformDB
db_initial.label = Neumann BC +x edge
db_initial.values = [traction-shear,traction-normal]
db_initial.data = [0.0*MPa,-12000*MPa]

# 1-D simplex cell in 2-D space 
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = line

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
# Provide information on the fault (interface).
[pylithapp.timedependent.interfaces]

fault = pylith.faults.FaultCohesiveDynL

# Define fault properties.
[pylithapp.timedependent.interfaces.fault]

# The nodes associated with this fault have the name 'fault' in the mesh file.
label = fault

# NOTE: It is possible to assign an ID number to a fault (e.g.,
# 'id = 10').  Care must be taken when doing this, however, because the
# assigned ID will become the material ID for the cohesive element.
# This ID must not conflict with any of the material ID numbers for
# volume elements.  The default ID for a fault is 100.  If you have a
# fault in your mesh you must:
# 1.  If you create your own fault ID, make sure it does not conflict
#     with any of you material ID's.
# 2.  If you use the default fault ID, make sure that none of your
#     material ID's are equal to 100.

# The quadrature for a 2D fault is 1D with a linear shape.
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = line

db_initial_tractions = spatialdata.spatialdb.UniformDB
db_initial_tractions.label = "Initial fault tractions"
db_initial_tractions.values = [traction-shear,traction-normal]
db_initial_tractions.data = [0.0*Pa, -10000.0*MPa]

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
# We are using all of the default settings for PETSc except for
# specifying the block Jacobi preconditioner.  Additional PETSc
# command-line arguments may be found in the PETSc documentation.
[pylithapp.petsc]
ksp_rtol = 1.0e-8
pc_type = asm
# Change the preconditioner settings (must turn off
# shift_positive_definite and turn on shift_nonzero).
sub_pc_factor_shift_positive_definite = 0
sub_pc_factor_shift_nonzero = 

ksp_monitor = true
ksp_view = true
#log_summary = true
ksp_max_it = 100
ksp_gmres_restart = 50
#start_in_debugger = true

snes_monitor = true
snes_view = true
ksp_converged_reason = true
snes_converged_reason = true

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.output.writer]
filename = tri3-axial.vtk

# Give basename for VTK fault output.
[pylithapp.timedependent.interfaces.fault.output]
writer.filename = tri3-axial-fault.vtk
vertex_info_fields = [strike_dir,normal_dir,initial_traction]

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.material.output]
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = tri3-axial-statevars.vtk
