# -*- Python -*-
[pylithapp]

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
timedependent = 1
implicit = 1
petsc = 1
solvernonlinear = 1
meshioascii = 1
homogeneous = 1
elasticityimplicit = 1
fiatlagrange = 1
quadrature1d = 1
faultcohesivedyn = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
debug = 0

[pylithapp.mesh_generator.reader]
filename = twotri3.mesh
coordsys.space_dim = 2

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent]
dimension = 2
normalizer.length_scale = 1.0*m
formulation = pylith.problems.Implicit
formulation.solver = pylith.problems.SolverNonlinear

bc = [x_neg,y_neg,x_pos]
bc.x_pos = pylith.bc.Neumann

interfaces = [fault]


[pylithapp.timedependent.formulation.time_step]
total_time = 0.0*s
dt = 1.0*s


# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.timedependent.materials]
material = pylith.materials.ElasticPlaneStrain

[pylithapp.timedependent.materials.material]
label = elastic material
id = 0
db_properties.iohandler.filename = matelastic2D.spatialdb

quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = triangle

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.timedependent.bc.x_neg]

bc_dof = [0]
label = x_neg

[pylithapp.timedependent.bc.y_neg]
bc_dof = [1]

label = y_neg

[pylithapp.timedependent.bc.x_pos]
label = x_pos

db_initial = spatialdata.spatialdb.UniformDB
db_initial.label = Neumann BC +x edge
db_initial.values = [traction-shear,traction-normal]
db_initial.data = [0.0*MPa,-12000*MPa]

quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = line

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent.interfaces]
fault = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault]
label = fault

quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.shape = line

db_initial_tractions = spatialdata.spatialdb.UniformDB
db_initial_tractions.label = "Initial fault tractions"
db_initial_tractions.values = [traction-shear,traction-normal]
db_initial_tractions.data = [0.0*Pa, -10000.0*MPa]

friction.db_properties = spatialdata.spatialdb.UniformDB
friction.db_properties.label = Static friction
friction.db_properties.values = [friction-coefficient,cohesion]
friction.db_properties.data = [0.6*m,0.0*Pa]

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
pc_type = asm

# Change the preconditioner settings.
sub_pc_factor_shift_type = nonzero

ksp_rtol = 1.0e-8
ksp_max_it = 100
ksp_gmres_restart = 50
snes_max_it = 200

ksp_monitor = true
ksp_view = true
ksp_converged_reason = true

snes_monitor = true
snes_view = true
snes_converged_reason = true

#log_summary = true
#start_in_debugger = true

# Friction sensitivity solve
friction_pc_type = asm
friction_sub_pc_factor_shift_type = nonzero
friction_ksp_max_it = 25
friction_ksp_gmres_restart = 30
#friction_ksp_monitor = true
#friction_ksp_view = true
friction_ksp_converged_reason = true

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.output.writer]
filename = tri3-axial.vtk

# Give basename for VTK fault output.
[pylithapp.timedependent.interfaces.fault.output]
writer.filename = tri3-axial-fault.vtk
vertex_info_fields = [strike_dir,normal_dir,initial_traction]

# Give basename for VTK output of state variables.
[pylithapp.timedependent.materials.material.output]
cell_filter = pylith.meshio.CellFilterAvgMesh
writer.filename = tri3-axial-statevars.vtk
