#  Sample boundary condition file for 3D problem.  The units for this
#  will vary depending on the boundary condition type (displacement,
#  velocity, or force).  The simplest mechanism I can think of is to
#  specify the units for each of the types used at the top of the file.
#  In the current implementation of the code, the reading of boundary
#  conditions results in 2 arrays -- 1 integer and 1 real -- both of
#  dimensions (ndof,numnp), where ndof is the number of degrees of
#  freedom per node (3 for this 3D example), and numnp is the number of
#  nodal points.  Degrees of freedom for which no condition is applied
#  will have an entry of 0 in the integer array.  I can think of a more
#  efficient implementation where the integer array now has dimensions
#  of (ndof+1,numbc), where the extra entry now holds the node number
#  at which the condition is applied and numbc is the number of nodes
#  at which BC are applied.  This should reduce storage requirements,
#  but I will have to examine the code to see whether it is worthwhile
#  to make the change.
#
displacement_units = m
velocity_units = m/s
force_units = newton
#
#  List the boundary conditions below.
#
#  Fix all displacements along X = 0.
#
#  Note:  At present, no comments are allowed below this point!
#
       1       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
       4       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
       7       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      10       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      13       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      16       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      19       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      22       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
      25       1       1       1   0.00000000E+00   0.00000000E+00   0.00000000E+00
