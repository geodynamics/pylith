#
#   Parameter file for use with program blockrot2.
#
# **********************************************************************
#
#   Global information:
#
#    nblocks = number of blocks for this problem.
#    nfaults = number of faults for this problem.
#    cscale  = coordinate scaling factor for information from UCD file.
#    dipcut  = cutoff dip value (degrees) to determine whether dip-slip
#              movement will occur.  Points with local dip less than
#              this value will have dip-slip movement.
#
#   nblocks    nfaults    cscale    dipcut
#-----------------------------------------------------------------------
       4          3        1.0d0     75.0d0
#-----------------------------------------------------------------------
#
#   Coordinate ranges:
#
#     Enter coordinate ranges to be considered.  Any points lying
#     outside of these ranges will be rejected.
#
#    xmin    xmax    ymin    ymax    zmin    zmax
#-----------------------------------------------------------------------
     -1.5d5  1.5d5  -1.5d5  1.5d5   4.0d3   1.9d4
#-----------------------------------------------------------------------
#
#   Rotation pole info:
#
#     For each block, enter the following info:
#       blocknum(i) = Block number for this pole.
#       polex(i)    = X-coordinate defining rotation pole location.
#       poley(i)    = Y-coordinate defining rotation pole location.
#       poler(i)    = Rotation amount in degrees CCW.
#
#     Pole locations are with respect to a user-defined reference frame.
#     Note that pole locations should be given in mks units (meters),
#     and that the cscale value above should also yield units of meters
#     when applied to the UCD file containing nodal coordinates.
#
#  blocknum(i)  polex(i)    poley(i)    poler(i),  i=1,nblocks
#-----------------------------------------------------------------------
     1        -3.373d5  -9.571d5  -2.291d-7
     2        -5.002d5  -8.817d5  -4.584d-7
     5          0.0d0      0.0d0    0.0d0
     6        -1.500d5  -2.910d5  -3.163d-6
#-----------------------------------------------------------------------
#
#   Fault definition info:
#
#     For each 'fault' to be used, there must be an associated
#     definition file.  These should be listed in order of priority.
#     Nodes that lie on more than one fault will use the highest-listed
#     definition.
#
#     In addition to the file describing the fault, additional fault
#     definition info is required.  For each fault, a list of possible
#     block definitions is required.  Again, the highest-listed block
#     definition is the one that is used.
#
#     For each fault, we require the following info:
#
#     numdefs(i)   = number of fault definitions for this fault
#     block1(j,i)  = fault-bounding block toward which the normal points
#     block2(j,i)  = fault-bounding block from which the normal points
#     history(j,i) = load history to be associated with this definition
#     faultfile(i) = file containing fault definition info for this
#                    fault
#     j=1,numdefs(i),i=1,nfaults
#
#-----------------------------------------------------------------------
        1
        6            5            0
"fault_02_06_05_subset.flt_pylith"
# Highest priority is San Andreas boundary.
        1
        6            2            0
"fault_06_06_02.flt_pylith"
# Next highest priority is SAF boundary of block 2.
        1
        6            1            0
"fault_03_06_01.flt_pylith"
# Next highest priority is SAF boundary of block 1.
        1
        5            2            0
"fault_07_05_02.flt_pylith"
# Next highest priority is boundary between block 2 and reference block.
        1
        5            1            0
"fault_05_05_01.flt_pylith"
# Next highest priority is boundary between block 1 and reference block.
        1
        2            1            0
"fault_16_02_01.flt_pylith"
# Lowest priority is boundary between blocks 1 and 2.
#-----------------------------------------------------------------------
